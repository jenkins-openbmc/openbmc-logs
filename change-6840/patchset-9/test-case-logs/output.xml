<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170928 16:56:07.367">
<suite id="s1" name="Tests" source="/tmp/fspcibld/14408/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw name="Clear System Entry From Knownhosts" library="connection_client">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:08.048">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status endtime="20170928 16:56:08.048" starttime="20170928 16:56:08.047" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:08.051">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 16:56:08.054">${rc} = 2</msg>
<msg level="INFO" timestamp="20170928 16:56:08.054">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status endtime="20170928 16:56:08.054" starttime="20170928 16:56:08.048" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:08.054" starttime="20170928 16:56:08.047" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:08.054" starttime="20170928 16:56:08.046" status="PASS"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:56:08.058">Dictionary does not contain key 'host'.</msg>
<status endtime="20170928 16:56:08.058" starttime="20170928 16:56:08.058" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:08.059">${has_host} = False</msg>
<status endtime="20170928 16:56:08.059" starttime="20170928 16:56:08.057" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170928 16:56:08.060" starttime="20170928 16:56:08.060" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:08.060" starttime="20170928 16:56:08.059" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:08.062">${port_num} = 22</msg>
<status endtime="20170928 16:56:08.062" starttime="20170928 16:56:08.061" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:08.062">${SSH_PORT} = 22</msg>
<status endtime="20170928 16:56:08.062" starttime="20170928 16:56:08.062" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:08.063">${https_num} = 443</msg>
<status endtime="20170928 16:56:08.063" starttime="20170928 16:56:08.063" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:08.064">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170928 16:56:08.064" starttime="20170928 16:56:08.063" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:08.064" starttime="20170928 16:56:08.061" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:08.064" starttime="20170928 16:56:08.060" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:56:08.065">Dictionary does not contain key 'port'.</msg>
<status endtime="20170928 16:56:08.065" starttime="20170928 16:56:08.065" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:08.065">${has_port} = False</msg>
<status endtime="20170928 16:56:08.065" starttime="20170928 16:56:08.064" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170928 16:56:08.067" starttime="20170928 16:56:08.067" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170928 16:56:08.068" starttime="20170928 16:56:08.067" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:08.068" starttime="20170928 16:56:08.066" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:08.068" starttime="20170928 16:56:08.065" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:08.069">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170928 16:56:09.852">Read output: root@witherspoon:~#</msg>
<status endtime="20170928 16:56:09.853" starttime="20170928 16:56:08.068" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:09.853" starttime="20170928 16:56:08.055" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:09.855">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170928 16:56:09.942">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170928 16:56:09.942">${output} = VERSION_ID="v1.99.10-61-g0f294f0"</msg>
<msg level="INFO" timestamp="20170928 16:56:09.942">${stderr} = </msg>
<status endtime="20170928 16:56:09.942" starttime="20170928 16:56:09.854" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:09.943">Length is 0</msg>
<status endtime="20170928 16:56:09.943" starttime="20170928 16:56:09.942" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:09.943">VERSION_ID="v1.99.10-61-g0f294f0"</msg>
<status endtime="20170928 16:56:09.943" starttime="20170928 16:56:09.943" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:09.943" starttime="20170928 16:56:09.854" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:09.944" starttime="20170928 16:56:09.853" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Get Host Software Objects Details" library="code_update_utils">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:09.945">${software} = []</msg>
<status endtime="20170928 16:56:09.945" starttime="20170928 16:56:09.945" status="PASS"></status>
</kw>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:09.946">${host_list} = []</msg>
<status endtime="20170928 16:56:09.946" starttime="20170928 16:56:09.946" status="PASS"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:09.951">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:09.951" starttime="20170928 16:56:09.950" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:09.952">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:09.952" starttime="20170928 16:56:09.951" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:09.952">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:09.952" starttime="20170928 16:56:09.952" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:09.953">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:09.953" starttime="20170928 16:56:09.953" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.148">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:10.148" starttime="20170928 16:56:09.954" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:10.148">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:10.148" starttime="20170928 16:56:09.953" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:10.149" starttime="20170928 16:56:10.149" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:10.150" starttime="20170928 16:56:10.149" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.150" starttime="20170928 16:56:09.950" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.150" starttime="20170928 16:56:09.949" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.150" starttime="20170928 16:56:09.948" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.151">${base_uri} = /xyz/openbmc_project/software/</msg>
<status endtime="20170928 16:56:10.151" starttime="20170928 16:56:10.150" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.153">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status endtime="20170928 16:56:10.153" starttime="20170928 16:56:10.152" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.154">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status endtime="20170928 16:56:10.154" starttime="20170928 16:56:10.154" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.154" starttime="20170928 16:56:10.153" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.154" starttime="20170928 16:56:10.152" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.154" starttime="20170928 16:56:10.151" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.233">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:10.233">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:10.233" starttime="20170928 16:56:10.155" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.236">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/607c9e97", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_pr...</msg>
<status endtime="20170928 16:56:10.236" starttime="20170928 16:56:10.235" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.238">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/607c9e97", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/6bb7eec0", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:10.238" starttime="20170928 16:56:10.237" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.238" starttime="20170928 16:56:10.237" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.238" starttime="20170928 16:56:10.235" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.238" starttime="20170928 16:56:10.234" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:10.239">Delete All Sessions</msg>
<status endtime="20170928 16:56:10.239" starttime="20170928 16:56:10.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.239">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:10.239" starttime="20170928 16:56:09.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:10.240" starttime="20170928 16:56:10.239" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.241">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/607c9e97", 
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/6bb7eec0", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:10.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:10.241">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/xyz/openbmc_project/software/607c9e97', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_projec...</msg>
<status endtime="20170928 16:56:10.241" starttime="20170928 16:56:10.240" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.241">${sw_list} = [u'/xyz/openbmc_project/software/607c9e97', u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/6bb7eec0', u'/xyz/openbmc_project/softwa...</msg>
<status endtime="20170928 16:56:10.241" starttime="20170928 16:56:09.947" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{sw_list} ]" type="for">
<kw name="${index} = /xyz/openbmc_project/software/607c9e97" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.244">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:10.245" starttime="20170928 16:56:10.244" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:10.245" starttime="20170928 16:56:10.245" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.246">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:10.246" starttime="20170928 16:56:10.246" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:10.247" starttime="20170928 16:56:10.246" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:10.450" starttime="20170928 16:56:10.248" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:10.451">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:10.451" starttime="20170928 16:56:10.247" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:10.452" starttime="20170928 16:56:10.451" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:10.452" starttime="20170928 16:56:10.452" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.453" starttime="20170928 16:56:10.244" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.453" starttime="20170928 16:56:10.243" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.453" starttime="20170928 16:56:10.243" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.453">${base_uri} = /xyz/openbmc_project/software/607c9e97/attr/Purpose</msg>
<status endtime="20170928 16:56:10.453" starttime="20170928 16:56:10.453" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:10.454" starttime="20170928 16:56:10.454" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.596">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/607c9e97/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:10.596">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:10.596" starttime="20170928 16:56:10.454" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:10.597" starttime="20170928 16:56:10.596" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:10.597">Delete All Sessions</msg>
<status endtime="20170928 16:56:10.597" starttime="20170928 16:56:10.597" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.597">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:10.598" starttime="20170928 16:56:10.242" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20170928 16:56:10.598" starttime="20170928 16:56:10.598" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.599">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:10.599">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:10.599">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC'}</msg>
<status endtime="20170928 16:56:10.599" starttime="20170928 16:56:10.598" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.599">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status endtime="20170928 16:56:10.599" starttime="20170928 16:56:10.242" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.600">Continuing for loop from the next iteration.</msg>
<status endtime="20170928 16:56:10.600" starttime="20170928 16:56:10.600" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.600" starttime="20170928 16:56:10.241" status="PASS"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/active" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.603">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:10.603" starttime="20170928 16:56:10.603" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.604">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:10.604" starttime="20170928 16:56:10.604" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.605">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:10.605" starttime="20170928 16:56:10.604" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.605">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:10.605" starttime="20170928 16:56:10.605" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.798">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:10.798" starttime="20170928 16:56:10.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.798">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:10.798">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:10.798" starttime="20170928 16:56:10.606" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:10.799" starttime="20170928 16:56:10.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:10.800" starttime="20170928 16:56:10.799" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.800" starttime="20170928 16:56:10.602" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.800" starttime="20170928 16:56:10.602" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.800" starttime="20170928 16:56:10.601" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.801">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status endtime="20170928 16:56:10.801" starttime="20170928 16:56:10.800" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:10.801" starttime="20170928 16:56:10.801" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.869">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:10.869">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170928 16:56:10.869" starttime="20170928 16:56:10.801" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:10.870" starttime="20170928 16:56:10.869" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:10.870">Delete All Sessions</msg>
<status endtime="20170928 16:56:10.870" starttime="20170928 16:56:10.870" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.870">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170928 16:56:10.870" starttime="20170928 16:56:10.601" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.871">Returning from the enclosing user keyword.</msg>
<status endtime="20170928 16:56:10.871" starttime="20170928 16:56:10.871" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:10.871">${attr_purpose} = None</msg>
<status endtime="20170928 16:56:10.871" starttime="20170928 16:56:10.600" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.872">Continuing for loop from the next iteration.</msg>
<status endtime="20170928 16:56:10.872" starttime="20170928 16:56:10.872" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:10.872" starttime="20170928 16:56:10.600" status="PASS"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/7a9ef57c" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:10.875">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:10.875" starttime="20170928 16:56:10.875" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.876">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:10.876" starttime="20170928 16:56:10.876" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.877">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:10.877" starttime="20170928 16:56:10.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:10.877">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:10.877" starttime="20170928 16:56:10.877" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:11.084" starttime="20170928 16:56:10.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.084">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:11.084">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.084" starttime="20170928 16:56:10.878" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:11.085" starttime="20170928 16:56:11.085" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:11.086" starttime="20170928 16:56:11.085" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.086" starttime="20170928 16:56:10.874" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.086" starttime="20170928 16:56:10.874" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.086" starttime="20170928 16:56:10.873" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.087">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status endtime="20170928 16:56:11.087" starttime="20170928 16:56:11.087" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:11.088" starttime="20170928 16:56:11.087" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.211">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:11.211">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.211" starttime="20170928 16:56:11.088" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:11.212" starttime="20170928 16:56:11.211" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:11.212">Delete All Sessions</msg>
<status endtime="20170928 16:56:11.212" starttime="20170928 16:56:11.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.212">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.212" starttime="20170928 16:56:10.873" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20170928 16:56:11.214" starttime="20170928 16:56:11.213" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.214">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:11.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:11.214">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status endtime="20170928 16:56:11.214" starttime="20170928 16:56:11.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.215">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status endtime="20170928 16:56:11.215" starttime="20170928 16:56:10.872" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status endtime="20170928 16:56:11.215" starttime="20170928 16:56:11.215" status="PASS"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status endtime="20170928 16:56:11.216" starttime="20170928 16:56:11.215" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.216" starttime="20170928 16:56:10.872" status="PASS"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/6bb7eec0" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.219">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:11.219" starttime="20170928 16:56:11.219" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:11.220" starttime="20170928 16:56:11.219" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.220">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:11.220" starttime="20170928 16:56:11.220" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:11.221" starttime="20170928 16:56:11.221" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.421">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:11.421" starttime="20170928 16:56:11.222" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.421">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:11.421">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.421" starttime="20170928 16:56:11.221" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.422">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:11.422" starttime="20170928 16:56:11.422" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:11.423" starttime="20170928 16:56:11.422" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.423" starttime="20170928 16:56:11.218" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.423" starttime="20170928 16:56:11.218" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.423" starttime="20170928 16:56:11.217" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.424">${base_uri} = /xyz/openbmc_project/software/6bb7eec0/attr/Purpose</msg>
<status endtime="20170928 16:56:11.424" starttime="20170928 16:56:11.423" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:11.424" starttime="20170928 16:56:11.424" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.527">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/6bb7eec0/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:11.527">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.527" starttime="20170928 16:56:11.425" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:11.528" starttime="20170928 16:56:11.528" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:11.528">Delete All Sessions</msg>
<status endtime="20170928 16:56:11.529" starttime="20170928 16:56:11.528" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.529">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.529" starttime="20170928 16:56:11.216" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20170928 16:56:11.529" starttime="20170928 16:56:11.529" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.530">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:11.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:11.530">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC'}</msg>
<status endtime="20170928 16:56:11.530" starttime="20170928 16:56:11.530" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.530">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status endtime="20170928 16:56:11.531" starttime="20170928 16:56:11.216" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.531">Continuing for loop from the next iteration.</msg>
<status endtime="20170928 16:56:11.531" starttime="20170928 16:56:11.531" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.531" starttime="20170928 16:56:11.216" status="PASS"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.534">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:11.535" starttime="20170928 16:56:11.534" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.535">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:11.535" starttime="20170928 16:56:11.535" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.536">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:11.536" starttime="20170928 16:56:11.535" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.537">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:11.537" starttime="20170928 16:56:11.536" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:11.745" starttime="20170928 16:56:11.537" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:11.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.745" starttime="20170928 16:56:11.537" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:11.746" starttime="20170928 16:56:11.746" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:11.747" starttime="20170928 16:56:11.746" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.747" starttime="20170928 16:56:11.533" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.747" starttime="20170928 16:56:11.533" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.747" starttime="20170928 16:56:11.533" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.748">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status endtime="20170928 16:56:11.748" starttime="20170928 16:56:11.747" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:11.748" starttime="20170928 16:56:11.748" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.889">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:11.890">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.890" starttime="20170928 16:56:11.749" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:11.890" starttime="20170928 16:56:11.890" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:11.891">Delete All Sessions</msg>
<status endtime="20170928 16:56:11.891" starttime="20170928 16:56:11.891" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.891">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:11.891" starttime="20170928 16:56:11.532" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status endtime="20170928 16:56:11.892" starttime="20170928 16:56:11.891" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.892">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:11.892">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:11.892">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status endtime="20170928 16:56:11.892" starttime="20170928 16:56:11.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:11.893">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status endtime="20170928 16:56:11.893" starttime="20170928 16:56:11.532" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status endtime="20170928 16:56:11.893" starttime="20170928 16:56:11.893" status="PASS"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status endtime="20170928 16:56:11.894" starttime="20170928 16:56:11.894" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:11.894" starttime="20170928 16:56:11.531" status="PASS"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/functional" type="foritem">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:11.897">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:11.897" starttime="20170928 16:56:11.896" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.898">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:11.898" starttime="20170928 16:56:11.897" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.898">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:11.899" starttime="20170928 16:56:11.898" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:11.899">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:11.899" starttime="20170928 16:56:11.899" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.103">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:12.103" starttime="20170928 16:56:11.900" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.103">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:12.103">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:12.103" starttime="20170928 16:56:11.900" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.104">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:12.104" starttime="20170928 16:56:12.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.105">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:12.105" starttime="20170928 16:56:12.104" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.105" starttime="20170928 16:56:11.896" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.105" starttime="20170928 16:56:11.896" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.105" starttime="20170928 16:56:11.895" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.105">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status endtime="20170928 16:56:12.106" starttime="20170928 16:56:12.105" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:12.106" starttime="20170928 16:56:12.106" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.163">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:12.163">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170928 16:56:12.163" starttime="20170928 16:56:12.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:12.164" starttime="20170928 16:56:12.164" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:12.164">Delete All Sessions</msg>
<status endtime="20170928 16:56:12.164" starttime="20170928 16:56:12.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.165">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170928 16:56:12.165" starttime="20170928 16:56:11.894" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.165">Returning from the enclosing user keyword.</msg>
<status endtime="20170928 16:56:12.165" starttime="20170928 16:56:12.165" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.165">${attr_purpose} = None</msg>
<status endtime="20170928 16:56:12.166" starttime="20170928 16:56:11.894" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.166">Continuing for loop from the next iteration.</msg>
<status endtime="20170928 16:56:12.166" starttime="20170928 16:56:12.166" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.166" starttime="20170928 16:56:11.894" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.166" starttime="20170928 16:56:10.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.167">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status endtime="20170928 16:56:12.167" starttime="20170928 16:56:09.946" status="PASS"></status>
</kw>
<kw name="${pnor} IN [ @{pnor_details} ]" type="for">
<kw name="${pnor} = /xyz/openbmc_project/software/7a9ef57c" type="foritem">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.169">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:12.170" starttime="20170928 16:56:12.169" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.170">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:12.170" starttime="20170928 16:56:12.170" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.171">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:12.171" starttime="20170928 16:56:12.171" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.172">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:12.172" starttime="20170928 16:56:12.171" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.373">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:12.373" starttime="20170928 16:56:12.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:12.373">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:12.373" starttime="20170928 16:56:12.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.374">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:12.374" starttime="20170928 16:56:12.374" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:12.375" starttime="20170928 16:56:12.374" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.375" starttime="20170928 16:56:12.168" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.375" starttime="20170928 16:56:12.168" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.375" starttime="20170928 16:56:12.167" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.375">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status endtime="20170928 16:56:12.376" starttime="20170928 16:56:12.375" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:12.376" starttime="20170928 16:56:12.376" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.514">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:12.514">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:12.514" starttime="20170928 16:56:12.376" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:12.515" starttime="20170928 16:56:12.514" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:12.515">Delete All Sessions</msg>
<status endtime="20170928 16:56:12.515" starttime="20170928 16:56:12.515" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.515">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:12.516" starttime="20170928 16:56:12.167" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.516">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:12.516">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:12.516">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpow...</msg>
<status endtime="20170928 16:56:12.516" starttime="20170928 16:56:12.516" status="PASS"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status endtime="20170928 16:56:12.517" starttime="20170928 16:56:12.517" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.517" starttime="20170928 16:56:12.167" status="PASS"></status>
</kw>
<kw name="${pnor} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.520">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:12.520" starttime="20170928 16:56:12.519" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:12.521" starttime="20170928 16:56:12.520" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.521">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:12.521" starttime="20170928 16:56:12.521" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:12.522" starttime="20170928 16:56:12.522" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.700">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:12.700" starttime="20170928 16:56:12.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.700">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:12.700">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:12.700" starttime="20170928 16:56:12.522" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.701">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:12.701" starttime="20170928 16:56:12.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:12.702" starttime="20170928 16:56:12.701" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.702" starttime="20170928 16:56:12.519" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.702" starttime="20170928 16:56:12.519" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.702" starttime="20170928 16:56:12.518" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.703">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status endtime="20170928 16:56:12.703" starttime="20170928 16:56:12.702" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170928 16:56:12.703" starttime="20170928 16:56:12.703" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.815">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:12.815">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:12.815" starttime="20170928 16:56:12.703" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170928 16:56:12.816" starttime="20170928 16:56:12.816" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:12.816">Delete All Sessions</msg>
<status endtime="20170928 16:56:12.817" starttime="20170928 16:56:12.816" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.817">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:12.817" starttime="20170928 16:56:12.517" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:12.817">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:12.817">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:12.818">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openp...</msg>
<status endtime="20170928 16:56:12.818" starttime="20170928 16:56:12.817" status="PASS"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status endtime="20170928 16:56:12.818" starttime="20170928 16:56:12.818" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.819" starttime="20170928 16:56:12.517" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.819" starttime="20170928 16:56:12.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:12.819">${software} = [{u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml...</msg>
<status endtime="20170928 16:56:12.819" starttime="20170928 16:56:09.944" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:12.819">[{u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2', u'Path': u'', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Priority': 1}, {u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Path': u'', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Priority': 0}]</msg>
<status endtime="20170928 16:56:12.820" starttime="20170928 16:56:12.819" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.820" starttime="20170928 16:56:09.944" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:12.820" starttime="20170928 16:56:09.944" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:13.253">newline=

term_type=vt100
prompt=# 
alias=bmc_connection
encoding=UTF-8
height=24
index=1
timeout=25 seconds
path_separator=/
port=22
width=80
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170928 16:56:13.253">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170928 16:56:14.052">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170928 16:56:14.052">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170928 16:56:14.149">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170928 16:56:14.160">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170928 16:56:14.160">${stderr} = </msg>
<msg level="INFO" timestamp="20170928 16:56:14.160">${rc} = 0</msg>
<status endtime="20170928 16:56:14.160" starttime="20170928 16:56:12.821" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:14.161">Length is 0</msg>
<status endtime="20170928 16:56:14.161" starttime="20170928 16:56:14.160" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:14.161">Length is 11</msg>
<status endtime="20170928 16:56:14.162" starttime="20170928 16:56:14.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:14.162">${bmc_model} = Witherspoon</msg>
<status endtime="20170928 16:56:14.162" starttime="20170928 16:56:12.821" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:14.162">BMC Model=Witherspoon</msg>
<status endtime="20170928 16:56:14.162" starttime="20170928 16:56:14.162" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:14.163" starttime="20170928 16:56:12.820" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:14.163" starttime="20170928 16:56:12.820" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:56:14.165">Dictionary does not contain key 'host'.</msg>
<status endtime="20170928 16:56:14.165" starttime="20170928 16:56:14.165" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:14.165">${has_host} = False</msg>
<status endtime="20170928 16:56:14.165" starttime="20170928 16:56:14.164" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170928 16:56:14.166" starttime="20170928 16:56:14.166" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:14.167" starttime="20170928 16:56:14.166" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:14.168">${port_num} = 22</msg>
<status endtime="20170928 16:56:14.168" starttime="20170928 16:56:14.168" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:14.169">${SSH_PORT} = 22</msg>
<status endtime="20170928 16:56:14.169" starttime="20170928 16:56:14.168" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:14.169">${https_num} = 443</msg>
<status endtime="20170928 16:56:14.169" starttime="20170928 16:56:14.169" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:14.170">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170928 16:56:14.170" starttime="20170928 16:56:14.170" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:14.170" starttime="20170928 16:56:14.167" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:14.170" starttime="20170928 16:56:14.167" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:56:14.171">Dictionary does not contain key 'port'.</msg>
<status endtime="20170928 16:56:14.171" starttime="20170928 16:56:14.171" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:14.171">${has_port} = False</msg>
<status endtime="20170928 16:56:14.171" starttime="20170928 16:56:14.171" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170928 16:56:14.173" starttime="20170928 16:56:14.173" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170928 16:56:14.174" starttime="20170928 16:56:14.174" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:14.174" starttime="20170928 16:56:14.172" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:14.174" starttime="20170928 16:56:14.172" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:14.175">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170928 16:56:15.884">Read output: root@witherspoon:~#</msg>
<status endtime="20170928 16:56:15.884" starttime="20170928 16:56:14.174" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:15.884" starttime="20170928 16:56:14.164" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:15.885">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170928 16:56:15.962">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170928 16:56:15.962">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170928 16:56:15.962">${stderr} = </msg>
<status endtime="20170928 16:56:15.962" starttime="20170928 16:56:15.885" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:15.963">Length is 0</msg>
<status endtime="20170928 16:56:15.963" starttime="20170928 16:56:15.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:15.963">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170928 16:56:15.963" starttime="20170928 16:56:15.885" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170928 16:56:15.964" starttime="20170928 16:56:15.964" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:15.964" starttime="20170928 16:56:14.163" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:15.964" starttime="20170928 16:56:14.163" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:15.964" starttime="20170928 16:56:08.046" status="PASS"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/14408/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/14408/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.012">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:16.012" starttime="20170928 16:56:16.011" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:16.013" starttime="20170928 16:56:16.012" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.014">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:16.014" starttime="20170928 16:56:16.013" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:16.014" starttime="20170928 16:56:16.014" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.202">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:16.202" starttime="20170928 16:56:16.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.202">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:16.202">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:16.202" starttime="20170928 16:56:16.015" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.203">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:16.203" starttime="20170928 16:56:16.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:16.204" starttime="20170928 16:56:16.203" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.204" starttime="20170928 16:56:16.011" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.204" starttime="20170928 16:56:16.010" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.204" starttime="20170928 16:56:16.010" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170928 16:56:16.205" starttime="20170928 16:56:16.205" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.215">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170928 16:56:16.215" starttime="20170928 16:56:16.206" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.225">${FFDC_DIR_PATH} = </msg>
<status endtime="20170928 16:56:16.225" starttime="20170928 16:56:16.216" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.227">${cur_time} = 2017-09-28 16:56:16:226845</msg>
<status endtime="20170928 16:56:16.227" starttime="20170928 16:56:16.227" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.228">${cur_time} = 20170928165616226845</msg>
<status endtime="20170928 16:56:16.228" starttime="20170928 16:56:16.227" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.228" starttime="20170928 16:56:16.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.232">${FFDC_TIME} = 20170928165616226845</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.234">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170928 16:56:16.234" starttime="20170928 16:56:16.233" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.234">${suite_name} = 20170928165616226845_TestsSecurityTestSsl</msg>
<status endtime="20170928 16:56:16.234" starttime="20170928 16:56:16.234" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.235">${test_name} = TestSSLConnection</msg>
<status endtime="20170928 16:56:16.235" starttime="20170928 16:56:16.235" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.235">${test_name} = 20170928165616226845_TestSSLConnection</msg>
<status endtime="20170928 16:56:16.236" starttime="20170928 16:56:16.235" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.236" starttime="20170928 16:56:16.233" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.236">${FFDC_DIR_PATH} = /tmp/fspcibld/14408/obmc-robot/logs/20170928165616226845_TestsSecurityTestSsl/20170928165616226845_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170928 16:56:16.242">${FFDC_PREFIX} = 20170928165616226845_</msg>
<status endtime="20170928 16:56:16.242" starttime="20170928 16:56:16.226" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.242" starttime="20170928 16:56:16.225" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170928 16:56:16.243" starttime="20170928 16:56:16.243" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.244" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/14408/obmc-robot/logs"&gt;/tmp/fspcibld/14408/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170928 16:56:16.244" starttime="20170928 16:56:16.243" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:56:16.245">File '/tmp/fspcibld/14408/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170928 16:56:16.245" starttime="20170928 16:56:16.244" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.245">${exist} = False</msg>
<status endtime="20170928 16:56:16.245" starttime="20170928 16:56:16.244" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.246" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/14408/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14408/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170928 16:56:16.246" starttime="20170928 16:56:16.246" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.246" starttime="20170928 16:56:16.245" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170928 16:56:16.247" starttime="20170928 16:56:16.247" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.248">${cur_time} = 2017-09-28 16:56:16:247903</msg>
<status endtime="20170928 16:56:16.248" starttime="20170928 16:56:16.247" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.249">${cur_time} = 20170928165616247903</msg>
<status endtime="20170928 16:56:16.249" starttime="20170928 16:56:16.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.249">${cur_time} = 20170928165616247903</msg>
<status endtime="20170928 16:56:16.249" starttime="20170928 16:56:16.247" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.251" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/14408/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14408/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170928 16:56:16.251" starttime="20170928 16:56:16.250" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.251" starttime="20170928 16:56:16.205" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status endtime="20170928 16:56:16.251" starttime="20170928 16:56:16.251" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.251" starttime="20170928 16:56:16.204" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170928 16:56:16.252" starttime="20170928 16:56:16.009" status="PASS" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:16.252">Delete All Sessions</msg>
<status endtime="20170928 16:56:16.252" starttime="20170928 16:56:16.252" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170928 16:56:16.252" starttime="20170928 16:56:15.966" status="PASS"></status>
</suite>
<status endtime="20170928 16:56:16.254" starttime="20170928 16:56:15.964" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/14408/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.309">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 16:56:16.309" starttime="20170928 16:56:16.309" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.310">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 16:56:16.310" starttime="20170928 16:56:16.309" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.310">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 16:56:16.310" starttime="20170928 16:56:16.308" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.312">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 16:56:16.312" starttime="20170928 16:56:16.311" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.313">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 16:56:16.313" starttime="20170928 16:56:16.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.313">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 16:56:16.313" starttime="20170928 16:56:16.311" status="PASS"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.314">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170928 16:56:16.314" starttime="20170928 16:56:16.314" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 16:56:16.315" starttime="20170928 16:56:16.314" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.318">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 16:56:16.326">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 16:56:16.326">${output} = /tmp/fspcibld/14408/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170928 16:56:16.328" starttime="20170928 16:56:16.315" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170928 16:56:16.340" starttime="20170928 16:56:16.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status endtime="20170928 16:56:16.344" starttime="20170928 16:56:16.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.344">${ssh_pw_file_path} = ssh_pw</msg>
<status endtime="20170928 16:56:16.344" starttime="20170928 16:56:16.342" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.345">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 16:56:16.345" starttime="20170928 16:56:16.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.346">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 16:56:16.346" starttime="20170928 16:56:16.313" status="PASS"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.347">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20170928 16:56:16.347" starttime="20170928 16:56:16.347" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.349">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170928 16:56:16.349" starttime="20170928 16:56:16.348" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 16:56:16.349" starttime="20170928 16:56:16.349" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.361">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 16:56:16.377">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 16:56:16.377">${os_con_pid} = </msg>
<status endtime="20170928 16:56:16.377" starttime="20170928 16:56:16.350" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170928 16:56:16.390" starttime="20170928 16:56:16.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.391">${os_con_pid} = </msg>
<status endtime="20170928 16:56:16.391" starttime="20170928 16:56:16.313" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.392">${cmd_buf} = kill -9 </msg>
<status endtime="20170928 16:56:16.392" starttime="20170928 16:56:16.391" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 16:56:16.395" starttime="20170928 16:56:16.393" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.396">${rc} = None</msg>
<msg level="INFO" timestamp="20170928 16:56:16.396">${output} = None</msg>
<status endtime="20170928 16:56:16.396" starttime="20170928 16:56:16.395" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170928 16:56:16.397" starttime="20170928 16:56:16.396" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:56:16.402">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status endtime="20170928 16:56:16.402" starttime="20170928 16:56:16.399" status="FAIL"></status>
</kw>
<status endtime="20170928 16:56:16.402" starttime="20170928 16:56:16.399" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:16.402" starttime="20170928 16:56:16.397" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.402">${output} = </msg>
<status endtime="20170928 16:56:16.402" starttime="20170928 16:56:16.402" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.403">${loc_quiet} = 1</msg>
<status endtime="20170928 16:56:16.403" starttime="20170928 16:56:16.403" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170928 16:56:16.487" starttime="20170928 16:56:16.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.490">${rc} = 1</msg>
<msg level="INFO" timestamp="20170928 16:56:16.490">${output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status endtime="20170928 16:56:16.490" starttime="20170928 16:56:16.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.493">${log_output} = cat: /tmp/9.3.86.161_os_console.txt: No such file or directory
</msg>
<status endtime="20170928 16:56:16.493" starttime="20170928 16:56:16.310" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:16.502" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status endtime="20170928 16:56:16.502" starttime="20170928 16:56:16.500" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.505">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170928 16:56:16.505" starttime="20170928 16:56:16.505" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 16:56:16.505" starttime="20170928 16:56:16.505" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.515">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 16:56:16.533">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 16:56:16.533">${output} = /tmp/fspcibld/14408/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170928 16:56:16.534" starttime="20170928 16:56:16.506" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170928 16:56:16.550" starttime="20170928 16:56:16.547" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status endtime="20170928 16:56:16.554" starttime="20170928 16:56:16.554" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.555">${ssh_pw_file_path} = ssh_pw</msg>
<status endtime="20170928 16:56:16.555" starttime="20170928 16:56:16.551" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.557">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 16:56:16.557" starttime="20170928 16:56:16.555" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:16.558">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 16:56:16.559" starttime="20170928 16:56:16.502" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.559">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status endtime="20170928 16:56:16.559" starttime="20170928 16:56:16.559" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 16:56:16.560" starttime="20170928 16:56:16.560" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:16.569">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170928 16:56:16.575">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 16:56:16.575">${output} = </msg>
<status endtime="20170928 16:56:16.575" starttime="20170928 16:56:16.560" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170928 16:56:16.590" starttime="20170928 16:56:16.589" status="PASS"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.591">Slept 1 second</msg>
<status endtime="20170928 16:56:17.591" starttime="20170928 16:56:16.591" status="PASS"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.594">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170928 16:56:17.594" starttime="20170928 16:56:17.593" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 16:56:17.595" starttime="20170928 16:56:17.594" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.599">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 16:56:17.603">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 16:56:17.603">${output} = /tmp/fspcibld/14408/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170928 16:56:17.603" starttime="20170928 16:56:17.595" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170928 16:56:17.606" starttime="20170928 16:56:17.606" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status endtime="20170928 16:56:17.608" starttime="20170928 16:56:17.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:17.608">${ssh_pw_file_path} = ssh_pw</msg>
<status endtime="20170928 16:56:17.608" starttime="20170928 16:56:17.607" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.609">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 16:56:17.609" starttime="20170928 16:56:17.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:17.609">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 16:56:17.609" starttime="20170928 16:56:17.593" status="PASS"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.610">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20170928 16:56:17.610" starttime="20170928 16:56:17.610" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.611">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170928 16:56:17.611" starttime="20170928 16:56:17.610" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 16:56:17.611" starttime="20170928 16:56:17.611" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.615">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 16:56:17.628">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 16:56:17.628">${os_con_pid} = 184</msg>
<status endtime="20170928 16:56:17.629" starttime="20170928 16:56:17.611" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170928 16:56:17.645" starttime="20170928 16:56:17.643" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:17.645">${os_con_pid} = 184</msg>
<status endtime="20170928 16:56:17.645" starttime="20170928 16:56:17.592" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.646">Length is 3</msg>
<status endtime="20170928 16:56:17.646" starttime="20170928 16:56:17.646" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:17.647" starttime="20170928 16:56:16.308" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.649">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.656">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170928 16:56:17.656" starttime="20170928 16:56:17.655" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.658">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170928 16:56:17.658" starttime="20170928 16:56:17.657" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.662">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:17.667" starttime="20170928 16:56:17.662" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:17.668" starttime="20170928 16:56:17.667" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.668">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:17.668" starttime="20170928 16:56:17.668" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.669">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:17.669" starttime="20170928 16:56:17.669" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:17.890" starttime="20170928 16:56:17.670" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:17.890">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:17.890">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:17.890" starttime="20170928 16:56:17.669" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.891">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:17.891" starttime="20170928 16:56:17.890" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:17.891" starttime="20170928 16:56:17.891" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:17.891" starttime="20170928 16:56:17.660" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:17.892" starttime="20170928 16:56:17.659" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:17.892" starttime="20170928 16:56:17.659" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.892">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170928 16:56:17.893" starttime="20170928 16:56:17.892" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.893">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:17.893" starttime="20170928 16:56:17.893" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170928 16:56:17.894" starttime="20170928 16:56:17.893" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:17.895">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170928 16:56:17.895" starttime="20170928 16:56:17.895" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:17.896">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170928 16:56:17.896" starttime="20170928 16:56:17.896" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:17.897" starttime="20170928 16:56:17.896" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:17.897" starttime="20170928 16:56:17.894" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:18.176">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170928 16:56:18.176">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:18.176" starttime="20170928 16:56:17.897" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:18.177">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:18.177" starttime="20170928 16:56:18.177" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:18.178">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:18.178" starttime="20170928 16:56:18.178" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:18.179" starttime="20170928 16:56:18.177" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:18.179" starttime="20170928 16:56:18.176" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:18.179">Delete All Sessions</msg>
<status endtime="20170928 16:56:18.179" starttime="20170928 16:56:18.179" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:18.179">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:18.179" starttime="20170928 16:56:17.658" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:18.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:18.180" starttime="20170928 16:56:18.180" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:18.181">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:18.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:18.181">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170928 16:56:18.181" starttime="20170928 16:56:18.180" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:18.181" starttime="20170928 16:56:17.656" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170928 16:56:18.181" starttime="20170928 16:56:18.181" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:18.188">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:18.188" starttime="20170928 16:56:18.187" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:18.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:18.189" starttime="20170928 16:56:18.188" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:18.189">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:18.189" starttime="20170928 16:56:18.189" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:18.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:18.190" starttime="20170928 16:56:18.190" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.095">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:19.095" starttime="20170928 16:56:18.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:19.095">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:19.095">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:19.095" starttime="20170928 16:56:18.190" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.096">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:19.096" starttime="20170928 16:56:19.095" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:19.096" starttime="20170928 16:56:19.096" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.096" starttime="20170928 16:56:18.187" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.097" starttime="20170928 16:56:18.186" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.097" starttime="20170928 16:56:18.186" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.097">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:56:19.097" starttime="20170928 16:56:19.097" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.100">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:19.100" starttime="20170928 16:56:19.099" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.102">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:19.102" starttime="20170928 16:56:19.101" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.102" starttime="20170928 16:56:19.101" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.102" starttime="20170928 16:56:19.098" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.102" starttime="20170928 16:56:19.098" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.387">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:19.387">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:19.387" starttime="20170928 16:56:19.102" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.389">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:19.389" starttime="20170928 16:56:19.389" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.390">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:19.391" starttime="20170928 16:56:19.390" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.391" starttime="20170928 16:56:19.389" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.391" starttime="20170928 16:56:19.388" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.391" starttime="20170928 16:56:19.388" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:19.391">Delete All Sessions</msg>
<status endtime="20170928 16:56:19.391" starttime="20170928 16:56:19.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:19.392">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:19.392" starttime="20170928 16:56:18.185" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:19.392" starttime="20170928 16:56:19.392" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.393">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:19.393">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:19.393">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170928 16:56:19.393" starttime="20170928 16:56:19.393" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:19.393">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170928 16:56:19.393" starttime="20170928 16:56:18.184" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:19.394">${power_state} = Off</msg>
<status endtime="20170928 16:56:19.394" starttime="20170928 16:56:18.184" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:56:19.394" starttime="20170928 16:56:19.394" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.394" starttime="20170928 16:56:18.183" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.398">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:19.399" starttime="20170928 16:56:19.398" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.399">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:19.399" starttime="20170928 16:56:19.399" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.400">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:19.400" starttime="20170928 16:56:19.399" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:19.400" starttime="20170928 16:56:19.400" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.856">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:19.856" starttime="20170928 16:56:19.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:19.856">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:19.856">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:19.856" starttime="20170928 16:56:19.401" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.857">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:19.857" starttime="20170928 16:56:19.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.858">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:19.858" starttime="20170928 16:56:19.857" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.858" starttime="20170928 16:56:19.397" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.858" starttime="20170928 16:56:19.397" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.858" starttime="20170928 16:56:19.396" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.859">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:56:19.859" starttime="20170928 16:56:19.858" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:19.861">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:19.861" starttime="20170928 16:56:19.860" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:19.862">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:19.862" starttime="20170928 16:56:19.862" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.862" starttime="20170928 16:56:19.861" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.862" starttime="20170928 16:56:19.859" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:19.862" starttime="20170928 16:56:19.859" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.073">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:20.073">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:20.073" starttime="20170928 16:56:19.863" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.075">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:20.075" starttime="20170928 16:56:20.075" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:20.076">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:20.076" starttime="20170928 16:56:20.076" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.076" starttime="20170928 16:56:20.075" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.076" starttime="20170928 16:56:20.074" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.076" starttime="20170928 16:56:20.074" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:20.077">Delete All Sessions</msg>
<status endtime="20170928 16:56:20.077" starttime="20170928 16:56:20.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:20.077">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:20.077" starttime="20170928 16:56:19.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:20.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:20.078" starttime="20170928 16:56:20.078" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.079">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:20.079">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:20.079">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170928 16:56:20.079" starttime="20170928 16:56:20.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:20.080">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170928 16:56:20.080" starttime="20170928 16:56:19.395" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:20.080">${host_state} = Off</msg>
<status endtime="20170928 16:56:20.080" starttime="20170928 16:56:19.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:56:20.081" starttime="20170928 16:56:20.081" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.081" starttime="20170928 16:56:18.183" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.081" starttime="20170928 16:56:18.182" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.081" starttime="20170928 16:56:18.182" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:20.082">${status} = True</msg>
<status endtime="20170928 16:56:20.082" starttime="20170928 16:56:18.182" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170928 16:56:20.083" starttime="20170928 16:56:20.082" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.083" starttime="20170928 16:56:17.654" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.084">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170928 16:56:20.084" starttime="20170928 16:56:20.083" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.085">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170928 16:56:20.085" starttime="20170928 16:56:20.084" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:20.087">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:20.088" starttime="20170928 16:56:20.087" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:20.089" starttime="20170928 16:56:20.089" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.090">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:20.090" starttime="20170928 16:56:20.089" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:20.090" starttime="20170928 16:56:20.090" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:20.315">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:20.315" starttime="20170928 16:56:20.091" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:20.315">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:20.315">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:20.315" starttime="20170928 16:56:20.091" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:20.316">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:20.316" starttime="20170928 16:56:20.316" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:20.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:20.317" starttime="20170928 16:56:20.316" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.317" starttime="20170928 16:56:20.087" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.317" starttime="20170928 16:56:20.086" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.317" starttime="20170928 16:56:20.086" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.318">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170928 16:56:20.318" starttime="20170928 16:56:20.317" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.319">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:20.319" starttime="20170928 16:56:20.318" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170928 16:56:20.319" starttime="20170928 16:56:20.319" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:20.321">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170928 16:56:20.321" starttime="20170928 16:56:20.320" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:20.322">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170928 16:56:20.322" starttime="20170928 16:56:20.321" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.322" starttime="20170928 16:56:20.321" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:20.322" starttime="20170928 16:56:20.319" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:21.386">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170928 16:56:21.386">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:21.386" starttime="20170928 16:56:20.322" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:21.387">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:21.387" starttime="20170928 16:56:21.387" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:21.388">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:21.388" starttime="20170928 16:56:21.388" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:21.389" starttime="20170928 16:56:21.388" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:21.389" starttime="20170928 16:56:21.386" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:21.389">Delete All Sessions</msg>
<status endtime="20170928 16:56:21.389" starttime="20170928 16:56:21.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:21.389">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:21.389" starttime="20170928 16:56:20.085" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:21.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:21.390" starttime="20170928 16:56:21.390" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:21.391">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:21.391">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:21.391">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170928 16:56:21.391" starttime="20170928 16:56:21.390" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:21.391" starttime="20170928 16:56:20.084" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170928 16:56:21.392" starttime="20170928 16:56:21.391" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:21.397">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:21.397" starttime="20170928 16:56:21.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:21.397">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:21.397" starttime="20170928 16:56:21.397" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:21.398">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:21.398" starttime="20170928 16:56:21.398" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:21.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:21.399" starttime="20170928 16:56:21.399" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:24.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:24.460" starttime="20170928 16:56:21.400" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:24.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:24.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:24.460" starttime="20170928 16:56:21.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:24.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:24.461" starttime="20170928 16:56:24.461" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:24.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:24.462" starttime="20170928 16:56:24.461" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:24.462" starttime="20170928 16:56:21.396" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:24.462" starttime="20170928 16:56:21.395" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:24.462" starttime="20170928 16:56:21.395" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:24.463">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:56:24.463" starttime="20170928 16:56:24.462" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:24.465">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:24.465" starttime="20170928 16:56:24.464" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:24.466">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:24.466" starttime="20170928 16:56:24.466" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:24.466" starttime="20170928 16:56:24.465" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:24.467" starttime="20170928 16:56:24.464" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:24.467" starttime="20170928 16:56:24.463" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20170928 16:56:34.479">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20170928 16:56:36.645">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:36.646">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:36.646" starttime="20170928 16:56:24.467" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:36.648">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:36.648" starttime="20170928 16:56:36.647" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:36.649">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:36.649" starttime="20170928 16:56:36.649" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:36.649" starttime="20170928 16:56:36.648" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:36.649" starttime="20170928 16:56:36.647" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:36.649" starttime="20170928 16:56:36.646" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:36.650">Delete All Sessions</msg>
<status endtime="20170928 16:56:36.650" starttime="20170928 16:56:36.650" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:36.650">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:36.650" starttime="20170928 16:56:21.394" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:36.651">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:36.651" starttime="20170928 16:56:36.650" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:36.651">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:36.651">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:36.652">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170928 16:56:36.652" starttime="20170928 16:56:36.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:36.652">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170928 16:56:36.652" starttime="20170928 16:56:21.394" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:36.652">${power_state} = Off</msg>
<status endtime="20170928 16:56:36.652" starttime="20170928 16:56:21.393" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:56:36.653">On != Off</msg>
<status endtime="20170928 16:56:36.653" starttime="20170928 16:56:36.652" status="FAIL"></status>
</kw>
<status endtime="20170928 16:56:36.653" starttime="20170928 16:56:21.393" status="FAIL"></status>
</kw>
<status endtime="20170928 16:56:36.653" starttime="20170928 16:56:21.392" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:46.658">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:46.659" starttime="20170928 16:56:46.658" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:46.660">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:46.660" starttime="20170928 16:56:46.659" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:46.660">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:46.660" starttime="20170928 16:56:46.660" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:46.661">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:46.661" starttime="20170928 16:56:46.661" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.050">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:47.051" starttime="20170928 16:56:46.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:47.051">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:47.051" starttime="20170928 16:56:46.661" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.051">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.051" starttime="20170928 16:56:47.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.052" starttime="20170928 16:56:47.052" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.052" starttime="20170928 16:56:46.657" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.052" starttime="20170928 16:56:46.657" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.053" starttime="20170928 16:56:46.656" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.053">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:56:47.053" starttime="20170928 16:56:47.053" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.055">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:47.055" starttime="20170928 16:56:47.055" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.056">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:47.056" starttime="20170928 16:56:47.056" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.056" starttime="20170928 16:56:47.055" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.057" starttime="20170928 16:56:47.054" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.057" starttime="20170928 16:56:47.054" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.348">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:47.348">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:47.348" starttime="20170928 16:56:47.057" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.350">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:47.350" starttime="20170928 16:56:47.350" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.351">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:47.351" starttime="20170928 16:56:47.351" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.351" starttime="20170928 16:56:47.350" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.351" starttime="20170928 16:56:47.349" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.351" starttime="20170928 16:56:47.349" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:47.352">Delete All Sessions</msg>
<status endtime="20170928 16:56:47.352" starttime="20170928 16:56:47.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.352">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:47.352" starttime="20170928 16:56:46.656" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.353" starttime="20170928 16:56:47.352" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.353">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:47.353">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:47.354">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:56:47.354" starttime="20170928 16:56:47.353" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.354">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:56:47.354" starttime="20170928 16:56:46.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.354">${power_state} = On</msg>
<status endtime="20170928 16:56:47.354" starttime="20170928 16:56:46.655" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:56:47.355" starttime="20170928 16:56:47.354" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.355" starttime="20170928 16:56:46.654" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.359">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:47.359" starttime="20170928 16:56:47.359" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.360">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:47.360" starttime="20170928 16:56:47.360" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.361">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:47.361" starttime="20170928 16:56:47.360" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.361">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:47.361" starttime="20170928 16:56:47.361" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.690">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:47.690" starttime="20170928 16:56:47.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.691">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:47.691">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:47.691" starttime="20170928 16:56:47.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.691">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.691" starttime="20170928 16:56:47.691" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.692" starttime="20170928 16:56:47.692" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.692" starttime="20170928 16:56:47.358" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.692" starttime="20170928 16:56:47.358" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.692" starttime="20170928 16:56:47.357" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.693">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:56:47.693" starttime="20170928 16:56:47.693" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.695">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:47.695" starttime="20170928 16:56:47.694" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.696">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:47.696" starttime="20170928 16:56:47.696" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.696" starttime="20170928 16:56:47.695" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.696" starttime="20170928 16:56:47.694" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.696" starttime="20170928 16:56:47.693" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.782">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:47.782">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:47.782" starttime="20170928 16:56:47.697" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.784">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:47.784" starttime="20170928 16:56:47.784" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.785">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:47.785" starttime="20170928 16:56:47.785" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.786" starttime="20170928 16:56:47.785" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.786" starttime="20170928 16:56:47.783" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.786" starttime="20170928 16:56:47.782" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:47.786">Delete All Sessions</msg>
<status endtime="20170928 16:56:47.786" starttime="20170928 16:56:47.786" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.786">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:47.786" starttime="20170928 16:56:47.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.787" starttime="20170928 16:56:47.787" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.788">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:47.788">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:47.788">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:56:47.788" starttime="20170928 16:56:47.787" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.788">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:56:47.788" starttime="20170928 16:56:47.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.788">${host_state} = Running</msg>
<status endtime="20170928 16:56:47.789" starttime="20170928 16:56:47.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:56:47.789" starttime="20170928 16:56:47.789" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.793">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:47.794" starttime="20170928 16:56:47.793" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:47.794" starttime="20170928 16:56:47.794" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.795">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:47.795" starttime="20170928 16:56:47.794" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.795">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:47.795" starttime="20170928 16:56:47.795" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.987">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:47.987" starttime="20170928 16:56:47.796" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:47.988">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:47.988">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:47.988" starttime="20170928 16:56:47.796" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.988">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.988" starttime="20170928 16:56:47.988" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:47.989" starttime="20170928 16:56:47.989" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.989" starttime="20170928 16:56:47.792" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.989" starttime="20170928 16:56:47.792" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.990" starttime="20170928 16:56:47.791" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.990">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:56:47.990" starttime="20170928 16:56:47.990" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:47.992">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:56:47.992" starttime="20170928 16:56:47.992" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:47.993">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:56:47.993" starttime="20170928 16:56:47.993" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.993" starttime="20170928 16:56:47.992" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.993" starttime="20170928 16:56:47.991" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:47.994" starttime="20170928 16:56:47.990" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:48.148">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:48.148">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:48.148" starttime="20170928 16:56:47.994" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:48.150">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:48.150" starttime="20170928 16:56:48.149" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:48.151">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:48.151" starttime="20170928 16:56:48.151" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:48.151" starttime="20170928 16:56:48.150" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:48.151" starttime="20170928 16:56:48.149" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:48.151" starttime="20170928 16:56:48.148" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:48.152">Delete All Sessions</msg>
<status endtime="20170928 16:56:48.152" starttime="20170928 16:56:48.151" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:48.152">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:48.152" starttime="20170928 16:56:47.791" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:48.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:48.153" starttime="20170928 16:56:48.152" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:48.153">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:48.153">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:48.153">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170928 16:56:48.153" starttime="20170928 16:56:48.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:48.154">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170928 16:56:48.154" starttime="20170928 16:56:47.790" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:48.154">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170928 16:56:48.154" starttime="20170928 16:56:47.790" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:48.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:56:48.155">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170928 16:56:48.155" starttime="20170928 16:56:48.154" status="FAIL"></status>
</kw>
<status endtime="20170928 16:56:48.155" starttime="20170928 16:56:47.789" status="FAIL"></status>
</kw>
<status endtime="20170928 16:56:48.155" starttime="20170928 16:56:46.654" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.205">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:58.206" starttime="20170928 16:56:58.205" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:58.206" starttime="20170928 16:56:58.206" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.207">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:58.207" starttime="20170928 16:56:58.207" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:58.208" starttime="20170928 16:56:58.207" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.529">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:58.529" starttime="20170928 16:56:58.208" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:58.529">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:58.529">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:58.529" starttime="20170928 16:56:58.208" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.530">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:58.530" starttime="20170928 16:56:58.530" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:58.531" starttime="20170928 16:56:58.530" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.531" starttime="20170928 16:56:58.160" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.531" starttime="20170928 16:56:58.159" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.532" starttime="20170928 16:56:58.158" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.532">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:56:58.532" starttime="20170928 16:56:58.532" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.535">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:58.535" starttime="20170928 16:56:58.534" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.537">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:58.537" starttime="20170928 16:56:58.536" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.537" starttime="20170928 16:56:58.536" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.537" starttime="20170928 16:56:58.533" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.537" starttime="20170928 16:56:58.533" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.865">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:58.866">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:58.866" starttime="20170928 16:56:58.537" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.868">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:58.868" starttime="20170928 16:56:58.867" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.869">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:58.869" starttime="20170928 16:56:58.868" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.869" starttime="20170928 16:56:58.868" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.869" starttime="20170928 16:56:58.866" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.869" starttime="20170928 16:56:58.866" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:58.869">Delete All Sessions</msg>
<status endtime="20170928 16:56:58.870" starttime="20170928 16:56:58.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:58.870">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:58.870" starttime="20170928 16:56:58.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:58.870" starttime="20170928 16:56:58.870" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.871">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:58.871">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:58.871">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:56:58.871" starttime="20170928 16:56:58.871" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:58.871">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:56:58.871" starttime="20170928 16:56:58.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:58.872">${power_state} = On</msg>
<status endtime="20170928 16:56:58.872" starttime="20170928 16:56:58.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:56:58.872" starttime="20170928 16:56:58.872" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:58.872" starttime="20170928 16:56:58.156" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:58.876">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:58.877" starttime="20170928 16:56:58.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.877">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:58.877" starttime="20170928 16:56:58.877" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.878">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:58.878" starttime="20170928 16:56:58.878" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:58.879">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:58.879" starttime="20170928 16:56:58.878" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:59.234">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:56:59.234" starttime="20170928 16:56:58.879" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:59.234">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:56:59.234">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:59.234" starttime="20170928 16:56:58.879" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:59.235">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:59.235" starttime="20170928 16:56:59.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:59.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:59.236" starttime="20170928 16:56:59.235" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.236" starttime="20170928 16:56:58.876" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.236" starttime="20170928 16:56:58.875" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.236" starttime="20170928 16:56:58.875" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.237">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:56:59.237" starttime="20170928 16:56:59.236" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.240">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:59.240" starttime="20170928 16:56:59.239" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:59.241">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:56:59.241" starttime="20170928 16:56:59.241" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.242" starttime="20170928 16:56:59.240" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.242" starttime="20170928 16:56:59.238" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.242" starttime="20170928 16:56:59.237" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.669">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:56:59.669">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:59.669" starttime="20170928 16:56:59.242" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.671">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:59.671" starttime="20170928 16:56:59.670" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:59.672">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:56:59.672" starttime="20170928 16:56:59.672" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.672" starttime="20170928 16:56:59.671" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.672" starttime="20170928 16:56:59.670" status="PASS"></status>
</kw>
<status endtime="20170928 16:56:59.672" starttime="20170928 16:56:59.670" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:56:59.673">Delete All Sessions</msg>
<status endtime="20170928 16:56:59.673" starttime="20170928 16:56:59.673" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:59.673">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:56:59.673" starttime="20170928 16:56:58.874" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:59.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:56:59.674" starttime="20170928 16:56:59.673" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.674">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:56:59.674">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:56:59.674">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:56:59.675" starttime="20170928 16:56:59.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:59.675">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:56:59.675" starttime="20170928 16:56:58.873" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:56:59.675">${host_state} = Running</msg>
<status endtime="20170928 16:56:59.675" starttime="20170928 16:56:58.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:56:59.676" starttime="20170928 16:56:59.675" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:56:59.680">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:56:59.681" starttime="20170928 16:56:59.680" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:56:59.683" starttime="20170928 16:56:59.681" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.683">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:56:59.683" starttime="20170928 16:56:59.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:56:59.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:56:59.684" starttime="20170928 16:56:59.683" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:00.103">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:00.103" starttime="20170928 16:56:59.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:00.103">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:00.103">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:00.104" starttime="20170928 16:56:59.684" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:00.104">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:00.105" starttime="20170928 16:57:00.104" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:00.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:00.106" starttime="20170928 16:57:00.105" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.106" starttime="20170928 16:56:59.679" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.106" starttime="20170928 16:56:59.678" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.106" starttime="20170928 16:56:59.678" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:00.106">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:57:00.107" starttime="20170928 16:57:00.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:00.109">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:00.109" starttime="20170928 16:57:00.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:00.110">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:00.110" starttime="20170928 16:57:00.109" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.110" starttime="20170928 16:57:00.109" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.110" starttime="20170928 16:57:00.107" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.110" starttime="20170928 16:57:00.107" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:00.408">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:00.409">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:00.409" starttime="20170928 16:57:00.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:00.410">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:00.411" starttime="20170928 16:57:00.410" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:00.412">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:00.412" starttime="20170928 16:57:00.411" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.412" starttime="20170928 16:57:00.411" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.412" starttime="20170928 16:57:00.409" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:00.412" starttime="20170928 16:57:00.409" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:00.413">Delete All Sessions</msg>
<status endtime="20170928 16:57:00.413" starttime="20170928 16:57:00.412" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:00.413">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:00.413" starttime="20170928 16:56:59.677" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:00.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:00.414" starttime="20170928 16:57:00.413" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:00.414">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:00.414">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:00.414">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 16:57:00.414" starttime="20170928 16:57:00.414" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:00.415">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:00.415" starttime="20170928 16:56:59.677" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:00.415">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:00.415" starttime="20170928 16:56:59.676" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:00.415">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:57:00.415">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:00.416" starttime="20170928 16:57:00.415" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:00.416" starttime="20170928 16:56:59.676" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:00.416" starttime="20170928 16:56:58.156" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.421">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:10.421" starttime="20170928 16:57:10.420" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:10.422" starttime="20170928 16:57:10.421" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.422">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:10.422" starttime="20170928 16:57:10.422" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.423">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:10.423" starttime="20170928 16:57:10.423" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.602">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:10.602" starttime="20170928 16:57:10.424" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:10.602">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:10.603">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:10.603" starttime="20170928 16:57:10.423" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.603">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:10.603" starttime="20170928 16:57:10.603" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:10.604" starttime="20170928 16:57:10.604" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.604" starttime="20170928 16:57:10.420" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.604" starttime="20170928 16:57:10.419" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.604" starttime="20170928 16:57:10.419" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.605">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:57:10.605" starttime="20170928 16:57:10.604" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.607">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:10.607" starttime="20170928 16:57:10.606" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.608">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:10.608" starttime="20170928 16:57:10.608" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.609" starttime="20170928 16:57:10.607" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.609" starttime="20170928 16:57:10.606" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.609" starttime="20170928 16:57:10.605" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.671">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:10.671">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:10.671" starttime="20170928 16:57:10.609" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.673">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:10.673" starttime="20170928 16:57:10.672" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.674">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:10.674" starttime="20170928 16:57:10.674" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.674" starttime="20170928 16:57:10.673" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.674" starttime="20170928 16:57:10.672" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.674" starttime="20170928 16:57:10.671" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:10.675">Delete All Sessions</msg>
<status endtime="20170928 16:57:10.675" starttime="20170928 16:57:10.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:10.675">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:10.675" starttime="20170928 16:57:10.418" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:10.676" starttime="20170928 16:57:10.675" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.676">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:10.676">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:10.676">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:57:10.676" starttime="20170928 16:57:10.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:10.677">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:57:10.677" starttime="20170928 16:57:10.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:10.677">${power_state} = On</msg>
<status endtime="20170928 16:57:10.677" starttime="20170928 16:57:10.417" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:57:10.678" starttime="20170928 16:57:10.677" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.678" starttime="20170928 16:57:10.417" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.681">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:10.682" starttime="20170928 16:57:10.681" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.683">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:10.683" starttime="20170928 16:57:10.682" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.683">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:10.683" starttime="20170928 16:57:10.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:10.684" starttime="20170928 16:57:10.683" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.910">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:10.911" starttime="20170928 16:57:10.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:10.911">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:10.911">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:10.911" starttime="20170928 16:57:10.684" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.911">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:10.911" starttime="20170928 16:57:10.911" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:10.912" starttime="20170928 16:57:10.912" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.912" starttime="20170928 16:57:10.680" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.912" starttime="20170928 16:57:10.680" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.912" starttime="20170928 16:57:10.679" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.913">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:57:10.913" starttime="20170928 16:57:10.913" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:10.915">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:10.915" starttime="20170928 16:57:10.915" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:10.916">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:10.916" starttime="20170928 16:57:10.916" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.916" starttime="20170928 16:57:10.915" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.917" starttime="20170928 16:57:10.914" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:10.917" starttime="20170928 16:57:10.913" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.090">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:11.090">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:11.090" starttime="20170928 16:57:10.917" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.092">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:11.092" starttime="20170928 16:57:11.091" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.093">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:11.093" starttime="20170928 16:57:11.093" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.093" starttime="20170928 16:57:11.092" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.093" starttime="20170928 16:57:11.091" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.093" starttime="20170928 16:57:11.091" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:11.094">Delete All Sessions</msg>
<status endtime="20170928 16:57:11.094" starttime="20170928 16:57:11.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:11.094">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:11.094" starttime="20170928 16:57:10.679" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:11.095" starttime="20170928 16:57:11.094" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.095">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:11.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:11.095">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:57:11.095" starttime="20170928 16:57:11.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:11.096">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:57:11.096" starttime="20170928 16:57:10.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:11.096">${host_state} = Running</msg>
<status endtime="20170928 16:57:11.096" starttime="20170928 16:57:10.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:57:11.097" starttime="20170928 16:57:11.096" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.101">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:11.101" starttime="20170928 16:57:11.101" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:11.102" starttime="20170928 16:57:11.102" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.102">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:11.103" starttime="20170928 16:57:11.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:11.103" starttime="20170928 16:57:11.103" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.323">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:11.323" starttime="20170928 16:57:11.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:11.323">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:11.323">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:11.323" starttime="20170928 16:57:11.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.324">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:11.324" starttime="20170928 16:57:11.323" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.324">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:11.324" starttime="20170928 16:57:11.324" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.325" starttime="20170928 16:57:11.100" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.325" starttime="20170928 16:57:11.100" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.325" starttime="20170928 16:57:11.099" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.325">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:57:11.325" starttime="20170928 16:57:11.325" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.328">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:11.328" starttime="20170928 16:57:11.327" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.329">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:11.329" starttime="20170928 16:57:11.328" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.329" starttime="20170928 16:57:11.328" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.329" starttime="20170928 16:57:11.326" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.329" starttime="20170928 16:57:11.326" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.417">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:11.417">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:11.417" starttime="20170928 16:57:11.329" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.419">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:11.419" starttime="20170928 16:57:11.418" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.420">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:11.420" starttime="20170928 16:57:11.420" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.420" starttime="20170928 16:57:11.419" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.420" starttime="20170928 16:57:11.418" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:11.421" starttime="20170928 16:57:11.418" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:11.421">Delete All Sessions</msg>
<status endtime="20170928 16:57:11.421" starttime="20170928 16:57:11.421" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:11.421">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:11.421" starttime="20170928 16:57:11.098" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:11.422" starttime="20170928 16:57:11.421" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:11.422">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:11.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:11.423">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 16:57:11.423" starttime="20170928 16:57:11.422" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:11.423">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:11.423" starttime="20170928 16:57:11.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:11.423">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:11.423" starttime="20170928 16:57:11.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:11.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:57:11.424">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:11.424" starttime="20170928 16:57:11.423" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:11.424" starttime="20170928 16:57:11.097" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:11.424" starttime="20170928 16:57:10.416" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.429">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:21.430" starttime="20170928 16:57:21.429" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.430">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:21.430" starttime="20170928 16:57:21.430" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.431">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:21.431" starttime="20170928 16:57:21.431" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:21.432" starttime="20170928 16:57:21.431" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:21.768" starttime="20170928 16:57:21.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:21.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:21.768">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:21.769" starttime="20170928 16:57:21.432" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:21.769" starttime="20170928 16:57:21.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:21.770" starttime="20170928 16:57:21.770" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.770" starttime="20170928 16:57:21.428" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.771" starttime="20170928 16:57:21.428" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.771" starttime="20170928 16:57:21.427" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.772">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:57:21.772" starttime="20170928 16:57:21.771" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.775">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:21.775" starttime="20170928 16:57:21.774" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.776">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:21.776" starttime="20170928 16:57:21.776" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.776" starttime="20170928 16:57:21.775" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.777" starttime="20170928 16:57:21.773" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.777" starttime="20170928 16:57:21.772" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.861">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:21.861">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:21.861" starttime="20170928 16:57:21.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.863">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:21.863" starttime="20170928 16:57:21.862" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.863">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:21.864" starttime="20170928 16:57:21.863" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.864" starttime="20170928 16:57:21.863" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.864" starttime="20170928 16:57:21.862" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.864" starttime="20170928 16:57:21.861" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:21.864">Delete All Sessions</msg>
<status endtime="20170928 16:57:21.865" starttime="20170928 16:57:21.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:21.865">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:21.865" starttime="20170928 16:57:21.427" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.865">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:21.865" starttime="20170928 16:57:21.865" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.866">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:21.866">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:21.866">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:57:21.866" starttime="20170928 16:57:21.866" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:21.866">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:57:21.866" starttime="20170928 16:57:21.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:21.867">${power_state} = On</msg>
<status endtime="20170928 16:57:21.867" starttime="20170928 16:57:21.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:57:21.867" starttime="20170928 16:57:21.867" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:21.867" starttime="20170928 16:57:21.425" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:21.872">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:21.872" starttime="20170928 16:57:21.871" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.872">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:21.872" starttime="20170928 16:57:21.872" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.873">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:21.873" starttime="20170928 16:57:21.873" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:21.874">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:21.874" starttime="20170928 16:57:21.873" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:22.138" starttime="20170928 16:57:21.874" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.138">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:22.138">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:22.138" starttime="20170928 16:57:21.874" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:22.139" starttime="20170928 16:57:22.138" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:22.139" starttime="20170928 16:57:22.139" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.139" starttime="20170928 16:57:21.871" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.140" starttime="20170928 16:57:21.870" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.140" starttime="20170928 16:57:21.869" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.140">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:57:22.140" starttime="20170928 16:57:22.140" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.142">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:22.142" starttime="20170928 16:57:22.142" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.143">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:22.143" starttime="20170928 16:57:22.143" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.144" starttime="20170928 16:57:22.143" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.144" starttime="20170928 16:57:22.141" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.144" starttime="20170928 16:57:22.141" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.369">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:22.369">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:22.369" starttime="20170928 16:57:22.144" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.371">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:22.371" starttime="20170928 16:57:22.370" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.372">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:22.372" starttime="20170928 16:57:22.372" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.372" starttime="20170928 16:57:22.371" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.372" starttime="20170928 16:57:22.370" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.372" starttime="20170928 16:57:22.369" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:22.373">Delete All Sessions</msg>
<status endtime="20170928 16:57:22.373" starttime="20170928 16:57:22.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.373">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:22.373" starttime="20170928 16:57:21.869" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:22.374" starttime="20170928 16:57:22.373" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.374">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:22.374">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:22.375">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:57:22.375" starttime="20170928 16:57:22.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.375">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:57:22.375" starttime="20170928 16:57:21.868" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.375">${host_state} = Running</msg>
<status endtime="20170928 16:57:22.375" starttime="20170928 16:57:21.868" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:57:22.376" starttime="20170928 16:57:22.375" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.381">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:22.382" starttime="20170928 16:57:22.381" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:22.382" starttime="20170928 16:57:22.382" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.383">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:22.383" starttime="20170928 16:57:22.383" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.384">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:22.384" starttime="20170928 16:57:22.384" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.657">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:22.657" starttime="20170928 16:57:22.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.657">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:22.657">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:22.657" starttime="20170928 16:57:22.385" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.658">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:22.658" starttime="20170928 16:57:22.657" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:22.659" starttime="20170928 16:57:22.658" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.659" starttime="20170928 16:57:22.380" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.659" starttime="20170928 16:57:22.379" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.659" starttime="20170928 16:57:22.378" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.660">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:57:22.660" starttime="20170928 16:57:22.659" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.662">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:22.662" starttime="20170928 16:57:22.661" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.663">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:22.663" starttime="20170928 16:57:22.663" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.663" starttime="20170928 16:57:22.662" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.663" starttime="20170928 16:57:22.660" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.663" starttime="20170928 16:57:22.660" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.821">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:22.821">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:22.821" starttime="20170928 16:57:22.664" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.823">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:22.823" starttime="20170928 16:57:22.823" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.824">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:22.824" starttime="20170928 16:57:22.824" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.824" starttime="20170928 16:57:22.823" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.824" starttime="20170928 16:57:22.822" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:22.825" starttime="20170928 16:57:22.822" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:22.825">Delete All Sessions</msg>
<status endtime="20170928 16:57:22.825" starttime="20170928 16:57:22.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.825">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:22.825" starttime="20170928 16:57:22.377" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:22.826" starttime="20170928 16:57:22.826" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:22.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:22.827">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:22.827">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 16:57:22.827" starttime="20170928 16:57:22.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.827">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:22.827" starttime="20170928 16:57:22.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:22.827">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:22.827" starttime="20170928 16:57:22.376" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:22.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:57:22.828">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:57:22.828" starttime="20170928 16:57:22.828" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:22.828" starttime="20170928 16:57:22.376" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:22.828" starttime="20170928 16:57:21.425" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:32.834">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:32.834" starttime="20170928 16:57:32.834" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:32.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:32.835" starttime="20170928 16:57:32.835" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:32.836">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:32.836" starttime="20170928 16:57:32.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:32.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:32.836" starttime="20170928 16:57:32.836" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:33.161" starttime="20170928 16:57:32.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.161">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:33.161">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:33.161" starttime="20170928 16:57:32.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.161">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.162" starttime="20170928 16:57:33.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.162" starttime="20170928 16:57:33.162" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.162" starttime="20170928 16:57:32.833" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.162" starttime="20170928 16:57:32.832" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.163" starttime="20170928 16:57:32.832" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.163">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:57:33.163" starttime="20170928 16:57:33.163" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.166">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:33.166" starttime="20170928 16:57:33.165" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.167">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:33.167" starttime="20170928 16:57:33.167" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.167" starttime="20170928 16:57:33.166" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.167" starttime="20170928 16:57:33.164" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.167" starttime="20170928 16:57:33.163" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.279">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:33.279">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:33.279" starttime="20170928 16:57:33.168" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.281">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:33.281" starttime="20170928 16:57:33.281" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.283">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:33.283" starttime="20170928 16:57:33.282" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.283" starttime="20170928 16:57:33.281" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.283" starttime="20170928 16:57:33.280" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.283" starttime="20170928 16:57:33.280" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:33.283">Delete All Sessions</msg>
<status endtime="20170928 16:57:33.283" starttime="20170928 16:57:33.283" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.284">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:33.284" starttime="20170928 16:57:32.831" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.284" starttime="20170928 16:57:33.284" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.285">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:33.285">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:33.285">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:57:33.285" starttime="20170928 16:57:33.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.285">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:57:33.285" starttime="20170928 16:57:32.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.286">${power_state} = On</msg>
<status endtime="20170928 16:57:33.286" starttime="20170928 16:57:32.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:57:33.286" starttime="20170928 16:57:33.286" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.286" starttime="20170928 16:57:32.830" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.290">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:33.290" starttime="20170928 16:57:33.290" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:33.291" starttime="20170928 16:57:33.291" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.292">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:33.292" starttime="20170928 16:57:33.291" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:33.293" starttime="20170928 16:57:33.292" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.500">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:33.500" starttime="20170928 16:57:33.294" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:33.500">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:33.500" starttime="20170928 16:57:33.293" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.501" starttime="20170928 16:57:33.500" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.501">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.502" starttime="20170928 16:57:33.501" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.502" starttime="20170928 16:57:33.289" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.502" starttime="20170928 16:57:33.289" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.502" starttime="20170928 16:57:33.288" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.502">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:57:33.502" starttime="20170928 16:57:33.502" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.505">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:33.505" starttime="20170928 16:57:33.504" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.506">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:33.506" starttime="20170928 16:57:33.506" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.506" starttime="20170928 16:57:33.505" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.506" starttime="20170928 16:57:33.503" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.506" starttime="20170928 16:57:33.503" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.617">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:33.618">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:33.618" starttime="20170928 16:57:33.506" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.619">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:33.619" starttime="20170928 16:57:33.619" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.621">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:33.621" starttime="20170928 16:57:33.620" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.621" starttime="20170928 16:57:33.620" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.621" starttime="20170928 16:57:33.618" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.621" starttime="20170928 16:57:33.618" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:33.621">Delete All Sessions</msg>
<status endtime="20170928 16:57:33.622" starttime="20170928 16:57:33.621" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.622">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:33.622" starttime="20170928 16:57:33.287" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.622" starttime="20170928 16:57:33.622" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.623">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:33.623">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:33.623">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:57:33.623" starttime="20170928 16:57:33.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.623">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:57:33.623" starttime="20170928 16:57:33.287" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.624">${host_state} = Running</msg>
<status endtime="20170928 16:57:33.624" starttime="20170928 16:57:33.287" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:57:33.624" starttime="20170928 16:57:33.624" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.628">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:33.629" starttime="20170928 16:57:33.628" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:33.629" starttime="20170928 16:57:33.629" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.630">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:33.630" starttime="20170928 16:57:33.629" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.631">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:33.631" starttime="20170928 16:57:33.630" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.948">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:33.948" starttime="20170928 16:57:33.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:33.948">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:33.948">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:33.948" starttime="20170928 16:57:33.631" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.949">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.949" starttime="20170928 16:57:33.948" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.949">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:33.949" starttime="20170928 16:57:33.949" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.949" starttime="20170928 16:57:33.627" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.950" starttime="20170928 16:57:33.627" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.950" starttime="20170928 16:57:33.626" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.950">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:57:33.950" starttime="20170928 16:57:33.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:33.952">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:33.952" starttime="20170928 16:57:33.952" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:33.953">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:33.953" starttime="20170928 16:57:33.953" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.954" starttime="20170928 16:57:33.953" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.954" starttime="20170928 16:57:33.951" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:33.954" starttime="20170928 16:57:33.951" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.097">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:34.097">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:34.097" starttime="20170928 16:57:33.954" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.099">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:34.100" starttime="20170928 16:57:34.099" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.101">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:34.101" starttime="20170928 16:57:34.101" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.101" starttime="20170928 16:57:34.100" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.101" starttime="20170928 16:57:34.098" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.101" starttime="20170928 16:57:34.097" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:34.102">Delete All Sessions</msg>
<status endtime="20170928 16:57:34.102" starttime="20170928 16:57:34.102" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:34.102">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:34.102" starttime="20170928 16:57:33.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:34.103" starttime="20170928 16:57:34.102" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.103">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:34.103">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:34.103">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 16:57:34.103" starttime="20170928 16:57:34.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:34.104">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:57:34.104" starttime="20170928 16:57:33.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:34.104">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:57:34.104" starttime="20170928 16:57:33.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.105">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:34.105" starttime="20170928 16:57:34.104" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.109">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:34.109" starttime="20170928 16:57:34.108" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:34.110" starttime="20170928 16:57:34.109" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.110">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:34.110" starttime="20170928 16:57:34.110" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:34.111" starttime="20170928 16:57:34.111" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:34.460" starttime="20170928 16:57:34.112" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:34.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:34.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:34.460" starttime="20170928 16:57:34.111" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:34.461" starttime="20170928 16:57:34.461" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:34.462" starttime="20170928 16:57:34.461" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.462" starttime="20170928 16:57:34.107" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.462" starttime="20170928 16:57:34.107" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.462" starttime="20170928 16:57:34.106" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.462">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 16:57:34.463" starttime="20170928 16:57:34.462" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.465">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:34.465" starttime="20170928 16:57:34.464" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.465">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:34.466" starttime="20170928 16:57:34.465" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.466" starttime="20170928 16:57:34.465" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.466" starttime="20170928 16:57:34.463" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.466" starttime="20170928 16:57:34.463" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.563">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:34.563">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:34.564" starttime="20170928 16:57:34.466" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.565">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:34.565" starttime="20170928 16:57:34.565" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.567">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:34.567" starttime="20170928 16:57:34.566" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.567" starttime="20170928 16:57:34.566" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.567" starttime="20170928 16:57:34.564" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:34.567" starttime="20170928 16:57:34.564" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:34.567">Delete All Sessions</msg>
<status endtime="20170928 16:57:34.568" starttime="20170928 16:57:34.567" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:34.568">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:34.568" starttime="20170928 16:57:34.106" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:34.568" starttime="20170928 16:57:34.568" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:34.569">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:34.569">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:34.569">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 16:57:34.569" starttime="20170928 16:57:34.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:34.570">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:57:34.570" starttime="20170928 16:57:34.105" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:34.570">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:57:34.570" starttime="20170928 16:57:34.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:34.571">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:57:34.571">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:57:34.571" starttime="20170928 16:57:34.571" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:34.572" starttime="20170928 16:57:33.624" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:34.572" starttime="20170928 16:57:32.829" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:44.577">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:44.577" starttime="20170928 16:57:44.576" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:44.578">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:44.578" starttime="20170928 16:57:44.577" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:44.578">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:44.578" starttime="20170928 16:57:44.578" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:44.579">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:44.579" starttime="20170928 16:57:44.579" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:46.578">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:46.578" starttime="20170928 16:57:44.580" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:46.578">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:46.578">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:46.578" starttime="20170928 16:57:44.579" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:46.579">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:46.579" starttime="20170928 16:57:46.578" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:46.579">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:46.580" starttime="20170928 16:57:46.579" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:46.580" starttime="20170928 16:57:44.576" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:46.580" starttime="20170928 16:57:44.575" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:46.580" starttime="20170928 16:57:44.575" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:46.581">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:57:46.581" starttime="20170928 16:57:46.580" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:46.583">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:46.583" starttime="20170928 16:57:46.582" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:46.584">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:46.584" starttime="20170928 16:57:46.583" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:46.584" starttime="20170928 16:57:46.583" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:46.584" starttime="20170928 16:57:46.581" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:46.584" starttime="20170928 16:57:46.581" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:48.751">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:48.751">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:48.751" starttime="20170928 16:57:46.584" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:48.753">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:48.753" starttime="20170928 16:57:48.753" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:48.754">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:48.754" starttime="20170928 16:57:48.754" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:48.754" starttime="20170928 16:57:48.753" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:48.755" starttime="20170928 16:57:48.752" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:48.755" starttime="20170928 16:57:48.752" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:48.755">Delete All Sessions</msg>
<status endtime="20170928 16:57:48.755" starttime="20170928 16:57:48.755" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:48.755">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:48.755" starttime="20170928 16:57:44.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:48.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:48.756" starttime="20170928 16:57:48.756" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:48.756">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:48.757">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:48.757">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:57:48.757" starttime="20170928 16:57:48.756" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:48.757">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:57:48.757" starttime="20170928 16:57:44.574" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:48.757">${power_state} = On</msg>
<status endtime="20170928 16:57:48.757" starttime="20170928 16:57:44.573" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:57:48.758" starttime="20170928 16:57:48.758" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:48.758" starttime="20170928 16:57:44.573" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:48.762">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:48.762" starttime="20170928 16:57:48.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:48.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:48.763" starttime="20170928 16:57:48.763" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:48.764">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:48.764" starttime="20170928 16:57:48.763" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:48.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:48.764" starttime="20170928 16:57:48.764" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:49.300">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:49.300" starttime="20170928 16:57:48.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:49.300">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:49.300">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:49.300" starttime="20170928 16:57:48.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:49.301">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:49.301" starttime="20170928 16:57:49.300" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:49.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:49.301" starttime="20170928 16:57:49.301" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:49.302" starttime="20170928 16:57:48.761" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:49.302" starttime="20170928 16:57:48.760" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:49.302" starttime="20170928 16:57:48.760" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:49.302">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:57:49.302" starttime="20170928 16:57:49.302" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:49.304">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:49.305" starttime="20170928 16:57:49.304" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:49.305">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:49.306" starttime="20170928 16:57:49.305" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:49.306" starttime="20170928 16:57:49.305" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:49.306" starttime="20170928 16:57:49.303" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:49.306" starttime="20170928 16:57:49.303" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:51.945">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:51.945">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:51.945" starttime="20170928 16:57:49.306" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:51.947">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:51.947" starttime="20170928 16:57:51.947" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:51.948">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:51.948" starttime="20170928 16:57:51.948" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:51.949" starttime="20170928 16:57:51.947" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:51.949" starttime="20170928 16:57:51.946" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:51.949" starttime="20170928 16:57:51.946" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:51.949">Delete All Sessions</msg>
<status endtime="20170928 16:57:51.949" starttime="20170928 16:57:51.949" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:51.950">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:51.950" starttime="20170928 16:57:48.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:51.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:51.950" starttime="20170928 16:57:51.950" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:51.951">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:51.951">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:51.951">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:57:51.951" starttime="20170928 16:57:51.951" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:51.951">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:57:51.951" starttime="20170928 16:57:48.759" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:51.952">${host_state} = Running</msg>
<status endtime="20170928 16:57:51.952" starttime="20170928 16:57:48.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:57:51.952" starttime="20170928 16:57:51.952" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:51.956">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:51.957" starttime="20170928 16:57:51.956" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:51.957">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:51.957" starttime="20170928 16:57:51.957" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:51.958">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:51.958" starttime="20170928 16:57:51.958" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:51.959">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:51.959" starttime="20170928 16:57:51.958" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:52.591">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:52.592" starttime="20170928 16:57:51.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:52.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:52.592">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:52.592" starttime="20170928 16:57:51.959" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:52.592">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:52.593" starttime="20170928 16:57:52.592" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:52.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:52.593" starttime="20170928 16:57:52.593" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:52.593" starttime="20170928 16:57:51.956" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:52.593" starttime="20170928 16:57:51.955" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:52.594" starttime="20170928 16:57:51.955" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:52.594">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:57:52.594" starttime="20170928 16:57:52.594" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:52.597">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:52.597" starttime="20170928 16:57:52.596" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:52.598">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:57:52.598" starttime="20170928 16:57:52.598" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:52.598" starttime="20170928 16:57:52.597" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:52.598" starttime="20170928 16:57:52.595" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:52.598" starttime="20170928 16:57:52.594" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:53.142">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:53.142">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:53.142" starttime="20170928 16:57:52.599" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:53.144">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:53.144" starttime="20170928 16:57:53.144" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:53.145">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:53.145" starttime="20170928 16:57:53.145" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:53.145" starttime="20170928 16:57:53.144" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:53.145" starttime="20170928 16:57:53.143" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:53.146" starttime="20170928 16:57:53.143" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:53.146">Delete All Sessions</msg>
<status endtime="20170928 16:57:53.146" starttime="20170928 16:57:53.146" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:53.146">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:53.146" starttime="20170928 16:57:51.954" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:53.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:53.147" starttime="20170928 16:57:53.146" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:53.147">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:53.148">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:53.148">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 16:57:53.148" starttime="20170928 16:57:53.147" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:53.148">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:57:53.148" starttime="20170928 16:57:51.953" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:53.148">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:57:53.148" starttime="20170928 16:57:51.953" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:53.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:53.149" starttime="20170928 16:57:53.149" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:53.153">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:57:53.153" starttime="20170928 16:57:53.152" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:53.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:57:53.154" starttime="20170928 16:57:53.153" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:53.154">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:57:53.154" starttime="20170928 16:57:53.154" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:53.155">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:57:53.155" starttime="20170928 16:57:53.154" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:54.001">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:57:54.001" starttime="20170928 16:57:53.155" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:54.001">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:57:54.001">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:54.001" starttime="20170928 16:57:53.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:54.002">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:54.002" starttime="20170928 16:57:54.002" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:54.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:54.003" starttime="20170928 16:57:54.002" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.003" starttime="20170928 16:57:53.152" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.003" starttime="20170928 16:57:53.151" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.003" starttime="20170928 16:57:53.151" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:54.004">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 16:57:54.004" starttime="20170928 16:57:54.003" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:54.006">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:54.006" starttime="20170928 16:57:54.005" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:54.007">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:57:54.007" starttime="20170928 16:57:54.007" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.007" starttime="20170928 16:57:54.006" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.007" starttime="20170928 16:57:54.004" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.007" starttime="20170928 16:57:54.004" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:54.306">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:57:54.307">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:54.307" starttime="20170928 16:57:54.007" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:54.308">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:54.308" starttime="20170928 16:57:54.308" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:54.309">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:57:54.309" starttime="20170928 16:57:54.309" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.310" starttime="20170928 16:57:54.309" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.310" starttime="20170928 16:57:54.307" status="PASS"></status>
</kw>
<status endtime="20170928 16:57:54.310" starttime="20170928 16:57:54.307" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:57:54.310">Delete All Sessions</msg>
<status endtime="20170928 16:57:54.310" starttime="20170928 16:57:54.310" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:54.310">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:57:54.310" starttime="20170928 16:57:53.150" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:54.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:57:54.311" starttime="20170928 16:57:54.311" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:57:54.312">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:57:54.312">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:57:54.312">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 16:57:54.312" starttime="20170928 16:57:54.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:54.312">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:57:54.312" starttime="20170928 16:57:53.149" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:57:54.312">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:57:54.312" starttime="20170928 16:57:53.149" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:57:54.313">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:57:54.313">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:57:54.313" starttime="20170928 16:57:54.313" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:54.313" starttime="20170928 16:57:51.952" status="FAIL"></status>
</kw>
<status endtime="20170928 16:57:54.313" starttime="20170928 16:57:44.572" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.324">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:04.324" starttime="20170928 16:58:04.323" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:04.325" starttime="20170928 16:58:04.325" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.326">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:04.326" starttime="20170928 16:58:04.325" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:04.326" starttime="20170928 16:58:04.326" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.780">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:04.781" starttime="20170928 16:58:04.327" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:04.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:04.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:04.781" starttime="20170928 16:58:04.327" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.781">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:04.782" starttime="20170928 16:58:04.781" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:04.782" starttime="20170928 16:58:04.782" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.782" starttime="20170928 16:58:04.319" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.782" starttime="20170928 16:58:04.318" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.783" starttime="20170928 16:58:04.318" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.783">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:58:04.783" starttime="20170928 16:58:04.783" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.785">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:04.785" starttime="20170928 16:58:04.785" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.786">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:04.786" starttime="20170928 16:58:04.786" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.786" starttime="20170928 16:58:04.785" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.787" starttime="20170928 16:58:04.784" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.787" starttime="20170928 16:58:04.784" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.848">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:04.849">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:04.849" starttime="20170928 16:58:04.787" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.851">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:04.851" starttime="20170928 16:58:04.850" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.852">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:04.852" starttime="20170928 16:58:04.851" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.852" starttime="20170928 16:58:04.851" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.852" starttime="20170928 16:58:04.849" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.852" starttime="20170928 16:58:04.849" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:04.853">Delete All Sessions</msg>
<status endtime="20170928 16:58:04.853" starttime="20170928 16:58:04.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:04.853">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:04.853" starttime="20170928 16:58:04.317" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:04.854" starttime="20170928 16:58:04.853" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.854">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:04.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:04.854">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:58:04.854" starttime="20170928 16:58:04.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:04.855">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:58:04.855" starttime="20170928 16:58:04.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:04.855">${power_state} = On</msg>
<status endtime="20170928 16:58:04.855" starttime="20170928 16:58:04.315" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:58:04.856" starttime="20170928 16:58:04.855" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:04.856" starttime="20170928 16:58:04.315" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:04.859">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:04.860" starttime="20170928 16:58:04.859" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:04.860" starttime="20170928 16:58:04.860" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.861">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:04.861" starttime="20170928 16:58:04.860" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:04.861">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:04.861" starttime="20170928 16:58:04.861" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.212">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:05.212" starttime="20170928 16:58:04.862" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:05.212">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:05.213">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:05.213" starttime="20170928 16:58:04.862" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.213">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:05.213" starttime="20170928 16:58:05.213" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:05.214" starttime="20170928 16:58:05.214" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.214" starttime="20170928 16:58:04.858" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.214" starttime="20170928 16:58:04.858" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.214" starttime="20170928 16:58:04.857" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.215">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:58:05.215" starttime="20170928 16:58:05.215" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.217">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:05.217" starttime="20170928 16:58:05.216" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.218">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:05.218" starttime="20170928 16:58:05.218" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.219" starttime="20170928 16:58:05.218" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.219" starttime="20170928 16:58:05.216" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.219" starttime="20170928 16:58:05.215" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.305">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:05.305">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:05.305" starttime="20170928 16:58:05.219" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.306">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:05.307" starttime="20170928 16:58:05.306" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.307">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:05.307" starttime="20170928 16:58:05.307" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.308" starttime="20170928 16:58:05.307" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.308" starttime="20170928 16:58:05.305" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.308" starttime="20170928 16:58:05.305" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:05.308">Delete All Sessions</msg>
<status endtime="20170928 16:58:05.308" starttime="20170928 16:58:05.308" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:05.308">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:05.309" starttime="20170928 16:58:04.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:05.309" starttime="20170928 16:58:05.309" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.310">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:05.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:05.310">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:58:05.310" starttime="20170928 16:58:05.309" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:05.310">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:58:05.310" starttime="20170928 16:58:04.856" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:05.311">${host_state} = Running</msg>
<status endtime="20170928 16:58:05.311" starttime="20170928 16:58:04.856" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:58:05.311" starttime="20170928 16:58:05.311" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.315">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:05.316" starttime="20170928 16:58:05.315" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.316">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:05.316" starttime="20170928 16:58:05.316" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.317">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:05.317" starttime="20170928 16:58:05.316" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:05.318" starttime="20170928 16:58:05.317" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:05.775" starttime="20170928 16:58:05.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:05.775">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:05.775">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:05.775" starttime="20170928 16:58:05.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.775">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:05.776" starttime="20170928 16:58:05.775" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:05.776" starttime="20170928 16:58:05.776" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.776" starttime="20170928 16:58:05.314" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.776" starttime="20170928 16:58:05.314" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.777" starttime="20170928 16:58:05.313" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.777">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:58:05.777" starttime="20170928 16:58:05.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:05.779">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:05.779" starttime="20170928 16:58:05.779" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:05.780">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:05.780" starttime="20170928 16:58:05.780" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.780" starttime="20170928 16:58:05.779" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.781" starttime="20170928 16:58:05.778" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:05.781" starttime="20170928 16:58:05.777" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:06.456">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:06.456">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:06.456" starttime="20170928 16:58:05.781" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:06.458">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:06.458" starttime="20170928 16:58:06.457" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:06.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:06.459" starttime="20170928 16:58:06.459" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:06.459" starttime="20170928 16:58:06.458" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:06.459" starttime="20170928 16:58:06.457" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:06.459" starttime="20170928 16:58:06.456" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:06.460">Delete All Sessions</msg>
<status endtime="20170928 16:58:06.460" starttime="20170928 16:58:06.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:06.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:06.460" starttime="20170928 16:58:05.313" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:06.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:06.461" starttime="20170928 16:58:06.460" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:06.461">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:06.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:06.461">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 16:58:06.461" starttime="20170928 16:58:06.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:06.462">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:58:06.462" starttime="20170928 16:58:05.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:06.462">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:58:06.462" starttime="20170928 16:58:05.312" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:06.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:58:06.463">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 16:58:06.463" starttime="20170928 16:58:06.462" status="FAIL"></status>
</kw>
<status endtime="20170928 16:58:06.463" starttime="20170928 16:58:05.311" status="FAIL"></status>
</kw>
<status endtime="20170928 16:58:06.463" starttime="20170928 16:58:04.314" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.471">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:16.472" starttime="20170928 16:58:16.470" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.472">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:16.472" starttime="20170928 16:58:16.472" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.473">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:16.473" starttime="20170928 16:58:16.473" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.474">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:16.474" starttime="20170928 16:58:16.474" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.662">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:16.662" starttime="20170928 16:58:16.475" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:16.662">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:16.662">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:16.662" starttime="20170928 16:58:16.475" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.663">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:16.663" starttime="20170928 16:58:16.663" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:16.664" starttime="20170928 16:58:16.664" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.664" starttime="20170928 16:58:16.470" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.664" starttime="20170928 16:58:16.468" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.665" starttime="20170928 16:58:16.467" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.665">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:58:16.665" starttime="20170928 16:58:16.665" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.667">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:16.667" starttime="20170928 16:58:16.667" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.668">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:16.668" starttime="20170928 16:58:16.668" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.668" starttime="20170928 16:58:16.667" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.669" starttime="20170928 16:58:16.666" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.669" starttime="20170928 16:58:16.665" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.732">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:16.732">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:16.732" starttime="20170928 16:58:16.669" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.735">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:16.735" starttime="20170928 16:58:16.734" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.736">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:16.736" starttime="20170928 16:58:16.735" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.736" starttime="20170928 16:58:16.735" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.736" starttime="20170928 16:58:16.733" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.736" starttime="20170928 16:58:16.733" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:16.736">Delete All Sessions</msg>
<status endtime="20170928 16:58:16.737" starttime="20170928 16:58:16.736" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:16.737">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:16.737" starttime="20170928 16:58:16.466" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:16.737" starttime="20170928 16:58:16.737" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.738">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:16.738">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:16.738">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:58:16.738" starttime="20170928 16:58:16.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:16.738">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:58:16.738" starttime="20170928 16:58:16.466" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:16.739">${power_state} = On</msg>
<status endtime="20170928 16:58:16.739" starttime="20170928 16:58:16.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:58:16.739" starttime="20170928 16:58:16.739" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:16.740" starttime="20170928 16:58:16.465" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:16.744">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:16.745" starttime="20170928 16:58:16.744" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:16.746" starttime="20170928 16:58:16.745" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.746">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:16.747" starttime="20170928 16:58:16.746" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:16.747">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:16.748" starttime="20170928 16:58:16.747" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.057">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:17.057" starttime="20170928 16:58:16.749" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.057">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:17.057">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.057" starttime="20170928 16:58:16.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.058">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.058" starttime="20170928 16:58:17.057" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.059" starttime="20170928 16:58:17.058" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.059" starttime="20170928 16:58:16.743" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.059" starttime="20170928 16:58:16.742" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.059" starttime="20170928 16:58:16.741" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.060">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:58:17.060" starttime="20170928 16:58:17.059" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.062">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:17.062" starttime="20170928 16:58:17.061" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.063">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:17.063" starttime="20170928 16:58:17.063" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.063" starttime="20170928 16:58:17.062" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.064" starttime="20170928 16:58:17.060" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.064" starttime="20170928 16:58:17.060" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.153">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:17.154">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.154" starttime="20170928 16:58:17.064" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.156">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:17.156" starttime="20170928 16:58:17.155" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.157">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:17.157" starttime="20170928 16:58:17.156" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.157" starttime="20170928 16:58:17.156" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.157" starttime="20170928 16:58:17.155" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.157" starttime="20170928 16:58:17.154" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:17.157">Delete All Sessions</msg>
<status endtime="20170928 16:58:17.158" starttime="20170928 16:58:17.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.158" starttime="20170928 16:58:16.741" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.158" starttime="20170928 16:58:17.158" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.159">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:17.159">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:17.159">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:58:17.159" starttime="20170928 16:58:17.159" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.159">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:58:17.160" starttime="20170928 16:58:16.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.160">${host_state} = Running</msg>
<status endtime="20170928 16:58:17.160" starttime="20170928 16:58:16.740" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:58:17.160" starttime="20170928 16:58:17.160" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.164">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:17.165" starttime="20170928 16:58:17.164" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.165">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:17.165" starttime="20170928 16:58:17.165" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.166">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:17.166" starttime="20170928 16:58:17.166" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:17.167" starttime="20170928 16:58:17.166" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.347">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:17.347" starttime="20170928 16:58:17.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.347">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:17.347">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.347" starttime="20170928 16:58:17.167" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.348">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.348" starttime="20170928 16:58:17.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.349" starttime="20170928 16:58:17.348" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.349" starttime="20170928 16:58:17.164" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.349" starttime="20170928 16:58:17.163" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.349" starttime="20170928 16:58:17.163" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.350">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:58:17.350" starttime="20170928 16:58:17.349" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.353">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:17.353" starttime="20170928 16:58:17.352" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.354">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:17.354" starttime="20170928 16:58:17.354" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.354" starttime="20170928 16:58:17.353" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.355" starttime="20170928 16:58:17.351" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.355" starttime="20170928 16:58:17.350" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.445">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:17.446">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.446" starttime="20170928 16:58:17.355" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.448">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:17.448" starttime="20170928 16:58:17.447" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.449">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:17.449" starttime="20170928 16:58:17.448" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.449" starttime="20170928 16:58:17.448" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.449" starttime="20170928 16:58:17.447" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.449" starttime="20170928 16:58:17.446" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:17.449">Delete All Sessions</msg>
<status endtime="20170928 16:58:17.449" starttime="20170928 16:58:17.449" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.450">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.450" starttime="20170928 16:58:17.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.450" starttime="20170928 16:58:17.450" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.451">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:17.451">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:17.451">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 16:58:17.451" starttime="20170928 16:58:17.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.452">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:58:17.452" starttime="20170928 16:58:17.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.452">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:58:17.452" starttime="20170928 16:58:17.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.452" starttime="20170928 16:58:17.452" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.457">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:17.458" starttime="20170928 16:58:17.457" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:17.459" starttime="20170928 16:58:17.458" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.460">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:17.460" starttime="20170928 16:58:17.459" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.461">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:17.461" starttime="20170928 16:58:17.460" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.755">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:17.755" starttime="20170928 16:58:17.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:17.755">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.755" starttime="20170928 16:58:17.461" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.756">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.756" starttime="20170928 16:58:17.756" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.757">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.757" starttime="20170928 16:58:17.756" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.757" starttime="20170928 16:58:17.456" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.757" starttime="20170928 16:58:17.455" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.757" starttime="20170928 16:58:17.454" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.758">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 16:58:17.758" starttime="20170928 16:58:17.757" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.760">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:17.760" starttime="20170928 16:58:17.759" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.761">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:17.761" starttime="20170928 16:58:17.761" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.761" starttime="20170928 16:58:17.760" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.761" starttime="20170928 16:58:17.758" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.761" starttime="20170928 16:58:17.758" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.856">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:17.857">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.857" starttime="20170928 16:58:17.762" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.859">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:17.859" starttime="20170928 16:58:17.858" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.860">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:17.860" starttime="20170928 16:58:17.860" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.860" starttime="20170928 16:58:17.859" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.861" starttime="20170928 16:58:17.858" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:17.861" starttime="20170928 16:58:17.857" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:17.861">Delete All Sessions</msg>
<status endtime="20170928 16:58:17.861" starttime="20170928 16:58:17.861" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.861">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:17.861" starttime="20170928 16:58:17.454" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:17.862" starttime="20170928 16:58:17.862" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:17.863">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:17.863">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:17.863">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 16:58:17.863" starttime="20170928 16:58:17.862" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.863">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:58:17.863" starttime="20170928 16:58:17.453" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:17.863">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:58:17.863" starttime="20170928 16:58:17.453" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:17.864">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:58:17.865">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:58:17.865" starttime="20170928 16:58:17.864" status="FAIL"></status>
</kw>
<status endtime="20170928 16:58:17.865" starttime="20170928 16:58:17.161" status="FAIL"></status>
</kw>
<status endtime="20170928 16:58:17.865" starttime="20170928 16:58:16.464" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:27.870">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:27.871" starttime="20170928 16:58:27.870" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:27.872">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:27.872" starttime="20170928 16:58:27.871" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:27.872">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:27.872" starttime="20170928 16:58:27.872" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:27.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:27.873" starttime="20170928 16:58:27.873" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.055">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:28.055" starttime="20170928 16:58:27.874" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:28.055">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:28.055" starttime="20170928 16:58:27.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.056">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:28.056" starttime="20170928 16:58:28.056" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:28.057" starttime="20170928 16:58:28.057" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.057" starttime="20170928 16:58:27.870" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.057" starttime="20170928 16:58:27.869" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.057" starttime="20170928 16:58:27.868" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.058">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:58:28.058" starttime="20170928 16:58:28.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.060">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:28.060" starttime="20170928 16:58:28.059" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.061">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:28.061" starttime="20170928 16:58:28.061" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.061" starttime="20170928 16:58:28.060" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.061" starttime="20170928 16:58:28.059" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.061" starttime="20170928 16:58:28.058" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.243">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:28.243">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:28.243" starttime="20170928 16:58:28.062" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.245">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:28.245" starttime="20170928 16:58:28.245" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.246">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:28.246" starttime="20170928 16:58:28.246" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.246" starttime="20170928 16:58:28.245" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.247" starttime="20170928 16:58:28.244" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.247" starttime="20170928 16:58:28.244" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:28.247">Delete All Sessions</msg>
<status endtime="20170928 16:58:28.247" starttime="20170928 16:58:28.247" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.247">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:28.247" starttime="20170928 16:58:27.868" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.248">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:28.248" starttime="20170928 16:58:28.248" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.249">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:28.249">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:28.249">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:58:28.249" starttime="20170928 16:58:28.248" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.249">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:58:28.249" starttime="20170928 16:58:27.867" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.249">${power_state} = On</msg>
<status endtime="20170928 16:58:28.249" starttime="20170928 16:58:27.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:58:28.250" starttime="20170928 16:58:28.250" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.250" starttime="20170928 16:58:27.866" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.254">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:28.255" starttime="20170928 16:58:28.253" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:28.256" starttime="20170928 16:58:28.255" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.256">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:28.256" starttime="20170928 16:58:28.256" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:28.257" starttime="20170928 16:58:28.256" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.590">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:28.590" starttime="20170928 16:58:28.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.590">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:28.590">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:28.590" starttime="20170928 16:58:28.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.591">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:28.591" starttime="20170928 16:58:28.590" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:28.592" starttime="20170928 16:58:28.591" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.592" starttime="20170928 16:58:28.253" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.592" starttime="20170928 16:58:28.252" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.592" starttime="20170928 16:58:28.252" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.593">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:58:28.593" starttime="20170928 16:58:28.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.596">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:28.596" starttime="20170928 16:58:28.595" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.597">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:28.597" starttime="20170928 16:58:28.597" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.597" starttime="20170928 16:58:28.596" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.597" starttime="20170928 16:58:28.594" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.598" starttime="20170928 16:58:28.593" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.790">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:28.790">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:28.790" starttime="20170928 16:58:28.598" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.792">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:28.792" starttime="20170928 16:58:28.792" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.793">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:28.793" starttime="20170928 16:58:28.793" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.794" starttime="20170928 16:58:28.793" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.794" starttime="20170928 16:58:28.791" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:28.794" starttime="20170928 16:58:28.791" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:28.794">Delete All Sessions</msg>
<status endtime="20170928 16:58:28.794" starttime="20170928 16:58:28.794" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.794">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:28.794" starttime="20170928 16:58:28.251" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:28.795" starttime="20170928 16:58:28.795" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.796">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:28.796">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:28.796">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:58:28.796" starttime="20170928 16:58:28.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.796">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:58:28.796" starttime="20170928 16:58:28.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:28.797">${host_state} = Running</msg>
<status endtime="20170928 16:58:28.797" starttime="20170928 16:58:28.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:58:28.797" starttime="20170928 16:58:28.797" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:28.806">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:28.806" starttime="20170928 16:58:28.806" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.807">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:28.807" starttime="20170928 16:58:28.807" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.808">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:28.808" starttime="20170928 16:58:28.807" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:28.808">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:28.808" starttime="20170928 16:58:28.808" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.003">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:29.003" starttime="20170928 16:58:28.809" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.003">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:29.003">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:29.003" starttime="20170928 16:58:28.809" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.004">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:29.004" starttime="20170928 16:58:29.003" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:29.005" starttime="20170928 16:58:29.004" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.005" starttime="20170928 16:58:28.805" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.005" starttime="20170928 16:58:28.804" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.005" starttime="20170928 16:58:28.803" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.006">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:58:29.006" starttime="20170928 16:58:29.005" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.009">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:29.009" starttime="20170928 16:58:29.008" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.011">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:29.011" starttime="20170928 16:58:29.010" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.011" starttime="20170928 16:58:29.009" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.011" starttime="20170928 16:58:29.007" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.011" starttime="20170928 16:58:29.006" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.174">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:29.174">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:29.175" starttime="20170928 16:58:29.012" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.177">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:29.177" starttime="20170928 16:58:29.176" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.178">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:29.178" starttime="20170928 16:58:29.178" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.178" starttime="20170928 16:58:29.177" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.178" starttime="20170928 16:58:29.175" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.178" starttime="20170928 16:58:29.175" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:29.179">Delete All Sessions</msg>
<status endtime="20170928 16:58:29.179" starttime="20170928 16:58:29.178" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.179">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:29.179" starttime="20170928 16:58:28.802" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:29.180" starttime="20170928 16:58:29.179" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.180">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:29.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:29.180">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 16:58:29.181" starttime="20170928 16:58:29.180" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.181">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:58:29.181" starttime="20170928 16:58:28.798" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.181">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:58:29.181" starttime="20170928 16:58:28.798" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.182">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:29.182" starttime="20170928 16:58:29.182" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.188">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:29.188" starttime="20170928 16:58:29.187" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:29.189" starttime="20170928 16:58:29.189" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.190">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:29.190" starttime="20170928 16:58:29.190" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.191">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:29.191" starttime="20170928 16:58:29.191" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:29.398" starttime="20170928 16:58:29.192" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.399">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:29.399">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:29.399" starttime="20170928 16:58:29.192" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:29.400" starttime="20170928 16:58:29.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:29.400" starttime="20170928 16:58:29.400" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.401" starttime="20170928 16:58:29.186" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.401" starttime="20170928 16:58:29.186" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.401" starttime="20170928 16:58:29.185" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.401">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 16:58:29.401" starttime="20170928 16:58:29.401" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.403">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:29.404" starttime="20170928 16:58:29.403" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.404">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:29.405" starttime="20170928 16:58:29.404" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.405" starttime="20170928 16:58:29.404" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.405" starttime="20170928 16:58:29.402" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.405" starttime="20170928 16:58:29.402" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.497">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:29.497">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:29.497" starttime="20170928 16:58:29.405" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.499">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:29.499" starttime="20170928 16:58:29.498" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.500">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:29.500" starttime="20170928 16:58:29.500" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.500" starttime="20170928 16:58:29.499" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.500" starttime="20170928 16:58:29.498" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:29.500" starttime="20170928 16:58:29.497" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:29.501">Delete All Sessions</msg>
<status endtime="20170928 16:58:29.501" starttime="20170928 16:58:29.501" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.501">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:29.501" starttime="20170928 16:58:29.184" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:29.502" starttime="20170928 16:58:29.501" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:29.502">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:29.502">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:29.502">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 16:58:29.503" starttime="20170928 16:58:29.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.503">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:58:29.503" starttime="20170928 16:58:29.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:29.503">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:58:29.503" starttime="20170928 16:58:29.182" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:29.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 16:58:29.504">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 16:58:29.504" starttime="20170928 16:58:29.503" status="FAIL"></status>
</kw>
<status endtime="20170928 16:58:29.504" starttime="20170928 16:58:28.797" status="FAIL"></status>
</kw>
<status endtime="20170928 16:58:29.504" starttime="20170928 16:58:27.866" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:39.512">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:39.513" starttime="20170928 16:58:39.512" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:39.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:39.514" starttime="20170928 16:58:39.513" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:39.515">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:39.515" starttime="20170928 16:58:39.514" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:39.516">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:39.516" starttime="20170928 16:58:39.515" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:40.573">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:40.573" starttime="20170928 16:58:39.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:40.573">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:40.573">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:40.573" starttime="20170928 16:58:39.516" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:40.574">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:40.574" starttime="20170928 16:58:40.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:40.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:40.575" starttime="20170928 16:58:40.574" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:40.575" starttime="20170928 16:58:39.510" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:40.575" starttime="20170928 16:58:39.510" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:40.575" starttime="20170928 16:58:39.509" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:40.576">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:58:40.576" starttime="20170928 16:58:40.575" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:40.578">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:40.578" starttime="20170928 16:58:40.577" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:40.579">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:40.579" starttime="20170928 16:58:40.579" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:40.579" starttime="20170928 16:58:40.578" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:40.579" starttime="20170928 16:58:40.577" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:40.579" starttime="20170928 16:58:40.576" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:41.623">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:41.623">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:41.623" starttime="20170928 16:58:40.580" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:41.625">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:41.625" starttime="20170928 16:58:41.624" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:41.626">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:41.626" starttime="20170928 16:58:41.626" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:41.626" starttime="20170928 16:58:41.625" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:41.626" starttime="20170928 16:58:41.624" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:41.627" starttime="20170928 16:58:41.623" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:41.627">Delete All Sessions</msg>
<status endtime="20170928 16:58:41.627" starttime="20170928 16:58:41.627" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:41.627">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:41.627" starttime="20170928 16:58:39.508" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:41.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:41.628" starttime="20170928 16:58:41.628" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:41.629">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:41.629">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:41.629">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:58:41.629" starttime="20170928 16:58:41.629" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:41.630">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:58:41.630" starttime="20170928 16:58:39.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:41.630">${power_state} = On</msg>
<status endtime="20170928 16:58:41.630" starttime="20170928 16:58:39.506" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:58:41.631" starttime="20170928 16:58:41.631" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:41.631" starttime="20170928 16:58:39.505" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:41.637">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:41.637" starttime="20170928 16:58:41.636" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:41.638">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:41.638" starttime="20170928 16:58:41.638" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:41.639">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:41.639" starttime="20170928 16:58:41.639" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:41.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:41.640" starttime="20170928 16:58:41.640" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:42.988">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:42.988" starttime="20170928 16:58:41.641" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:42.988">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:42.988">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:42.988" starttime="20170928 16:58:41.641" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:42.989">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:42.989" starttime="20170928 16:58:42.988" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:42.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:42.989" starttime="20170928 16:58:42.989" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:42.990" starttime="20170928 16:58:41.636" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:42.990" starttime="20170928 16:58:41.635" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:42.990" starttime="20170928 16:58:41.634" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:42.990">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:58:42.990" starttime="20170928 16:58:42.990" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:42.993">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:42.993" starttime="20170928 16:58:42.992" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:42.994">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:42.994" starttime="20170928 16:58:42.994" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:42.994" starttime="20170928 16:58:42.993" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:42.994" starttime="20170928 16:58:42.991" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:42.994" starttime="20170928 16:58:42.991" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:46.634">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:46.634">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:46.635" starttime="20170928 16:58:42.994" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:46.637">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:46.637" starttime="20170928 16:58:46.636" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:46.638">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:46.638" starttime="20170928 16:58:46.637" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:46.638" starttime="20170928 16:58:46.637" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:46.638" starttime="20170928 16:58:46.635" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:46.638" starttime="20170928 16:58:46.635" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:46.638">Delete All Sessions</msg>
<status endtime="20170928 16:58:46.638" starttime="20170928 16:58:46.638" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:46.639">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:46.639" starttime="20170928 16:58:41.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:46.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:46.639" starttime="20170928 16:58:46.639" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:46.640">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:46.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:46.640">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 16:58:46.640" starttime="20170928 16:58:46.640" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:46.640">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 16:58:46.641" starttime="20170928 16:58:41.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:46.641">${host_state} = Running</msg>
<status endtime="20170928 16:58:46.641" starttime="20170928 16:58:41.632" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:58:46.641" starttime="20170928 16:58:46.641" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:46.645">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:46.646" starttime="20170928 16:58:46.645" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:46.646">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:46.646" starttime="20170928 16:58:46.646" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:46.647">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:46.647" starttime="20170928 16:58:46.647" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:46.648">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:46.648" starttime="20170928 16:58:46.647" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:48.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:48.063" starttime="20170928 16:58:46.649" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:48.063">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:48.063">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:48.063" starttime="20170928 16:58:46.648" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:48.064">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:48.064" starttime="20170928 16:58:48.064" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:48.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:48.065" starttime="20170928 16:58:48.064" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:48.065" starttime="20170928 16:58:46.645" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:48.065" starttime="20170928 16:58:46.644" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:48.065" starttime="20170928 16:58:46.644" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:48.066">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 16:58:48.066" starttime="20170928 16:58:48.065" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:48.068">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:48.068" starttime="20170928 16:58:48.067" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:48.069">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 16:58:48.069" starttime="20170928 16:58:48.069" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:48.069" starttime="20170928 16:58:48.068" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:48.069" starttime="20170928 16:58:48.066" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:48.069" starttime="20170928 16:58:48.066" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:50.076">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:50.077">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:50.077" starttime="20170928 16:58:48.070" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:50.078">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:50.078" starttime="20170928 16:58:50.078" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:50.079">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:50.079" starttime="20170928 16:58:50.079" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:50.080" starttime="20170928 16:58:50.079" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:50.080" starttime="20170928 16:58:50.077" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:50.080" starttime="20170928 16:58:50.077" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:50.080">Delete All Sessions</msg>
<status endtime="20170928 16:58:50.080" starttime="20170928 16:58:50.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:50.080">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:50.080" starttime="20170928 16:58:46.643" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:50.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:50.081" starttime="20170928 16:58:50.081" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:50.082">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:50.082">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:50.082">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 16:58:50.082" starttime="20170928 16:58:50.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:50.082">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:58:50.082" starttime="20170928 16:58:46.642" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:50.082">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 16:58:50.082" starttime="20170928 16:58:46.642" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:50.083">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:50.083" starttime="20170928 16:58:50.083" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:50.087">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:58:50.087" starttime="20170928 16:58:50.087" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:50.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:58:50.088" starttime="20170928 16:58:50.088" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:50.089">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:58:50.089" starttime="20170928 16:58:50.088" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:50.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:58:50.090" starttime="20170928 16:58:50.089" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:50.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:58:50.997" starttime="20170928 16:58:50.090" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:50.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:58:50.998">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:50.998" starttime="20170928 16:58:50.090" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:50.998">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:50.998" starttime="20170928 16:58:50.998" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:50.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:50.999" starttime="20170928 16:58:50.999" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:50.999" starttime="20170928 16:58:50.086" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:50.999" starttime="20170928 16:58:50.085" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:50.999" starttime="20170928 16:58:50.085" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:51.000">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 16:58:51.000" starttime="20170928 16:58:51.000" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:51.002">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:51.002" starttime="20170928 16:58:51.002" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:51.003">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 16:58:51.003" starttime="20170928 16:58:51.003" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:51.003" starttime="20170928 16:58:51.002" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:51.004" starttime="20170928 16:58:51.001" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:51.004" starttime="20170928 16:58:51.000" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:52.769">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:58:52.769">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:52.769" starttime="20170928 16:58:51.004" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:52.771">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:52.771" starttime="20170928 16:58:52.771" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:52.772">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:58:52.773" starttime="20170928 16:58:52.772" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:52.773" starttime="20170928 16:58:52.771" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:52.773" starttime="20170928 16:58:52.770" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:52.773" starttime="20170928 16:58:52.770" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:58:52.773">Delete All Sessions</msg>
<status endtime="20170928 16:58:52.773" starttime="20170928 16:58:52.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:52.774">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:58:52.774" starttime="20170928 16:58:50.084" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:52.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:52.774" starttime="20170928 16:58:52.774" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:58:52.775">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:58:52.775">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:58:52.775">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete'}</msg>
<status endtime="20170928 16:58:52.775" starttime="20170928 16:58:52.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:52.775">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20170928 16:58:52.775" starttime="20170928 16:58:50.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:58:52.776">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20170928 16:58:52.776" starttime="20170928 16:58:50.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:58:52.776">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:58:52.776" starttime="20170928 16:58:52.776" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:52.776" starttime="20170928 16:58:46.642" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:52.777" starttime="20170928 16:58:39.505" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:52.777" starttime="20170928 16:56:21.392" status="PASS"></status>
</kw>
<status endtime="20170928 16:58:52.777" starttime="20170928 16:56:20.083" status="PASS"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:22.777">Slept 30 seconds</msg>
<status endtime="20170928 16:59:22.779" starttime="20170928 16:58:52.777" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:22.779" starttime="20170928 16:56:17.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:22.779">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:22.781">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170928 16:59:22.781" starttime="20170928 16:59:22.780" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:22.782">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170928 16:59:22.782" starttime="20170928 16:59:22.782" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:22.785">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:59:22.787" starttime="20170928 16:59:22.785" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:22.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:22.788" starttime="20170928 16:59:22.787" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:22.788">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:59:22.788" starttime="20170928 16:59:22.788" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:22.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:59:22.789" starttime="20170928 16:59:22.788" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:24.490">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:59:24.490" starttime="20170928 16:59:22.790" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:24.490">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:59:24.490">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:24.490" starttime="20170928 16:59:22.789" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:24.491">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:24.491" starttime="20170928 16:59:24.491" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:24.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:24.492" starttime="20170928 16:59:24.492" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:24.492" starttime="20170928 16:59:22.784" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:24.492" starttime="20170928 16:59:22.784" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:24.492" starttime="20170928 16:59:22.783" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:24.493">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170928 16:59:24.493" starttime="20170928 16:59:24.493" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:24.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:24.494" starttime="20170928 16:59:24.494" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170928 16:59:24.495" starttime="20170928 16:59:24.494" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:24.496">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170928 16:59:24.496" starttime="20170928 16:59:24.496" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:24.497">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170928 16:59:24.497" starttime="20170928 16:59:24.497" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:24.497" starttime="20170928 16:59:24.496" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:24.498" starttime="20170928 16:59:24.495" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:31.301">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170928 16:59:31.301">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:31.301" starttime="20170928 16:59:24.498" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:31.303">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:31.303" starttime="20170928 16:59:31.302" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:31.303">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:31.304" starttime="20170928 16:59:31.303" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:31.304" starttime="20170928 16:59:31.303" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:31.304" starttime="20170928 16:59:31.301" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:59:31.304">Delete All Sessions</msg>
<status endtime="20170928 16:59:31.304" starttime="20170928 16:59:31.304" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:31.305">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:31.305" starttime="20170928 16:59:22.782" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:31.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:31.305" starttime="20170928 16:59:31.305" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:31.306">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:59:31.306">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:59:31.306">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170928 16:59:31.306" starttime="20170928 16:59:31.305" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:31.306" starttime="20170928 16:59:22.781" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170928 16:59:31.307" starttime="20170928 16:59:31.306" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:31.314">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:59:31.315" starttime="20170928 16:59:31.314" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:31.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:31.315" starttime="20170928 16:59:31.315" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:31.316">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:59:31.316" starttime="20170928 16:59:31.316" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:31.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:59:31.317" starttime="20170928 16:59:31.317" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:31.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:59:31.997" starttime="20170928 16:59:31.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:31.997">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:59:31.997">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:31.998" starttime="20170928 16:59:31.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:31.998">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:31.998" starttime="20170928 16:59:31.998" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:31.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:31.999" starttime="20170928 16:59:31.998" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:31.999" starttime="20170928 16:59:31.313" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:31.999" starttime="20170928 16:59:31.312" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:31.999" starttime="20170928 16:59:31.311" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:32.000">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:59:32.000" starttime="20170928 16:59:32.000" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:32.002">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:32.002" starttime="20170928 16:59:32.002" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:32.003">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:32.003" starttime="20170928 16:59:32.003" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:32.004" starttime="20170928 16:59:32.003" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:32.004" starttime="20170928 16:59:32.001" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:32.004" starttime="20170928 16:59:32.001" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:37.820">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:59:37.820">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:37.820" starttime="20170928 16:59:32.004" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:37.822">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:37.822" starttime="20170928 16:59:37.822" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:37.823">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:37.823" starttime="20170928 16:59:37.823" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:37.823" starttime="20170928 16:59:37.822" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:37.823" starttime="20170928 16:59:37.821" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:37.823" starttime="20170928 16:59:37.821" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:59:37.824">Delete All Sessions</msg>
<status endtime="20170928 16:59:37.824" starttime="20170928 16:59:37.824" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:37.824">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:37.824" starttime="20170928 16:59:31.310" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:37.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:37.825" starttime="20170928 16:59:37.824" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:37.825">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:59:37.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:59:37.825">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:59:37.826" starttime="20170928 16:59:37.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:37.826">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:59:37.826" starttime="20170928 16:59:31.309" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:37.826">${power_state} = On</msg>
<status endtime="20170928 16:59:37.826" starttime="20170928 16:59:31.309" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:59:37.827">Off != On</msg>
<status endtime="20170928 16:59:37.827" starttime="20170928 16:59:37.826" status="FAIL"></status>
</kw>
<status endtime="20170928 16:59:37.827" starttime="20170928 16:59:31.308" status="FAIL"></status>
</kw>
<status endtime="20170928 16:59:37.827" starttime="20170928 16:59:31.308" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:47.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:59:47.834" starttime="20170928 16:59:47.833" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:47.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:47.835" starttime="20170928 16:59:47.834" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:47.836">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:59:47.836" starttime="20170928 16:59:47.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:47.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:59:47.836" starttime="20170928 16:59:47.836" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:48.048">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:59:48.048" starttime="20170928 16:59:47.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:48.048">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:59:48.048">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:48.049" starttime="20170928 16:59:47.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:48.049">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:48.049" starttime="20170928 16:59:48.049" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:48.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:48.050" starttime="20170928 16:59:48.049" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.050" starttime="20170928 16:59:47.832" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.050" starttime="20170928 16:59:47.831" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.050" starttime="20170928 16:59:47.831" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:48.051">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:59:48.051" starttime="20170928 16:59:48.050" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:48.053">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:48.053" starttime="20170928 16:59:48.052" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:48.054">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:48.054" starttime="20170928 16:59:48.054" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.054" starttime="20170928 16:59:48.053" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.055" starttime="20170928 16:59:48.052" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.055" starttime="20170928 16:59:48.051" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:48.148">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:59:48.148">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:48.148" starttime="20170928 16:59:48.055" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:48.150">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:48.150" starttime="20170928 16:59:48.149" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:48.151">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:48.151" starttime="20170928 16:59:48.151" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.151" starttime="20170928 16:59:48.150" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.151" starttime="20170928 16:59:48.149" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:48.151" starttime="20170928 16:59:48.148" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:59:48.152">Delete All Sessions</msg>
<status endtime="20170928 16:59:48.152" starttime="20170928 16:59:48.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:48.152">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:48.152" starttime="20170928 16:59:47.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:48.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:48.153" starttime="20170928 16:59:48.152" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:48.153">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:59:48.153">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:59:48.153">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 16:59:48.154" starttime="20170928 16:59:48.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:48.154">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 16:59:48.154" starttime="20170928 16:59:47.829" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:48.154">${power_state} = On</msg>
<status endtime="20170928 16:59:48.154" starttime="20170928 16:59:47.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 16:59:48.155">Off != On</msg>
<status endtime="20170928 16:59:48.155" starttime="20170928 16:59:48.154" status="FAIL"></status>
</kw>
<status endtime="20170928 16:59:48.155" starttime="20170928 16:59:47.828" status="FAIL"></status>
</kw>
<status endtime="20170928 16:59:48.155" starttime="20170928 16:59:47.828" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.160">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:59:58.161" starttime="20170928 16:59:58.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.161">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:58.161" starttime="20170928 16:59:58.161" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.162">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:59:58.162" starttime="20170928 16:59:58.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.163">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:59:58.163" starttime="20170928 16:59:58.162" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.362">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:59:58.362" starttime="20170928 16:59:58.163" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.362">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:59:58.362">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:58.362" starttime="20170928 16:59:58.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.363">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.363" starttime="20170928 16:59:58.363" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.364" starttime="20170928 16:59:58.363" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.364" starttime="20170928 16:59:58.159" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.364" starttime="20170928 16:59:58.159" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.364" starttime="20170928 16:59:58.158" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.365">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 16:59:58.365" starttime="20170928 16:59:58.364" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.367">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:58.367" starttime="20170928 16:59:58.366" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.368">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:58.368" starttime="20170928 16:59:58.367" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.368" starttime="20170928 16:59:58.367" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.368" starttime="20170928 16:59:58.365" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.368" starttime="20170928 16:59:58.365" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:59:58.442">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:58.442" starttime="20170928 16:59:58.368" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:58.444" starttime="20170928 16:59:58.443" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.446">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:58.447" starttime="20170928 16:59:58.446" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.447" starttime="20170928 16:59:58.444" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.447" starttime="20170928 16:59:58.443" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.447" starttime="20170928 16:59:58.442" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:59:58.447">Delete All Sessions</msg>
<status endtime="20170928 16:59:58.447" starttime="20170928 16:59:58.447" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.448">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:58.448" starttime="20170928 16:59:58.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.448" starttime="20170928 16:59:58.448" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.449">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:59:58.449">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:59:58.449">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170928 16:59:58.449" starttime="20170928 16:59:58.448" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.449">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170928 16:59:58.449" starttime="20170928 16:59:58.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.450">${power_state} = Off</msg>
<status endtime="20170928 16:59:58.450" starttime="20170928 16:59:58.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 16:59:58.451" starttime="20170928 16:59:58.450" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.451" starttime="20170928 16:59:58.156" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.456">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:59:58.456" starttime="20170928 16:59:58.456" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:58.457" starttime="20170928 16:59:58.457" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.458">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:59:58.458" starttime="20170928 16:59:58.457" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:59:58.458" starttime="20170928 16:59:58.458" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.643">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:59:58.643" starttime="20170928 16:59:58.459" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.644">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:59:58.644">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:58.644" starttime="20170928 16:59:58.459" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.644">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.644" starttime="20170928 16:59:58.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.645" starttime="20170928 16:59:58.645" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.645" starttime="20170928 16:59:58.455" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.645" starttime="20170928 16:59:58.454" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.645" starttime="20170928 16:59:58.453" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.646">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 16:59:58.646" starttime="20170928 16:59:58.646" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.648">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:58.649" starttime="20170928 16:59:58.647" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.649">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 16:59:58.650" starttime="20170928 16:59:58.649" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.650" starttime="20170928 16:59:58.649" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.650" starttime="20170928 16:59:58.647" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.650" starttime="20170928 16:59:58.646" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.746">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 16:59:58.747">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:58.747" starttime="20170928 16:59:58.650" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.749">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:58.749" starttime="20170928 16:59:58.748" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.750">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:58.750" starttime="20170928 16:59:58.749" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.750" starttime="20170928 16:59:58.749" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.750" starttime="20170928 16:59:58.747" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.750" starttime="20170928 16:59:58.747" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:59:58.750">Delete All Sessions</msg>
<status endtime="20170928 16:59:58.751" starttime="20170928 16:59:58.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.751">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:58.751" starttime="20170928 16:59:58.452" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.751" starttime="20170928 16:59:58.751" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.752">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:59:58.752">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:59:58.752">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170928 16:59:58.752" starttime="20170928 16:59:58.752" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.753">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170928 16:59:58.753" starttime="20170928 16:59:58.452" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.753">${host_state} = Off</msg>
<status endtime="20170928 16:59:58.753" starttime="20170928 16:59:58.451" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 16:59:58.753" starttime="20170928 16:59:58.753" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.754" starttime="20170928 16:59:58.156" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.754" starttime="20170928 16:59:31.308" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.754" starttime="20170928 16:59:31.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.754">${status} = True</msg>
<status endtime="20170928 16:59:58.754" starttime="20170928 16:59:31.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170928 16:59:58.754" starttime="20170928 16:59:58.754" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.755" starttime="20170928 16:59:22.780" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.756">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170928 16:59:58.756" starttime="20170928 16:59:58.755" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.757">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170928 16:59:58.757" starttime="20170928 16:59:58.757" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.761">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:59:58.761" starttime="20170928 16:59:58.760" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:58.762" starttime="20170928 16:59:58.762" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.763">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:59:58.763" starttime="20170928 16:59:58.763" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:59:58.764" starttime="20170928 16:59:58.764" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.944">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 16:59:58.944" starttime="20170928 16:59:58.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:58.944">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 16:59:58.944">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:58.944" starttime="20170928 16:59:58.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.945">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.945" starttime="20170928 16:59:58.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:58.945" starttime="20170928 16:59:58.945" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.946" starttime="20170928 16:59:58.760" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.946" starttime="20170928 16:59:58.759" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.946" starttime="20170928 16:59:58.758" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.946">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170928 16:59:58.946" starttime="20170928 16:59:58.946" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:58.947" starttime="20170928 16:59:58.947" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170928 16:59:58.948" starttime="20170928 16:59:58.947" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:58.949">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170928 16:59:58.949" starttime="20170928 16:59:58.948" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:58.950">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170928 16:59:58.950" starttime="20170928 16:59:58.950" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.950" starttime="20170928 16:59:58.949" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:58.950" starttime="20170928 16:59:58.948" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:59.489">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170928 16:59:59.489">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:59.489" starttime="20170928 16:59:58.951" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:59.490">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:59.490" starttime="20170928 16:59:59.490" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:59.491">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 16:59:59.491" starttime="20170928 16:59:59.491" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:59.491" starttime="20170928 16:59:59.490" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:59.492" starttime="20170928 16:59:59.489" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 16:59:59.492">Delete All Sessions</msg>
<status endtime="20170928 16:59:59.492" starttime="20170928 16:59:59.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 16:59:59.492">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 16:59:59.492" starttime="20170928 16:59:58.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:59.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 16:59:59.493" starttime="20170928 16:59:59.493" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:59.494">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 16:59:59.494">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 16:59:59.494">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170928 16:59:59.494" starttime="20170928 16:59:59.493" status="PASS"></status>
</kw>
<status endtime="20170928 16:59:59.494" starttime="20170928 16:59:58.756" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170928 16:59:59.495" starttime="20170928 16:59:59.494" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 16:59:59.500">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 16:59:59.500" starttime="20170928 16:59:59.499" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:59.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 16:59:59.501" starttime="20170928 16:59:59.500" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:59.501">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 16:59:59.501" starttime="20170928 16:59:59.501" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 16:59:59.502">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 16:59:59.502" starttime="20170928 16:59:59.501" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:00.554">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:00.554" starttime="20170928 16:59:59.503" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:00.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:00.555">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:00.555" starttime="20170928 16:59:59.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:00.555">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:00.555" starttime="20170928 17:00:00.555" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:00.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:00.556" starttime="20170928 17:00:00.556" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:00.556" starttime="20170928 16:59:59.499" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:00.556" starttime="20170928 16:59:59.498" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:00.556" starttime="20170928 16:59:59.497" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:00.557">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:00:00.557" starttime="20170928 17:00:00.557" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:00.559">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:00.559" starttime="20170928 17:00:00.558" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:00.560">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:00.560" starttime="20170928 17:00:00.560" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:00.560" starttime="20170928 17:00:00.559" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:00.560" starttime="20170928 17:00:00.558" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:00.560" starttime="20170928 17:00:00.557" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:10.407">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:10.407">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:10.407" starttime="20170928 17:00:00.561" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:10.410">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:10.410" starttime="20170928 17:00:10.409" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:10.411">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:10.411" starttime="20170928 17:00:10.410" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:10.411" starttime="20170928 17:00:10.410" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:10.411" starttime="20170928 17:00:10.408" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:10.411" starttime="20170928 17:00:10.408" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:10.411">Delete All Sessions</msg>
<status endtime="20170928 17:00:10.411" starttime="20170928 17:00:10.411" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:10.412">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:10.412" starttime="20170928 16:59:59.497" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:10.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:10.412" starttime="20170928 17:00:10.412" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:10.413">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:10.413">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:10.413">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170928 17:00:10.413" starttime="20170928 17:00:10.413" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:10.413">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170928 17:00:10.413" starttime="20170928 16:59:59.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:10.414">${power_state} = Off</msg>
<status endtime="20170928 17:00:10.414" starttime="20170928 16:59:59.496" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170928 17:00:10.414">On != Off</msg>
<status endtime="20170928 17:00:10.414" starttime="20170928 17:00:10.414" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:10.415" starttime="20170928 16:59:59.496" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:10.415" starttime="20170928 16:59:59.495" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:20.420">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:20.420" starttime="20170928 17:00:20.419" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:20.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:20.421" starttime="20170928 17:00:20.420" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:20.421">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:20.421" starttime="20170928 17:00:20.421" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:20.422">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:20.422" starttime="20170928 17:00:20.422" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:21.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:21.395" starttime="20170928 17:00:20.423" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:21.396">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:21.396">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:21.396" starttime="20170928 17:00:20.422" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:21.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:21.397" starttime="20170928 17:00:21.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:21.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:21.398" starttime="20170928 17:00:21.397" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:21.398" starttime="20170928 17:00:20.419" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:21.398" starttime="20170928 17:00:20.418" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:21.398" starttime="20170928 17:00:20.418" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:21.399">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:00:21.399" starttime="20170928 17:00:21.398" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:21.401">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:21.401" starttime="20170928 17:00:21.401" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:21.402">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:21.402" starttime="20170928 17:00:21.402" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:21.403" starttime="20170928 17:00:21.402" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:21.403" starttime="20170928 17:00:21.400" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:21.403" starttime="20170928 17:00:21.399" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.033">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:22.034">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:22.034" starttime="20170928 17:00:21.403" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.036">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:22.036" starttime="20170928 17:00:22.035" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:22.037">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:22.037" starttime="20170928 17:00:22.036" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.037" starttime="20170928 17:00:22.036" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.037" starttime="20170928 17:00:22.035" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.037" starttime="20170928 17:00:22.034" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:22.037">Delete All Sessions</msg>
<status endtime="20170928 17:00:22.038" starttime="20170928 17:00:22.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:22.038">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:22.038" starttime="20170928 17:00:20.417" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:22.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:22.038" starttime="20170928 17:00:22.038" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.039">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:22.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:22.039">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:00:22.039" starttime="20170928 17:00:22.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:22.039">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:00:22.039" starttime="20170928 17:00:20.417" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:22.040">${power_state} = On</msg>
<status endtime="20170928 17:00:22.040" starttime="20170928 17:00:20.416" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:00:22.040" starttime="20170928 17:00:22.040" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.040" starttime="20170928 17:00:20.416" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:22.044">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:22.045" starttime="20170928 17:00:22.044" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.045">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:22.045" starttime="20170928 17:00:22.045" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.046">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:22.046" starttime="20170928 17:00:22.046" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:22.047" starttime="20170928 17:00:22.046" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:22.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:22.952" starttime="20170928 17:00:22.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:22.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:22.952">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:22.952" starttime="20170928 17:00:22.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:22.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:22.953" starttime="20170928 17:00:22.952" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:22.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:22.954" starttime="20170928 17:00:22.953" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.954" starttime="20170928 17:00:22.043" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.954" starttime="20170928 17:00:22.043" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.954" starttime="20170928 17:00:22.042" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.954">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:00:22.954" starttime="20170928 17:00:22.954" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:22.957">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:22.957" starttime="20170928 17:00:22.956" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:22.958">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:22.958" starttime="20170928 17:00:22.957" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.958" starttime="20170928 17:00:22.957" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.958" starttime="20170928 17:00:22.955" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:22.958" starttime="20170928 17:00:22.955" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:23.406">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:23.406" starttime="20170928 17:00:22.958" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.408">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:23.408" starttime="20170928 17:00:23.407" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:23.409">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:23.409" starttime="20170928 17:00:23.409" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.409" starttime="20170928 17:00:23.408" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.409" starttime="20170928 17:00:23.407" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.409" starttime="20170928 17:00:23.406" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:23.410">Delete All Sessions</msg>
<status endtime="20170928 17:00:23.410" starttime="20170928 17:00:23.410" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:23.410">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:23.410" starttime="20170928 17:00:22.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:23.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:23.411" starttime="20170928 17:00:23.410" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.411">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:23.411">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:23.411">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:00:23.411" starttime="20170928 17:00:23.411" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:23.412">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:00:23.412" starttime="20170928 17:00:22.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:23.412">${host_state} = Running</msg>
<status endtime="20170928 17:00:23.412" starttime="20170928 17:00:22.041" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:00:23.413" starttime="20170928 17:00:23.412" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:23.417">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:23.417" starttime="20170928 17:00:23.417" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.418">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:23.418" starttime="20170928 17:00:23.418" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.419">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:23.419" starttime="20170928 17:00:23.418" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.419">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:23.419" starttime="20170928 17:00:23.419" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:23.943">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:23.943" starttime="20170928 17:00:23.420" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:23.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:23.943">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:23.944" starttime="20170928 17:00:23.420" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:23.944">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:23.944" starttime="20170928 17:00:23.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:23.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:23.945" starttime="20170928 17:00:23.945" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.945" starttime="20170928 17:00:23.416" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.945" starttime="20170928 17:00:23.416" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.945" starttime="20170928 17:00:23.415" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.946">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:00:23.946" starttime="20170928 17:00:23.946" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:23.948">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:23.948" starttime="20170928 17:00:23.947" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:23.949">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:23.949" starttime="20170928 17:00:23.949" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.949" starttime="20170928 17:00:23.948" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.949" starttime="20170928 17:00:23.947" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:23.949" starttime="20170928 17:00:23.946" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:24.078">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:24.079">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:24.079" starttime="20170928 17:00:23.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:24.080">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:24.081" starttime="20170928 17:00:24.080" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:24.081">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:24.082" starttime="20170928 17:00:24.081" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:24.082" starttime="20170928 17:00:24.081" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:24.082" starttime="20170928 17:00:24.079" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:24.082" starttime="20170928 17:00:24.079" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:24.082">Delete All Sessions</msg>
<status endtime="20170928 17:00:24.082" starttime="20170928 17:00:24.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:24.083">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:24.083" starttime="20170928 17:00:23.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:24.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:24.083" starttime="20170928 17:00:24.083" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:24.084">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:24.084">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:24.084">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170928 17:00:24.084" starttime="20170928 17:00:24.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:24.084">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170928 17:00:24.084" starttime="20170928 17:00:23.414" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:24.085">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170928 17:00:24.085" starttime="20170928 17:00:23.413" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:24.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:00:24.085">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170928 17:00:24.085" starttime="20170928 17:00:24.085" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:24.086" starttime="20170928 17:00:23.413" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:24.086" starttime="20170928 17:00:20.415" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.091">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:34.091" starttime="20170928 17:00:34.090" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.092">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:34.092" starttime="20170928 17:00:34.091" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.092">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:34.092" starttime="20170928 17:00:34.092" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.093">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:34.093" starttime="20170928 17:00:34.093" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:34.424" starttime="20170928 17:00:34.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:34.424">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:34.424">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:34.424" starttime="20170928 17:00:34.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:34.425" starttime="20170928 17:00:34.424" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:34.425" starttime="20170928 17:00:34.425" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.425" starttime="20170928 17:00:34.090" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.426" starttime="20170928 17:00:34.089" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.426" starttime="20170928 17:00:34.089" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.426">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:00:34.426" starttime="20170928 17:00:34.426" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.428">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:34.429" starttime="20170928 17:00:34.428" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.429">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:34.430" starttime="20170928 17:00:34.429" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.430" starttime="20170928 17:00:34.429" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.430" starttime="20170928 17:00:34.427" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.430" starttime="20170928 17:00:34.427" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.592">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:34.592">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:34.592" starttime="20170928 17:00:34.430" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.594">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:34.594" starttime="20170928 17:00:34.594" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.595">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:34.595" starttime="20170928 17:00:34.595" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.595" starttime="20170928 17:00:34.594" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.595" starttime="20170928 17:00:34.593" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.595" starttime="20170928 17:00:34.593" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:34.596">Delete All Sessions</msg>
<status endtime="20170928 17:00:34.596" starttime="20170928 17:00:34.596" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:34.596">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:34.596" starttime="20170928 17:00:34.088" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:34.597" starttime="20170928 17:00:34.596" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.597">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:34.597">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:34.597">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:00:34.597" starttime="20170928 17:00:34.597" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:34.598">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:00:34.598" starttime="20170928 17:00:34.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:34.598">${power_state} = On</msg>
<status endtime="20170928 17:00:34.598" starttime="20170928 17:00:34.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:00:34.599" starttime="20170928 17:00:34.598" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:34.599" starttime="20170928 17:00:34.087" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:34.602">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:34.606" starttime="20170928 17:00:34.602" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.606">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:34.606" starttime="20170928 17:00:34.606" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.607">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:34.607" starttime="20170928 17:00:34.606" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:34.608">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:34.608" starttime="20170928 17:00:34.607" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:35.334" starttime="20170928 17:00:34.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:35.334">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:35.334">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:35.334" starttime="20170928 17:00:34.608" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.334">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:35.335" starttime="20170928 17:00:35.334" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:35.335" starttime="20170928 17:00:35.335" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.335" starttime="20170928 17:00:34.602" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.335" starttime="20170928 17:00:34.601" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.336" starttime="20170928 17:00:34.601" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.336">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:00:35.336" starttime="20170928 17:00:35.336" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.338">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:35.338" starttime="20170928 17:00:35.338" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.339">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:35.339" starttime="20170928 17:00:35.339" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.339" starttime="20170928 17:00:35.338" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.339" starttime="20170928 17:00:35.337" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.340" starttime="20170928 17:00:35.336" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.548">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:35.548">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:35.548" starttime="20170928 17:00:35.340" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.550">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:35.550" starttime="20170928 17:00:35.550" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.551">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:35.551" starttime="20170928 17:00:35.551" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.551" starttime="20170928 17:00:35.550" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.552" starttime="20170928 17:00:35.549" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.552" starttime="20170928 17:00:35.549" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:35.552">Delete All Sessions</msg>
<status endtime="20170928 17:00:35.552" starttime="20170928 17:00:35.552" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:35.552">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:35.552" starttime="20170928 17:00:34.600" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.553">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:35.553" starttime="20170928 17:00:35.553" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.554">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:35.554">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:35.554">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:00:35.554" starttime="20170928 17:00:35.553" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:35.554">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:00:35.554" starttime="20170928 17:00:34.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:35.554">${host_state} = Running</msg>
<status endtime="20170928 17:00:35.554" starttime="20170928 17:00:34.599" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:00:35.555" starttime="20170928 17:00:35.555" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.559">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:35.559" starttime="20170928 17:00:35.559" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.560">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:35.560" starttime="20170928 17:00:35.560" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.561">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:35.561" starttime="20170928 17:00:35.560" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.561">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:35.561" starttime="20170928 17:00:35.561" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.900">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:35.900" starttime="20170928 17:00:35.562" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:35.901">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:35.901">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:35.901" starttime="20170928 17:00:35.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.901">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:35.901" starttime="20170928 17:00:35.901" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:35.902" starttime="20170928 17:00:35.902" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.902" starttime="20170928 17:00:35.558" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.902" starttime="20170928 17:00:35.558" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.902" starttime="20170928 17:00:35.557" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.903">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:00:35.903" starttime="20170928 17:00:35.903" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:35.905">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:35.905" starttime="20170928 17:00:35.905" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:35.906">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:35.907" starttime="20170928 17:00:35.906" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.907" starttime="20170928 17:00:35.905" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.907" starttime="20170928 17:00:35.904" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:35.907" starttime="20170928 17:00:35.903" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:36.449">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:36.449">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:36.449" starttime="20170928 17:00:35.907" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:36.451">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:36.451" starttime="20170928 17:00:36.451" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:36.452">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:36.452" starttime="20170928 17:00:36.452" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:36.452" starttime="20170928 17:00:36.451" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:36.453" starttime="20170928 17:00:36.450" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:36.453" starttime="20170928 17:00:36.450" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:36.453">Delete All Sessions</msg>
<status endtime="20170928 17:00:36.453" starttime="20170928 17:00:36.453" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:36.453">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:36.453" starttime="20170928 17:00:35.557" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:36.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:36.454" starttime="20170928 17:00:36.454" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:36.455">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:36.455">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:36.455">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 17:00:36.455" starttime="20170928 17:00:36.454" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:36.455">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:36.455" starttime="20170928 17:00:35.556" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:36.455">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:36.455" starttime="20170928 17:00:35.555" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:36.456">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:00:36.456">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:36.456" starttime="20170928 17:00:36.456" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:36.456" starttime="20170928 17:00:35.555" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:36.456" starttime="20170928 17:00:34.086" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.461">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:46.462" starttime="20170928 17:00:46.461" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.462">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:46.463" starttime="20170928 17:00:46.462" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.463">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:46.463" starttime="20170928 17:00:46.463" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.464">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:46.464" starttime="20170928 17:00:46.463" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.829">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:46.830" starttime="20170928 17:00:46.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:46.830">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:46.830">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:46.830" starttime="20170928 17:00:46.464" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.830">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:46.831" starttime="20170928 17:00:46.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:46.831" starttime="20170928 17:00:46.831" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.831" starttime="20170928 17:00:46.461" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.831" starttime="20170928 17:00:46.460" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.832" starttime="20170928 17:00:46.459" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.832">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:00:46.832" starttime="20170928 17:00:46.832" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.835">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:46.836" starttime="20170928 17:00:46.834" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.836">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:46.837" starttime="20170928 17:00:46.836" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.837" starttime="20170928 17:00:46.836" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.837" starttime="20170928 17:00:46.833" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.837" starttime="20170928 17:00:46.833" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.925">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:46.926">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:46.926" starttime="20170928 17:00:46.837" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.927">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:46.927" starttime="20170928 17:00:46.927" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.928">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:46.929" starttime="20170928 17:00:46.928" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.929" starttime="20170928 17:00:46.928" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.929" starttime="20170928 17:00:46.926" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.929" starttime="20170928 17:00:46.926" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:46.929">Delete All Sessions</msg>
<status endtime="20170928 17:00:46.929" starttime="20170928 17:00:46.929" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:46.930">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:46.930" starttime="20170928 17:00:46.459" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:46.930" starttime="20170928 17:00:46.930" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.931">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:46.931">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:46.931">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:00:46.931" starttime="20170928 17:00:46.931" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:46.931">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:00:46.931" starttime="20170928 17:00:46.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:46.932">${power_state} = On</msg>
<status endtime="20170928 17:00:46.932" starttime="20170928 17:00:46.458" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:00:46.932" starttime="20170928 17:00:46.932" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:46.932" starttime="20170928 17:00:46.458" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:46.936">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:46.937" starttime="20170928 17:00:46.936" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.938">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:46.938" starttime="20170928 17:00:46.937" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.939">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:46.939" starttime="20170928 17:00:46.938" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:46.939">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:46.940" starttime="20170928 17:00:46.939" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:47.388">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:47.388" starttime="20170928 17:00:46.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:47.388">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:47.388">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:47.388" starttime="20170928 17:00:46.940" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:47.389">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:47.389" starttime="20170928 17:00:47.388" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:47.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:47.389" starttime="20170928 17:00:47.389" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.390" starttime="20170928 17:00:46.935" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.390" starttime="20170928 17:00:46.935" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.390" starttime="20170928 17:00:46.934" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.390">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:00:47.390" starttime="20170928 17:00:47.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.393">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:47.393" starttime="20170928 17:00:47.392" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:47.393">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:47.394" starttime="20170928 17:00:47.393" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.394" starttime="20170928 17:00:47.393" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.394" starttime="20170928 17:00:47.391" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.394" starttime="20170928 17:00:47.391" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.634">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:47.634">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:47.634" starttime="20170928 17:00:47.394" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.636">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:47.636" starttime="20170928 17:00:47.635" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:47.637">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:47.637" starttime="20170928 17:00:47.637" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.637" starttime="20170928 17:00:47.636" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.637" starttime="20170928 17:00:47.635" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:47.637" starttime="20170928 17:00:47.634" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:47.638">Delete All Sessions</msg>
<status endtime="20170928 17:00:47.638" starttime="20170928 17:00:47.638" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:47.638">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:47.638" starttime="20170928 17:00:46.933" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:47.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:47.639" starttime="20170928 17:00:47.638" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.639">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:47.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:47.640">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:00:47.640" starttime="20170928 17:00:47.639" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:47.640">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:00:47.640" starttime="20170928 17:00:46.933" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:47.641">${host_state} = Running</msg>
<status endtime="20170928 17:00:47.641" starttime="20170928 17:00:46.933" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:00:47.641" starttime="20170928 17:00:47.641" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:47.648">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:47.648" starttime="20170928 17:00:47.647" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:47.649" starttime="20170928 17:00:47.649" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.650">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:47.650" starttime="20170928 17:00:47.650" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:47.651">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:47.651" starttime="20170928 17:00:47.651" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:48.243">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:48.243" starttime="20170928 17:00:47.652" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:48.243">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:48.243">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:48.244" starttime="20170928 17:00:47.652" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:48.244">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:48.244" starttime="20170928 17:00:48.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:48.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:48.245" starttime="20170928 17:00:48.245" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.245" starttime="20170928 17:00:47.647" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.245" starttime="20170928 17:00:47.646" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.245" starttime="20170928 17:00:47.645" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:48.246">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:00:48.246" starttime="20170928 17:00:48.246" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:48.249">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:48.249" starttime="20170928 17:00:48.247" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:48.249">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:48.250" starttime="20170928 17:00:48.249" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.250" starttime="20170928 17:00:48.249" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.250" starttime="20170928 17:00:48.247" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.250" starttime="20170928 17:00:48.246" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:48.336">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:48.336">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:48.336" starttime="20170928 17:00:48.250" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:48.338">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:48.338" starttime="20170928 17:00:48.338" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:48.339">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:48.339" starttime="20170928 17:00:48.339" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.339" starttime="20170928 17:00:48.338" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.339" starttime="20170928 17:00:48.337" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:48.340" starttime="20170928 17:00:48.337" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:48.340">Delete All Sessions</msg>
<status endtime="20170928 17:00:48.340" starttime="20170928 17:00:48.340" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:48.340">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:48.340" starttime="20170928 17:00:47.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:48.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:48.341" starttime="20170928 17:00:48.341" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:48.342">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:48.342">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:48.342">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 17:00:48.342" starttime="20170928 17:00:48.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:48.342">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:48.342" starttime="20170928 17:00:47.643" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:48.342">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:48.342" starttime="20170928 17:00:47.642" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:48.343">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:00:48.343">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:48.343" starttime="20170928 17:00:48.343" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:48.343" starttime="20170928 17:00:47.642" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:48.343" starttime="20170928 17:00:46.457" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.348">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:58.349" starttime="20170928 17:00:58.348" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:58.349" starttime="20170928 17:00:58.349" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.350">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:58.350" starttime="20170928 17:00:58.350" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:58.351" starttime="20170928 17:00:58.350" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.616">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:58.616" starttime="20170928 17:00:58.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:58.616">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:58.616">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:58.616" starttime="20170928 17:00:58.351" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.617">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:58.617" starttime="20170928 17:00:58.616" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:58.618" starttime="20170928 17:00:58.617" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.618" starttime="20170928 17:00:58.348" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.618" starttime="20170928 17:00:58.347" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.618" starttime="20170928 17:00:58.346" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.618">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:00:58.618" starttime="20170928 17:00:58.618" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.621">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:58.621" starttime="20170928 17:00:58.620" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.622">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:58.622" starttime="20170928 17:00:58.621" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.622" starttime="20170928 17:00:58.621" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.622" starttime="20170928 17:00:58.619" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.622" starttime="20170928 17:00:58.619" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.697">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:58.697">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:58.697" starttime="20170928 17:00:58.622" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.699">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:58.699" starttime="20170928 17:00:58.698" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.700">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:58.700" starttime="20170928 17:00:58.699" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.700" starttime="20170928 17:00:58.699" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.700" starttime="20170928 17:00:58.698" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.700" starttime="20170928 17:00:58.697" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:58.700">Delete All Sessions</msg>
<status endtime="20170928 17:00:58.700" starttime="20170928 17:00:58.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:58.701">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:58.701" starttime="20170928 17:00:58.346" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:58.701" starttime="20170928 17:00:58.701" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.702">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:58.702">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:58.702">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:00:58.702" starttime="20170928 17:00:58.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:58.702">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:00:58.702" starttime="20170928 17:00:58.345" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:58.703">${power_state} = On</msg>
<status endtime="20170928 17:00:58.703" starttime="20170928 17:00:58.345" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:00:58.703" starttime="20170928 17:00:58.703" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.703" starttime="20170928 17:00:58.344" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.707">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:58.708" starttime="20170928 17:00:58.707" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:58.708" starttime="20170928 17:00:58.708" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.709">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:58.709" starttime="20170928 17:00:58.709" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.710">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:58.710" starttime="20170928 17:00:58.709" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.971">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:58.971" starttime="20170928 17:00:58.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:58.971">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:58.971">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:58.971" starttime="20170928 17:00:58.710" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.972">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:58.972" starttime="20170928 17:00:58.972" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:58.973" starttime="20170928 17:00:58.973" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.973" starttime="20170928 17:00:58.706" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.973" starttime="20170928 17:00:58.706" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.973" starttime="20170928 17:00:58.705" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.974">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:00:58.974" starttime="20170928 17:00:58.974" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:58.976">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:58.976" starttime="20170928 17:00:58.975" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:58.978">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:00:58.978" starttime="20170928 17:00:58.977" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.978" starttime="20170928 17:00:58.977" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.978" starttime="20170928 17:00:58.975" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:58.978" starttime="20170928 17:00:58.974" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.065">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:59.065">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:59.065" starttime="20170928 17:00:58.978" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.067">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:59.067" starttime="20170928 17:00:59.066" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.068">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:59.068" starttime="20170928 17:00:59.068" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.068" starttime="20170928 17:00:59.067" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.068" starttime="20170928 17:00:59.066" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.068" starttime="20170928 17:00:59.065" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:59.069">Delete All Sessions</msg>
<status endtime="20170928 17:00:59.069" starttime="20170928 17:00:59.069" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:59.069">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:59.069" starttime="20170928 17:00:58.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:59.070" starttime="20170928 17:00:59.069" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.070">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:59.070">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:59.070">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:00:59.070" starttime="20170928 17:00:59.070" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:59.071">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:00:59.071" starttime="20170928 17:00:58.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:59.071">${host_state} = Running</msg>
<status endtime="20170928 17:00:59.071" starttime="20170928 17:00:58.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:00:59.072" starttime="20170928 17:00:59.071" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.076">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:00:59.076" starttime="20170928 17:00:59.076" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.077">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:00:59.077" starttime="20170928 17:00:59.077" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.078">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:00:59.078" starttime="20170928 17:00:59.077" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.079">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:00:59.079" starttime="20170928 17:00:59.078" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.319">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:00:59.319" starttime="20170928 17:00:59.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:59.319">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:00:59.319">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:59.319" starttime="20170928 17:00:59.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.320">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:59.320" starttime="20170928 17:00:59.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:59.320" starttime="20170928 17:00:59.320" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.320" starttime="20170928 17:00:59.075" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.321" starttime="20170928 17:00:59.075" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.321" starttime="20170928 17:00:59.074" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.321">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:00:59.321" starttime="20170928 17:00:59.321" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.324">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:59.324" starttime="20170928 17:00:59.323" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.325">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:00:59.325" starttime="20170928 17:00:59.325" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.325" starttime="20170928 17:00:59.324" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.325" starttime="20170928 17:00:59.322" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.325" starttime="20170928 17:00:59.322" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.422">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:00:59.423">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:59.423" starttime="20170928 17:00:59.326" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.425">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:59.425" starttime="20170928 17:00:59.424" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.426">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:00:59.426" starttime="20170928 17:00:59.425" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.426" starttime="20170928 17:00:59.425" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.426" starttime="20170928 17:00:59.424" status="PASS"></status>
</kw>
<status endtime="20170928 17:00:59.426" starttime="20170928 17:00:59.423" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:00:59.426">Delete All Sessions</msg>
<status endtime="20170928 17:00:59.426" starttime="20170928 17:00:59.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:59.427">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:00:59.427" starttime="20170928 17:00:59.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:00:59.428" starttime="20170928 17:00:59.427" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:00:59.428">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:00:59.428">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:00:59.428">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 17:00:59.428" starttime="20170928 17:00:59.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:59.429">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:59.429" starttime="20170928 17:00:59.073" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:00:59.429">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:59.429" starttime="20170928 17:00:59.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:00:59.429">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:00:59.429">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:00:59.430" starttime="20170928 17:00:59.429" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:59.430" starttime="20170928 17:00:59.072" status="FAIL"></status>
</kw>
<status endtime="20170928 17:00:59.430" starttime="20170928 17:00:58.344" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.435">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:09.435" starttime="20170928 17:01:09.434" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:09.436" starttime="20170928 17:01:09.435" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.436">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:09.437" starttime="20170928 17:01:09.436" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.437">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:09.437" starttime="20170928 17:01:09.437" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.665">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:09.665" starttime="20170928 17:01:09.438" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:09.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:09.665">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:09.665" starttime="20170928 17:01:09.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.666">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:09.666" starttime="20170928 17:01:09.665" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:09.666" starttime="20170928 17:01:09.666" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.666" starttime="20170928 17:01:09.434" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.667" starttime="20170928 17:01:09.434" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.667" starttime="20170928 17:01:09.433" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.667">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:01:09.667" starttime="20170928 17:01:09.667" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.669">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:09.669" starttime="20170928 17:01:09.669" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.670">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:09.670" starttime="20170928 17:01:09.670" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.671" starttime="20170928 17:01:09.670" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.671" starttime="20170928 17:01:09.668" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.671" starttime="20170928 17:01:09.668" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.740">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:09.740">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:09.740" starttime="20170928 17:01:09.671" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.742">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:09.742" starttime="20170928 17:01:09.742" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.743">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:09.743" starttime="20170928 17:01:09.743" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.743" starttime="20170928 17:01:09.742" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.744" starttime="20170928 17:01:09.741" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.744" starttime="20170928 17:01:09.741" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:09.744">Delete All Sessions</msg>
<status endtime="20170928 17:01:09.744" starttime="20170928 17:01:09.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:09.744">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:09.744" starttime="20170928 17:01:09.432" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:09.745" starttime="20170928 17:01:09.745" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.746">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:09.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:09.746">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:01:09.746" starttime="20170928 17:01:09.745" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:09.746">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:01:09.746" starttime="20170928 17:01:09.432" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:09.746">${power_state} = On</msg>
<status endtime="20170928 17:01:09.746" starttime="20170928 17:01:09.431" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:01:09.747" starttime="20170928 17:01:09.747" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.747" starttime="20170928 17:01:09.431" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.754">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:09.754" starttime="20170928 17:01:09.753" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:09.755" starttime="20170928 17:01:09.755" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.755">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:09.756" starttime="20170928 17:01:09.755" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:09.756" starttime="20170928 17:01:09.756" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.974">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:09.974" starttime="20170928 17:01:09.757" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:09.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:09.974">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:09.974" starttime="20170928 17:01:09.756" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.975">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:09.975" starttime="20170928 17:01:09.975" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.976">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:09.976" starttime="20170928 17:01:09.975" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.976" starttime="20170928 17:01:09.750" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.976" starttime="20170928 17:01:09.749" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.976" starttime="20170928 17:01:09.749" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.976">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:01:09.977" starttime="20170928 17:01:09.976" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:09.979">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:09.979" starttime="20170928 17:01:09.978" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:09.980">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:09.980" starttime="20170928 17:01:09.979" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.980" starttime="20170928 17:01:09.979" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.980" starttime="20170928 17:01:09.977" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:09.980" starttime="20170928 17:01:09.977" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.067">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:10.067">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.067" starttime="20170928 17:01:09.980" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.069">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:10.069" starttime="20170928 17:01:10.068" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.070">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:10.070" starttime="20170928 17:01:10.070" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.070" starttime="20170928 17:01:10.069" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.071" starttime="20170928 17:01:10.068" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.071" starttime="20170928 17:01:10.068" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:10.071">Delete All Sessions</msg>
<status endtime="20170928 17:01:10.071" starttime="20170928 17:01:10.071" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.071">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.071" starttime="20170928 17:01:09.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.072">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.072" starttime="20170928 17:01:10.072" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.073">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:10.073">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:10.073">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:01:10.073" starttime="20170928 17:01:10.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.073">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:01:10.073" starttime="20170928 17:01:09.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.073">${host_state} = Running</msg>
<status endtime="20170928 17:01:10.073" starttime="20170928 17:01:09.747" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:01:10.074" starttime="20170928 17:01:10.074" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.078">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:10.078" starttime="20170928 17:01:10.078" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.079">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:10.079" starttime="20170928 17:01:10.078" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.080">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:10.080" starttime="20170928 17:01:10.079" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.080">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:10.080" starttime="20170928 17:01:10.080" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.278">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:10.278" starttime="20170928 17:01:10.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.278">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:10.278">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.278" starttime="20170928 17:01:10.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.279">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.279" starttime="20170928 17:01:10.278" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.280" starttime="20170928 17:01:10.279" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.280" starttime="20170928 17:01:10.077" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.280" starttime="20170928 17:01:10.077" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.280" starttime="20170928 17:01:10.076" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.281">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:01:10.281" starttime="20170928 17:01:10.280" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.283">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:10.283" starttime="20170928 17:01:10.282" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.284">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:10.284" starttime="20170928 17:01:10.284" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.284" starttime="20170928 17:01:10.283" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.285" starttime="20170928 17:01:10.281" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.285" starttime="20170928 17:01:10.281" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.390">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:10.391">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.391" starttime="20170928 17:01:10.285" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.392">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:10.392" starttime="20170928 17:01:10.392" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.393">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:10.394" starttime="20170928 17:01:10.393" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.394" starttime="20170928 17:01:10.393" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.394" starttime="20170928 17:01:10.391" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.394" starttime="20170928 17:01:10.391" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:10.394">Delete All Sessions</msg>
<status endtime="20170928 17:01:10.394" starttime="20170928 17:01:10.394" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.395">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.395" starttime="20170928 17:01:10.075" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.395" starttime="20170928 17:01:10.395" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.396">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:10.396">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:10.396">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 17:01:10.396" starttime="20170928 17:01:10.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.396">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:01:10.396" starttime="20170928 17:01:10.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.397">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:01:10.397" starttime="20170928 17:01:10.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.397" starttime="20170928 17:01:10.397" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.401">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:10.402" starttime="20170928 17:01:10.401" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.403">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:10.403" starttime="20170928 17:01:10.402" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.403">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:10.403" starttime="20170928 17:01:10.403" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.404">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:10.404" starttime="20170928 17:01:10.404" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:10.659" starttime="20170928 17:01:10.405" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.659">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:10.659">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.659" starttime="20170928 17:01:10.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.660">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.660" starttime="20170928 17:01:10.659" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.661" starttime="20170928 17:01:10.661" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.661" starttime="20170928 17:01:10.400" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.661" starttime="20170928 17:01:10.400" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.662" starttime="20170928 17:01:10.399" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.663">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 17:01:10.663" starttime="20170928 17:01:10.662" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.665">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:10.665" starttime="20170928 17:01:10.664" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.666">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:10.666" starttime="20170928 17:01:10.666" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.666" starttime="20170928 17:01:10.665" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.667" starttime="20170928 17:01:10.664" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.667" starttime="20170928 17:01:10.663" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.846">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:10.846">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.846" starttime="20170928 17:01:10.667" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.860">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:10.860" starttime="20170928 17:01:10.852" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.863">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:10.863" starttime="20170928 17:01:10.862" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.863" starttime="20170928 17:01:10.861" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.863" starttime="20170928 17:01:10.849" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:10.864" starttime="20170928 17:01:10.848" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:10.865">Delete All Sessions</msg>
<status endtime="20170928 17:01:10.865" starttime="20170928 17:01:10.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.865">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:10.865" starttime="20170928 17:01:10.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.866">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:10.866" starttime="20170928 17:01:10.866" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:10.867">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:10.867">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:10.867">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 17:01:10.867" starttime="20170928 17:01:10.867" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.868">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:10.868" starttime="20170928 17:01:10.398" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:10.868">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:10.868" starttime="20170928 17:01:10.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:10.869">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:01:10.869">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:10.869" starttime="20170928 17:01:10.869" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:10.870" starttime="20170928 17:01:10.074" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:10.870" starttime="20170928 17:01:09.430" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:20.877">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:20.877" starttime="20170928 17:01:20.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:20.878">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:20.878" starttime="20170928 17:01:20.877" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:20.878">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:20.878" starttime="20170928 17:01:20.878" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:20.879">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:20.879" starttime="20170928 17:01:20.879" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:21.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:21.907" starttime="20170928 17:01:20.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:21.908">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:21.908">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:21.908" starttime="20170928 17:01:20.879" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:21.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:21.908" starttime="20170928 17:01:21.908" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:21.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:21.909" starttime="20170928 17:01:21.909" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:21.909" starttime="20170928 17:01:20.876" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:21.909" starttime="20170928 17:01:20.875" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:21.909" starttime="20170928 17:01:20.874" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:21.910">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:01:21.910" starttime="20170928 17:01:21.910" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:21.912">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:21.912" starttime="20170928 17:01:21.911" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:21.914">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:21.914" starttime="20170928 17:01:21.913" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:21.914" starttime="20170928 17:01:21.912" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:21.914" starttime="20170928 17:01:21.911" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:21.914" starttime="20170928 17:01:21.910" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:24.197">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:24.197">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:24.197" starttime="20170928 17:01:21.914" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:24.199">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:24.199" starttime="20170928 17:01:24.199" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:24.200">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:24.200" starttime="20170928 17:01:24.200" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:24.200" starttime="20170928 17:01:24.199" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:24.201" starttime="20170928 17:01:24.198" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:24.201" starttime="20170928 17:01:24.198" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:24.201">Delete All Sessions</msg>
<status endtime="20170928 17:01:24.201" starttime="20170928 17:01:24.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:24.201">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:24.201" starttime="20170928 17:01:20.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:24.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:24.202" starttime="20170928 17:01:24.202" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:24.203">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:24.203">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:24.203">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:01:24.203" starttime="20170928 17:01:24.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:24.203">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:01:24.204" starttime="20170928 17:01:20.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:24.204">${power_state} = On</msg>
<status endtime="20170928 17:01:24.204" starttime="20170928 17:01:20.871" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:01:24.205" starttime="20170928 17:01:24.204" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:24.205" starttime="20170928 17:01:20.871" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:24.210">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:24.211" starttime="20170928 17:01:24.210" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:24.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:24.212" starttime="20170928 17:01:24.211" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:24.212">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:24.213" starttime="20170928 17:01:24.212" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:24.213">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:24.214" starttime="20170928 17:01:24.213" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:25.505">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:25.505" starttime="20170928 17:01:24.215" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:25.505">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:25.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:25.505" starttime="20170928 17:01:24.214" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:25.506">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:25.506" starttime="20170928 17:01:25.505" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:25.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:25.507" starttime="20170928 17:01:25.506" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:25.507" starttime="20170928 17:01:24.209" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:25.507" starttime="20170928 17:01:24.208" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:25.507" starttime="20170928 17:01:24.207" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:25.507">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:01:25.507" starttime="20170928 17:01:25.507" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:25.509">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:25.510" starttime="20170928 17:01:25.509" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:25.510">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:25.511" starttime="20170928 17:01:25.510" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:25.511" starttime="20170928 17:01:25.510" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:25.511" starttime="20170928 17:01:25.508" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:25.511" starttime="20170928 17:01:25.508" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.652">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:26.652">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:26.652" starttime="20170928 17:01:25.511" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.654">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:26.654" starttime="20170928 17:01:26.654" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:26.655">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:26.655" starttime="20170928 17:01:26.655" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.655" starttime="20170928 17:01:26.654" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.656" starttime="20170928 17:01:26.653" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.656" starttime="20170928 17:01:26.653" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:26.656">Delete All Sessions</msg>
<status endtime="20170928 17:01:26.656" starttime="20170928 17:01:26.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:26.656">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:26.656" starttime="20170928 17:01:24.206" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:26.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:26.657" starttime="20170928 17:01:26.657" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.658">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:26.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:26.658">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:01:26.658" starttime="20170928 17:01:26.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:26.658">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:01:26.658" starttime="20170928 17:01:24.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:26.658">${host_state} = Running</msg>
<status endtime="20170928 17:01:26.658" starttime="20170928 17:01:24.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:01:26.659" starttime="20170928 17:01:26.659" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:26.663">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:26.664" starttime="20170928 17:01:26.663" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:26.664" starttime="20170928 17:01:26.664" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.665">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:26.665" starttime="20170928 17:01:26.665" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.666">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:26.666" starttime="20170928 17:01:26.665" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:26.897">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:26.897" starttime="20170928 17:01:26.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:26.897">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:26.898">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:26.898" starttime="20170928 17:01:26.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:26.898">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:26.899" starttime="20170928 17:01:26.898" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:26.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:26.899" starttime="20170928 17:01:26.899" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.899" starttime="20170928 17:01:26.662" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.899" starttime="20170928 17:01:26.662" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.900" starttime="20170928 17:01:26.661" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.900">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:01:26.900" starttime="20170928 17:01:26.900" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:26.902">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:26.902" starttime="20170928 17:01:26.902" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:26.903">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:26.903" starttime="20170928 17:01:26.903" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.903" starttime="20170928 17:01:26.902" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.904" starttime="20170928 17:01:26.901" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:26.904" starttime="20170928 17:01:26.900" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:27.447">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:27.448">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:27.448" starttime="20170928 17:01:26.904" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:27.450">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:27.450" starttime="20170928 17:01:27.449" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:27.451">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:27.451" starttime="20170928 17:01:27.451" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:27.451" starttime="20170928 17:01:27.450" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:27.451" starttime="20170928 17:01:27.448" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:27.451" starttime="20170928 17:01:27.448" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:27.452">Delete All Sessions</msg>
<status endtime="20170928 17:01:27.452" starttime="20170928 17:01:27.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:27.452">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:27.452" starttime="20170928 17:01:26.661" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:27.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:27.453" starttime="20170928 17:01:27.452" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:27.453">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:27.453">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:27.453">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 17:01:27.453" starttime="20170928 17:01:27.453" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:27.454">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:01:27.454" starttime="20170928 17:01:26.660" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:27.454">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:01:27.454" starttime="20170928 17:01:26.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:27.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:27.455" starttime="20170928 17:01:27.454" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:27.458">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:27.459" starttime="20170928 17:01:27.458" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:27.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:27.459" starttime="20170928 17:01:27.459" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:27.460">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:27.460" starttime="20170928 17:01:27.460" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:27.461">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:27.461" starttime="20170928 17:01:27.460" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:28.437">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:28.437" starttime="20170928 17:01:27.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:28.437">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:28.437">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:28.437" starttime="20170928 17:01:27.461" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:28.438">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:28.438" starttime="20170928 17:01:28.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:28.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:28.438" starttime="20170928 17:01:28.438" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.439" starttime="20170928 17:01:27.458" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.439" starttime="20170928 17:01:27.457" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.439" starttime="20170928 17:01:27.457" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:28.439">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 17:01:28.439" starttime="20170928 17:01:28.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:28.441">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:28.442" starttime="20170928 17:01:28.441" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:28.443">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:28.443" starttime="20170928 17:01:28.442" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.443" starttime="20170928 17:01:28.442" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.443" starttime="20170928 17:01:28.440" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.443" starttime="20170928 17:01:28.440" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:28.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:28.758">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:28.758" starttime="20170928 17:01:28.443" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:28.759">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:28.759" starttime="20170928 17:01:28.759" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:28.760">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:28.760" starttime="20170928 17:01:28.760" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.761" starttime="20170928 17:01:28.760" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.761" starttime="20170928 17:01:28.758" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:28.761" starttime="20170928 17:01:28.758" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:28.761">Delete All Sessions</msg>
<status endtime="20170928 17:01:28.761" starttime="20170928 17:01:28.761" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:28.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:28.761" starttime="20170928 17:01:27.456" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:28.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:28.762" starttime="20170928 17:01:28.762" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:28.763">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:28.763">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:28.763">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 17:01:28.763" starttime="20170928 17:01:28.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:28.763">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:28.763" starttime="20170928 17:01:27.455" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:28.764">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:28.764" starttime="20170928 17:01:27.455" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:28.764">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:01:28.764">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:28.764" starttime="20170928 17:01:28.764" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:28.765" starttime="20170928 17:01:26.659" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:28.765" starttime="20170928 17:01:20.870" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:38.770">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:38.770" starttime="20170928 17:01:38.769" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:38.771">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:38.771" starttime="20170928 17:01:38.770" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:38.771">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:38.771" starttime="20170928 17:01:38.771" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:38.772">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:38.772" starttime="20170928 17:01:38.771" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:39.069" starttime="20170928 17:01:38.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.069">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:39.069">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.069" starttime="20170928 17:01:38.772" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.070">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.070" starttime="20170928 17:01:39.070" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.071" starttime="20170928 17:01:39.070" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.071" starttime="20170928 17:01:38.769" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.071" starttime="20170928 17:01:38.768" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.071" starttime="20170928 17:01:38.768" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.072">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:01:39.072" starttime="20170928 17:01:39.071" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.074">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:39.074" starttime="20170928 17:01:39.073" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.075">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:39.075" starttime="20170928 17:01:39.075" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.075" starttime="20170928 17:01:39.074" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.075" starttime="20170928 17:01:39.072" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.075" starttime="20170928 17:01:39.072" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.146">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:39.146">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.146" starttime="20170928 17:01:39.075" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.148">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:39.148" starttime="20170928 17:01:39.147" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.149">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:39.149" starttime="20170928 17:01:39.149" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.150" starttime="20170928 17:01:39.149" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.150" starttime="20170928 17:01:39.147" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.150" starttime="20170928 17:01:39.147" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:39.150">Delete All Sessions</msg>
<status endtime="20170928 17:01:39.150" starttime="20170928 17:01:39.150" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.150">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.150" starttime="20170928 17:01:38.767" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.151" starttime="20170928 17:01:39.151" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.152">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:39.152">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:39.152">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:01:39.152" starttime="20170928 17:01:39.151" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.152">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:01:39.152" starttime="20170928 17:01:38.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.153">${power_state} = On</msg>
<status endtime="20170928 17:01:39.153" starttime="20170928 17:01:38.766" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:01:39.153" starttime="20170928 17:01:39.153" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.153" starttime="20170928 17:01:38.766" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.157">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:39.158" starttime="20170928 17:01:39.157" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:39.158" starttime="20170928 17:01:39.158" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.159">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:39.159" starttime="20170928 17:01:39.159" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.160">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:39.160" starttime="20170928 17:01:39.159" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.343">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:39.343" starttime="20170928 17:01:39.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.343">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:39.343">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.343" starttime="20170928 17:01:39.160" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.344">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.344" starttime="20170928 17:01:39.343" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.345">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.345" starttime="20170928 17:01:39.344" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.345" starttime="20170928 17:01:39.156" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.345" starttime="20170928 17:01:39.156" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.345" starttime="20170928 17:01:39.155" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.346">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:01:39.346" starttime="20170928 17:01:39.345" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.348">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:39.348" starttime="20170928 17:01:39.347" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.350">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:39.350" starttime="20170928 17:01:39.350" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.350" starttime="20170928 17:01:39.349" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.351" starttime="20170928 17:01:39.346" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.351" starttime="20170928 17:01:39.346" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.498">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:39.498">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.498" starttime="20170928 17:01:39.351" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.500">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:39.500" starttime="20170928 17:01:39.499" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.501">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:39.504" starttime="20170928 17:01:39.500" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.504" starttime="20170928 17:01:39.500" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.504" starttime="20170928 17:01:39.499" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.504" starttime="20170928 17:01:39.498" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:39.505">Delete All Sessions</msg>
<status endtime="20170928 17:01:39.505" starttime="20170928 17:01:39.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.505" starttime="20170928 17:01:39.154" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.506" starttime="20170928 17:01:39.505" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.506">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:39.506">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:39.506">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:01:39.507" starttime="20170928 17:01:39.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.507">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:01:39.507" starttime="20170928 17:01:39.154" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.507">${host_state} = Running</msg>
<status endtime="20170928 17:01:39.507" starttime="20170928 17:01:39.153" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:01:39.508" starttime="20170928 17:01:39.507" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.512">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:39.512" starttime="20170928 17:01:39.512" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:39.513" starttime="20170928 17:01:39.513" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.514">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:39.514" starttime="20170928 17:01:39.513" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.514">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:39.514" starttime="20170928 17:01:39.514" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.709">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:39.709" starttime="20170928 17:01:39.515" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.709">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:39.709">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.709" starttime="20170928 17:01:39.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.710">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.710" starttime="20170928 17:01:39.709" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.711" starttime="20170928 17:01:39.710" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.711" starttime="20170928 17:01:39.511" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.711" starttime="20170928 17:01:39.511" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.711" starttime="20170928 17:01:39.510" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.712">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:01:39.712" starttime="20170928 17:01:39.711" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.714">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:39.714" starttime="20170928 17:01:39.713" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.715">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:39.715" starttime="20170928 17:01:39.715" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.715" starttime="20170928 17:01:39.714" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.715" starttime="20170928 17:01:39.713" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.715" starttime="20170928 17:01:39.712" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.802">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:39.803">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.803" starttime="20170928 17:01:39.715" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.805">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:39.805" starttime="20170928 17:01:39.804" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.805">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:39.806" starttime="20170928 17:01:39.805" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.806" starttime="20170928 17:01:39.805" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.806" starttime="20170928 17:01:39.803" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:39.806" starttime="20170928 17:01:39.803" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:39.806">Delete All Sessions</msg>
<status endtime="20170928 17:01:39.806" starttime="20170928 17:01:39.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.806">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:39.807" starttime="20170928 17:01:39.509" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:39.807" starttime="20170928 17:01:39.807" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:39.808">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:39.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:39.808">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170928 17:01:39.809" starttime="20170928 17:01:39.808" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.809">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:01:39.809" starttime="20170928 17:01:39.509" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:39.809">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:01:39.809" starttime="20170928 17:01:39.508" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:39.810">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:01:39.810">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170928 17:01:39.810" starttime="20170928 17:01:39.810" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:39.811" starttime="20170928 17:01:39.508" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:39.811" starttime="20170928 17:01:38.765" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:49.816">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:49.817" starttime="20170928 17:01:49.816" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:49.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:49.817" starttime="20170928 17:01:49.817" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:49.818">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:49.818" starttime="20170928 17:01:49.818" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:49.819">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:49.819" starttime="20170928 17:01:49.818" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:51.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:51.487" starttime="20170928 17:01:49.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:51.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:51.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:51.488" starttime="20170928 17:01:49.819" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:51.488">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:51.488" starttime="20170928 17:01:51.488" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:51.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:51.489" starttime="20170928 17:01:51.489" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.489" starttime="20170928 17:01:49.815" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.490" starttime="20170928 17:01:49.815" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.490" starttime="20170928 17:01:49.814" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.490">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:01:51.490" starttime="20170928 17:01:51.490" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.492">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:51.492" starttime="20170928 17:01:51.492" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:51.493">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:51.493" starttime="20170928 17:01:51.493" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.494" starttime="20170928 17:01:51.492" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.494" starttime="20170928 17:01:51.491" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.494" starttime="20170928 17:01:51.491" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.750">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:51.750">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:51.750" starttime="20170928 17:01:51.494" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.752">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:51.752" starttime="20170928 17:01:51.752" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:51.753">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:51.754" starttime="20170928 17:01:51.753" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.754" starttime="20170928 17:01:51.752" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.754" starttime="20170928 17:01:51.751" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.754" starttime="20170928 17:01:51.750" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:51.754">Delete All Sessions</msg>
<status endtime="20170928 17:01:51.754" starttime="20170928 17:01:51.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:51.754">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:51.755" starttime="20170928 17:01:49.813" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:51.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:51.755" starttime="20170928 17:01:51.755" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.756">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:51.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:51.756">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:01:51.756" starttime="20170928 17:01:51.755" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:51.756">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:01:51.756" starttime="20170928 17:01:49.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:51.757">${power_state} = On</msg>
<status endtime="20170928 17:01:51.757" starttime="20170928 17:01:49.812" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:01:51.757" starttime="20170928 17:01:51.757" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:51.757" starttime="20170928 17:01:49.812" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:51.761">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:51.761" starttime="20170928 17:01:51.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:51.763" starttime="20170928 17:01:51.762" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.764">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:51.765" starttime="20170928 17:01:51.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:51.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:51.765" starttime="20170928 17:01:51.765" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:52.531">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:52.531" starttime="20170928 17:01:51.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:52.531">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:52.531">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:52.531" starttime="20170928 17:01:51.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:52.532">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:52.532" starttime="20170928 17:01:52.531" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:52.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:52.533" starttime="20170928 17:01:52.532" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.533" starttime="20170928 17:01:51.760" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.533" starttime="20170928 17:01:51.760" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.533" starttime="20170928 17:01:51.759" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.533">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:01:52.534" starttime="20170928 17:01:52.533" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.536">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:52.536" starttime="20170928 17:01:52.535" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:52.537">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:52.537" starttime="20170928 17:01:52.537" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.537" starttime="20170928 17:01:52.536" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.537" starttime="20170928 17:01:52.534" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.537" starttime="20170928 17:01:52.534" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:52.817">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:52.817" starttime="20170928 17:01:52.537" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:52.819" starttime="20170928 17:01:52.818" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:52.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:52.820" starttime="20170928 17:01:52.820" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.820" starttime="20170928 17:01:52.819" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.820" starttime="20170928 17:01:52.818" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:52.820" starttime="20170928 17:01:52.817" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:52.821">Delete All Sessions</msg>
<status endtime="20170928 17:01:52.821" starttime="20170928 17:01:52.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:52.821">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:52.821" starttime="20170928 17:01:51.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:52.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:52.822" starttime="20170928 17:01:52.821" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:52.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:52.822">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:01:52.822" starttime="20170928 17:01:52.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:52.823">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:01:52.823" starttime="20170928 17:01:51.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:52.823">${host_state} = Running</msg>
<status endtime="20170928 17:01:52.823" starttime="20170928 17:01:51.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:01:52.824" starttime="20170928 17:01:52.823" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:52.828">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:52.828" starttime="20170928 17:01:52.827" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:52.829" starttime="20170928 17:01:52.828" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.830">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:52.830" starttime="20170928 17:01:52.829" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:52.831">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:52.831" starttime="20170928 17:01:52.830" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.481">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:53.482" starttime="20170928 17:01:52.832" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:53.482">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:53.482">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:53.482" starttime="20170928 17:01:52.831" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.482">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:53.482" starttime="20170928 17:01:53.482" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:53.483" starttime="20170928 17:01:53.483" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.483" starttime="20170928 17:01:52.827" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.483" starttime="20170928 17:01:52.826" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.484" starttime="20170928 17:01:52.826" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.484">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:01:53.484" starttime="20170928 17:01:53.484" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.486">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:53.486" starttime="20170928 17:01:53.486" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.487">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:01:53.487" starttime="20170928 17:01:53.487" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.487" starttime="20170928 17:01:53.486" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.487" starttime="20170928 17:01:53.485" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.488" starttime="20170928 17:01:53.484" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.873">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:53.873">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:53.873" starttime="20170928 17:01:53.488" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.875">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:53.875" starttime="20170928 17:01:53.874" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.876">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:53.876" starttime="20170928 17:01:53.876" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.876" starttime="20170928 17:01:53.875" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.876" starttime="20170928 17:01:53.874" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:53.876" starttime="20170928 17:01:53.873" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:53.877">Delete All Sessions</msg>
<status endtime="20170928 17:01:53.877" starttime="20170928 17:01:53.876" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:53.877">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:53.877" starttime="20170928 17:01:52.825" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:53.878" starttime="20170928 17:01:53.877" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.878">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:53.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:53.878">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 17:01:53.878" starttime="20170928 17:01:53.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:53.879">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:01:53.879" starttime="20170928 17:01:52.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:53.879">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:01:53.879" starttime="20170928 17:01:52.824" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.879">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:53.879" starttime="20170928 17:01:53.879" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:53.884">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:01:53.884" starttime="20170928 17:01:53.883" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.885">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:01:53.885" starttime="20170928 17:01:53.884" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.885">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:01:53.885" starttime="20170928 17:01:53.885" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:53.886">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:01:53.886" starttime="20170928 17:01:53.886" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:54.864">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:01:54.864" starttime="20170928 17:01:53.887" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:54.865">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:01:54.865">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:54.865" starttime="20170928 17:01:53.886" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:54.865">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:54.865" starttime="20170928 17:01:54.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:54.866">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:54.866" starttime="20170928 17:01:54.866" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:54.866" starttime="20170928 17:01:53.882" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:54.866" starttime="20170928 17:01:53.882" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:54.866" starttime="20170928 17:01:53.881" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:54.867">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 17:01:54.867" starttime="20170928 17:01:54.867" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:54.869">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:54.869" starttime="20170928 17:01:54.868" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:54.870">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:01:54.870" starttime="20170928 17:01:54.870" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:54.870" starttime="20170928 17:01:54.869" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:54.870" starttime="20170928 17:01:54.868" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:54.870" starttime="20170928 17:01:54.867" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:55.147">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:01:55.147">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:55.147" starttime="20170928 17:01:54.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:55.149">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:55.149" starttime="20170928 17:01:55.148" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:55.150">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:01:55.150" starttime="20170928 17:01:55.150" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:55.150" starttime="20170928 17:01:55.149" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:55.150" starttime="20170928 17:01:55.148" status="PASS"></status>
</kw>
<status endtime="20170928 17:01:55.151" starttime="20170928 17:01:55.147" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:01:55.151">Delete All Sessions</msg>
<status endtime="20170928 17:01:55.151" starttime="20170928 17:01:55.151" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:55.151">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:01:55.151" starttime="20170928 17:01:53.881" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:55.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:01:55.152" starttime="20170928 17:01:55.151" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:01:55.152">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:01:55.153">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:01:55.153">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 17:01:55.153" starttime="20170928 17:01:55.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:55.153">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:55.153" starttime="20170928 17:01:53.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:01:55.153">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:55.153" starttime="20170928 17:01:53.880" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:01:55.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:01:55.154">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:01:55.154" starttime="20170928 17:01:55.154" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:55.154" starttime="20170928 17:01:52.824" status="FAIL"></status>
</kw>
<status endtime="20170928 17:01:55.154" starttime="20170928 17:01:49.811" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:05.160">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:05.160" starttime="20170928 17:02:05.159" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:05.161">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:05.161" starttime="20170928 17:02:05.160" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:05.161">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:05.161" starttime="20170928 17:02:05.161" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:05.162">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:05.162" starttime="20170928 17:02:05.162" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:06.805">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:06.805" starttime="20170928 17:02:05.163" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:06.805">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:06.805">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:06.805" starttime="20170928 17:02:05.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:06.806">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:06.806" starttime="20170928 17:02:06.806" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:06.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:06.807" starttime="20170928 17:02:06.806" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:06.807" starttime="20170928 17:02:05.159" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:06.807" starttime="20170928 17:02:05.158" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:06.807" starttime="20170928 17:02:05.158" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:06.808">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:02:06.808" starttime="20170928 17:02:06.807" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:06.810">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:06.810" starttime="20170928 17:02:06.809" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:06.811">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:06.811" starttime="20170928 17:02:06.811" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:06.811" starttime="20170928 17:02:06.810" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:06.811" starttime="20170928 17:02:06.809" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:06.811" starttime="20170928 17:02:06.808" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.101">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:11.102">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:11.102" starttime="20170928 17:02:06.812" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.104">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:11.104" starttime="20170928 17:02:11.103" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:11.105">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:11.105" starttime="20170928 17:02:11.105" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.105" starttime="20170928 17:02:11.104" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.105" starttime="20170928 17:02:11.103" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.105" starttime="20170928 17:02:11.102" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:11.106">Delete All Sessions</msg>
<status endtime="20170928 17:02:11.106" starttime="20170928 17:02:11.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:11.106">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:11.106" starttime="20170928 17:02:05.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:11.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:11.107" starttime="20170928 17:02:11.106" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.107">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:11.107">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:11.107">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:02:11.107" starttime="20170928 17:02:11.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:11.108">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:02:11.108" starttime="20170928 17:02:05.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:11.108">${power_state} = On</msg>
<status endtime="20170928 17:02:11.108" starttime="20170928 17:02:05.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:02:11.109" starttime="20170928 17:02:11.109" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.109" starttime="20170928 17:02:05.155" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:11.113">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:11.113" starttime="20170928 17:02:11.112" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.114">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:11.114" starttime="20170928 17:02:11.114" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.115">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:11.115" starttime="20170928 17:02:11.114" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.115">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:11.115" starttime="20170928 17:02:11.115" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:11.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:11.922" starttime="20170928 17:02:11.116" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:11.922">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:11.922">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:11.922" starttime="20170928 17:02:11.116" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:11.923">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:11.923" starttime="20170928 17:02:11.923" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:11.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:11.924" starttime="20170928 17:02:11.923" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.924" starttime="20170928 17:02:11.112" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.924" starttime="20170928 17:02:11.111" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.924" starttime="20170928 17:02:11.111" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.925">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:02:11.925" starttime="20170928 17:02:11.925" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:11.927">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:11.927" starttime="20170928 17:02:11.926" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:11.928">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:11.928" starttime="20170928 17:02:11.928" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.928" starttime="20170928 17:02:11.927" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.928" starttime="20170928 17:02:11.926" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:11.928" starttime="20170928 17:02:11.925" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:16.617">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:16.617">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:16.617" starttime="20170928 17:02:11.929" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:16.619">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:16.619" starttime="20170928 17:02:16.619" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:16.620">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:16.620" starttime="20170928 17:02:16.620" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:16.620" starttime="20170928 17:02:16.619" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:16.621" starttime="20170928 17:02:16.618" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:16.621" starttime="20170928 17:02:16.618" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:16.621">Delete All Sessions</msg>
<status endtime="20170928 17:02:16.621" starttime="20170928 17:02:16.621" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:16.621">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:16.621" starttime="20170928 17:02:11.110" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:16.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:16.622" starttime="20170928 17:02:16.622" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:16.623">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:16.623">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:16.623">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:02:16.623" starttime="20170928 17:02:16.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:16.623">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:02:16.623" starttime="20170928 17:02:11.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:16.623">${host_state} = Running</msg>
<status endtime="20170928 17:02:16.624" starttime="20170928 17:02:11.109" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:02:16.624" starttime="20170928 17:02:16.624" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:16.628">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:16.629" starttime="20170928 17:02:16.628" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:16.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:16.629" starttime="20170928 17:02:16.629" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:16.630">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:16.630" starttime="20170928 17:02:16.630" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:16.631">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:16.631" starttime="20170928 17:02:16.630" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:17.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:17.353" starttime="20170928 17:02:16.631" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:17.353">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:17.353">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:17.353" starttime="20170928 17:02:16.631" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:17.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:17.353" starttime="20170928 17:02:17.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:17.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:17.354" starttime="20170928 17:02:17.354" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:17.354" starttime="20170928 17:02:16.628" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:17.354" starttime="20170928 17:02:16.627" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:17.355" starttime="20170928 17:02:16.627" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:17.355">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:02:17.355" starttime="20170928 17:02:17.355" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:17.357">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:02:17.357" starttime="20170928 17:02:17.357" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:17.358">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:02:17.359" starttime="20170928 17:02:17.358" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:17.359" starttime="20170928 17:02:17.358" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:17.359" starttime="20170928 17:02:17.356" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:17.359" starttime="20170928 17:02:17.356" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:18.597">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:18.597">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:18.597" starttime="20170928 17:02:17.359" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:18.599">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:18.600" starttime="20170928 17:02:18.599" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:18.600">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:18.601" starttime="20170928 17:02:18.600" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:18.601" starttime="20170928 17:02:18.600" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:18.601" starttime="20170928 17:02:18.598" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:18.601" starttime="20170928 17:02:18.598" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:18.601">Delete All Sessions</msg>
<status endtime="20170928 17:02:18.601" starttime="20170928 17:02:18.601" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:18.602">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:18.602" starttime="20170928 17:02:16.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:18.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:18.603" starttime="20170928 17:02:18.602" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:18.604">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:18.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:18.604">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 17:02:18.604" starttime="20170928 17:02:18.603" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:18.604">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:02:18.604" starttime="20170928 17:02:16.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:18.605">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:02:18.605" starttime="20170928 17:02:16.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:18.605">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:18.606" starttime="20170928 17:02:18.605" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:18.612">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:18.613" starttime="20170928 17:02:18.612" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:18.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:18.613" starttime="20170928 17:02:18.613" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:18.614">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:18.614" starttime="20170928 17:02:18.614" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:18.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:18.615" starttime="20170928 17:02:18.614" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:19.476">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:19.476" starttime="20170928 17:02:18.615" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:19.476">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:19.476">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:19.476" starttime="20170928 17:02:18.615" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:19.477">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:19.477" starttime="20170928 17:02:19.477" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:19.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:19.478" starttime="20170928 17:02:19.477" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:19.478" starttime="20170928 17:02:18.612" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:19.478" starttime="20170928 17:02:18.609" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:19.478" starttime="20170928 17:02:18.608" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:19.479">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 17:02:19.479" starttime="20170928 17:02:19.478" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:19.481">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:19.481" starttime="20170928 17:02:19.480" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:19.483">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:19.483" starttime="20170928 17:02:19.483" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:19.483" starttime="20170928 17:02:19.482" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:19.483" starttime="20170928 17:02:19.479" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:19.483" starttime="20170928 17:02:19.479" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:21.070">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:21.070">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:21.070" starttime="20170928 17:02:19.483" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:21.072">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:21.072" starttime="20170928 17:02:21.071" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:21.073">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:21.073" starttime="20170928 17:02:21.073" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:21.073" starttime="20170928 17:02:21.072" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:21.073" starttime="20170928 17:02:21.071" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:21.073" starttime="20170928 17:02:21.070" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:21.074">Delete All Sessions</msg>
<status endtime="20170928 17:02:21.074" starttime="20170928 17:02:21.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:21.074">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:21.074" starttime="20170928 17:02:18.607" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:21.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:21.075" starttime="20170928 17:02:21.074" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:21.075">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:21.075">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:21.075">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 17:02:21.076" starttime="20170928 17:02:21.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:21.076">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:02:21.076" starttime="20170928 17:02:18.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:21.076">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:02:21.076" starttime="20170928 17:02:18.606" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:21.077">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:02:21.077">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:02:21.077" starttime="20170928 17:02:21.076" status="FAIL"></status>
</kw>
<status endtime="20170928 17:02:21.077" starttime="20170928 17:02:16.624" status="FAIL"></status>
</kw>
<status endtime="20170928 17:02:21.077" starttime="20170928 17:02:05.155" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:31.083">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:31.084" starttime="20170928 17:02:31.083" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:31.085">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:31.085" starttime="20170928 17:02:31.084" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:31.086">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:31.086" starttime="20170928 17:02:31.085" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:31.087">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:31.087" starttime="20170928 17:02:31.086" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:31.984">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:31.984" starttime="20170928 17:02:31.088" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:31.984">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:31.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:31.985" starttime="20170928 17:02:31.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:31.985">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:31.985" starttime="20170928 17:02:31.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:31.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:31.986" starttime="20170928 17:02:31.986" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:31.986" starttime="20170928 17:02:31.081" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:31.986" starttime="20170928 17:02:31.081" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:31.986" starttime="20170928 17:02:31.080" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:31.987">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:02:31.987" starttime="20170928 17:02:31.987" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:31.989">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:31.989" starttime="20170928 17:02:31.988" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:31.990">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:31.990" starttime="20170928 17:02:31.990" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:31.990" starttime="20170928 17:02:31.989" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:31.991" starttime="20170928 17:02:31.988" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:31.991" starttime="20170928 17:02:31.987" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:33.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:33.929">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:33.929" starttime="20170928 17:02:31.991" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:33.931">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:33.931" starttime="20170928 17:02:33.931" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:33.933">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:33.933" starttime="20170928 17:02:33.932" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:33.933" starttime="20170928 17:02:33.932" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:33.933" starttime="20170928 17:02:33.930" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:33.933" starttime="20170928 17:02:33.930" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:33.933">Delete All Sessions</msg>
<status endtime="20170928 17:02:33.934" starttime="20170928 17:02:33.933" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:33.934">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:33.934" starttime="20170928 17:02:31.080" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:33.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:33.935" starttime="20170928 17:02:33.934" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:33.935">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:33.935">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:33.935">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:02:33.935" starttime="20170928 17:02:33.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:33.936">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:02:33.936" starttime="20170928 17:02:31.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:33.936">${power_state} = On</msg>
<status endtime="20170928 17:02:33.936" starttime="20170928 17:02:31.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:02:33.937" starttime="20170928 17:02:33.936" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:33.937" starttime="20170928 17:02:31.078" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:33.940">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:33.941" starttime="20170928 17:02:33.940" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:33.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:33.941" starttime="20170928 17:02:33.941" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:33.942">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:33.942" starttime="20170928 17:02:33.941" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:33.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:33.943" starttime="20170928 17:02:33.942" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:35.183">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:35.183" starttime="20170928 17:02:33.943" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:35.183">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:35.184">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:35.184" starttime="20170928 17:02:33.943" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:35.184">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:35.184" starttime="20170928 17:02:35.184" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:35.185">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:35.185" starttime="20170928 17:02:35.185" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.185" starttime="20170928 17:02:33.939" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.185" starttime="20170928 17:02:33.939" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.185" starttime="20170928 17:02:33.938" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.186">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:02:35.186" starttime="20170928 17:02:35.186" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.188">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:35.188" starttime="20170928 17:02:35.187" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:35.189">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:35.189" starttime="20170928 17:02:35.189" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.190" starttime="20170928 17:02:35.189" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.190" starttime="20170928 17:02:35.187" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.190" starttime="20170928 17:02:35.186" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.858">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:35.858">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:35.859" starttime="20170928 17:02:35.190" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.860">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:35.860" starttime="20170928 17:02:35.860" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:35.861">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:35.861" starttime="20170928 17:02:35.861" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.861" starttime="20170928 17:02:35.861" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.862" starttime="20170928 17:02:35.859" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:35.862" starttime="20170928 17:02:35.859" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:35.862">Delete All Sessions</msg>
<status endtime="20170928 17:02:35.862" starttime="20170928 17:02:35.862" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:35.862">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:35.862" starttime="20170928 17:02:33.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:35.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:35.863" starttime="20170928 17:02:35.863" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.864">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:35.864">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:35.864">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:02:35.864" starttime="20170928 17:02:35.863" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:35.864">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:02:35.864" starttime="20170928 17:02:33.937" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:35.864">${host_state} = Running</msg>
<status endtime="20170928 17:02:35.864" starttime="20170928 17:02:33.937" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:02:35.865" starttime="20170928 17:02:35.865" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:35.869">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:35.869" starttime="20170928 17:02:35.869" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:35.870" starttime="20170928 17:02:35.869" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.870">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:35.870" starttime="20170928 17:02:35.870" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:35.871">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:35.871" starttime="20170928 17:02:35.871" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:36.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:36.486" starttime="20170928 17:02:35.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:36.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:36.486">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:36.487" starttime="20170928 17:02:35.871" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:36.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:36.487" starttime="20170928 17:02:36.487" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:36.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:36.488" starttime="20170928 17:02:36.488" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:36.488" starttime="20170928 17:02:35.868" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:36.488" starttime="20170928 17:02:35.868" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:36.488" starttime="20170928 17:02:35.867" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:36.489">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:02:36.489" starttime="20170928 17:02:36.489" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:36.491">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:02:36.491" starttime="20170928 17:02:36.490" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:36.492">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:02:36.492" starttime="20170928 17:02:36.492" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:36.492" starttime="20170928 17:02:36.491" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:36.492" starttime="20170928 17:02:36.490" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:36.492" starttime="20170928 17:02:36.489" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:37.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:37.613">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:37.613" starttime="20170928 17:02:36.493" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:37.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:37.615" starttime="20170928 17:02:37.614" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:37.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:37.616" starttime="20170928 17:02:37.616" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:37.616" starttime="20170928 17:02:37.615" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:37.616" starttime="20170928 17:02:37.614" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:37.616" starttime="20170928 17:02:37.613" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:37.617">Delete All Sessions</msg>
<status endtime="20170928 17:02:37.617" starttime="20170928 17:02:37.617" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:37.617">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:37.617" starttime="20170928 17:02:35.866" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:37.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:37.618" starttime="20170928 17:02:37.617" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:37.618">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:37.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:37.619">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 17:02:37.619" starttime="20170928 17:02:37.618" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:37.619">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:02:37.619" starttime="20170928 17:02:35.866" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:37.619">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:02:37.619" starttime="20170928 17:02:35.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:37.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:37.620" starttime="20170928 17:02:37.619" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:37.624">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:37.624" starttime="20170928 17:02:37.623" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:37.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:37.625" starttime="20170928 17:02:37.624" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:37.625">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:37.625" starttime="20170928 17:02:37.625" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:37.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:37.626" starttime="20170928 17:02:37.626" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:38.013">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:38.013" starttime="20170928 17:02:37.627" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:38.013">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:38.013">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:38.013" starttime="20170928 17:02:37.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:38.014">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:38.014" starttime="20170928 17:02:38.013" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:38.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:38.015" starttime="20170928 17:02:38.014" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.015" starttime="20170928 17:02:37.623" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.015" starttime="20170928 17:02:37.622" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.015" starttime="20170928 17:02:37.622" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:38.016">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 17:02:38.016" starttime="20170928 17:02:38.015" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:38.018">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:38.018" starttime="20170928 17:02:38.017" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:38.019">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:38.019" starttime="20170928 17:02:38.018" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.019" starttime="20170928 17:02:38.018" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.019" starttime="20170928 17:02:38.016" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.019" starttime="20170928 17:02:38.016" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:38.269">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:38.269">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:38.269" starttime="20170928 17:02:38.019" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:38.271">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:38.271" starttime="20170928 17:02:38.270" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:38.272">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:38.272" starttime="20170928 17:02:38.271" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.272" starttime="20170928 17:02:38.271" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.272" starttime="20170928 17:02:38.270" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:38.272" starttime="20170928 17:02:38.269" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:38.273">Delete All Sessions</msg>
<status endtime="20170928 17:02:38.273" starttime="20170928 17:02:38.273" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:38.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:38.273" starttime="20170928 17:02:37.621" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:38.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:38.274" starttime="20170928 17:02:38.273" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:38.274">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:38.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:38.274">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive'}</msg>
<status endtime="20170928 17:02:38.274" starttime="20170928 17:02:38.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:38.275">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:02:38.275" starttime="20170928 17:02:37.620" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:38.275">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:02:38.275" starttime="20170928 17:02:37.620" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:38.276">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170928 17:02:38.276">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status endtime="20170928 17:02:38.276" starttime="20170928 17:02:38.275" status="FAIL"></status>
</kw>
<status endtime="20170928 17:02:38.276" starttime="20170928 17:02:35.865" status="FAIL"></status>
</kw>
<status endtime="20170928 17:02:38.276" starttime="20170928 17:02:31.078" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:48.281">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:48.282" starttime="20170928 17:02:48.281" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:48.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:48.282" starttime="20170928 17:02:48.282" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:48.283">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:48.283" starttime="20170928 17:02:48.282" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:48.283">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:48.284" starttime="20170928 17:02:48.283" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:48.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:48.720" starttime="20170928 17:02:48.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:48.720">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:48.720">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:48.720" starttime="20170928 17:02:48.284" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:48.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:48.720" starttime="20170928 17:02:48.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:48.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:48.721" starttime="20170928 17:02:48.721" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:48.721" starttime="20170928 17:02:48.280" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:48.721" starttime="20170928 17:02:48.280" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:48.721" starttime="20170928 17:02:48.279" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:48.722">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170928 17:02:48.722" starttime="20170928 17:02:48.722" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:48.724">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:48.724" starttime="20170928 17:02:48.723" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:48.726">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:48.726" starttime="20170928 17:02:48.726" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:48.726" starttime="20170928 17:02:48.725" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:48.726" starttime="20170928 17:02:48.723" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:48.726" starttime="20170928 17:02:48.722" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:50.787">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:50.787">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:50.787" starttime="20170928 17:02:48.727" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:50.789">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:50.789" starttime="20170928 17:02:50.789" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:50.790">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:50.790" starttime="20170928 17:02:50.790" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:50.790" starttime="20170928 17:02:50.789" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:50.790" starttime="20170928 17:02:50.788" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:50.790" starttime="20170928 17:02:50.788" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:50.791">Delete All Sessions</msg>
<status endtime="20170928 17:02:50.791" starttime="20170928 17:02:50.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:50.791">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:50.791" starttime="20170928 17:02:48.279" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:50.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:50.792" starttime="20170928 17:02:50.791" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:50.792">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:50.792">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:50.793">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170928 17:02:50.793" starttime="20170928 17:02:50.792" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:50.793">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170928 17:02:50.793" starttime="20170928 17:02:48.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:50.793">${power_state} = On</msg>
<status endtime="20170928 17:02:50.793" starttime="20170928 17:02:48.278" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170928 17:02:50.794" starttime="20170928 17:02:50.794" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:50.794" starttime="20170928 17:02:48.277" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:50.798">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:50.798" starttime="20170928 17:02:50.797" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:50.799">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:50.799" starttime="20170928 17:02:50.799" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:50.800">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:50.800" starttime="20170928 17:02:50.799" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:50.800">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:50.800" starttime="20170928 17:02:50.800" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:51.196">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:51.196" starttime="20170928 17:02:50.801" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:51.196">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:51.196">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:51.196" starttime="20170928 17:02:50.801" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:51.197">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:51.197" starttime="20170928 17:02:51.197" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:51.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:51.198" starttime="20170928 17:02:51.197" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.198" starttime="20170928 17:02:50.797" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.198" starttime="20170928 17:02:50.796" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.198" starttime="20170928 17:02:50.796" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.199">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170928 17:02:51.199" starttime="20170928 17:02:51.198" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.201">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:51.201" starttime="20170928 17:02:51.200" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:51.202">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170928 17:02:51.202" starttime="20170928 17:02:51.202" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.202" starttime="20170928 17:02:51.201" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.202" starttime="20170928 17:02:51.199" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.202" starttime="20170928 17:02:51.199" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.795">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:02:51.796">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:51.796" starttime="20170928 17:02:51.203" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.797">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:51.797" starttime="20170928 17:02:51.797" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:51.798">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:02:51.798" starttime="20170928 17:02:51.798" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.799" starttime="20170928 17:02:51.798" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.799" starttime="20170928 17:02:51.796" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:51.799" starttime="20170928 17:02:51.796" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:02:51.799">Delete All Sessions</msg>
<status endtime="20170928 17:02:51.799" starttime="20170928 17:02:51.799" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:51.799">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:51.799" starttime="20170928 17:02:50.795" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:51.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:51.800" starttime="20170928 17:02:51.800" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.801">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:02:51.801">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:02:51.801">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170928 17:02:51.801" starttime="20170928 17:02:51.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:51.801">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170928 17:02:51.801" starttime="20170928 17:02:50.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:51.802">${host_state} = Running</msg>
<status endtime="20170928 17:02:51.802" starttime="20170928 17:02:50.794" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170928 17:02:51.802" starttime="20170928 17:02:51.802" status="PASS"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:51.807">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:02:51.807" starttime="20170928 17:02:51.806" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.808">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:02:51.808" starttime="20170928 17:02:51.807" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.808">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:02:51.808" starttime="20170928 17:02:51.808" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:51.809">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:02:51.809" starttime="20170928 17:02:51.809" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:53.770">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:02:53.770" starttime="20170928 17:02:51.810" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:02:53.770">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:02:53.770">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:02:53.770" starttime="20170928 17:02:51.809" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:53.771">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:53.771" starttime="20170928 17:02:53.771" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:53.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:02:53.772" starttime="20170928 17:02:53.771" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:53.772" starttime="20170928 17:02:51.806" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:53.772" starttime="20170928 17:02:51.805" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:53.772" starttime="20170928 17:02:51.805" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:53.773">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170928 17:02:53.773" starttime="20170928 17:02:53.772" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:02:53.775">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:02:53.775" starttime="20170928 17:02:53.775" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:02:53.776">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170928 17:02:53.776" starttime="20170928 17:02:53.776" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:53.777" starttime="20170928 17:02:53.776" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:53.777" starttime="20170928 17:02:53.774" status="PASS"></status>
</kw>
<status endtime="20170928 17:02:53.777" starttime="20170928 17:02:53.773" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:00.490">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:03:00.490">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:03:00.490" starttime="20170928 17:02:53.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:00.492">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:03:00.493" starttime="20170928 17:03:00.492" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:00.494">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:03:00.494" starttime="20170928 17:03:00.493" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:00.494" starttime="20170928 17:03:00.493" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:00.494" starttime="20170928 17:03:00.491" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:00.494" starttime="20170928 17:03:00.491" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:03:00.494">Delete All Sessions</msg>
<status endtime="20170928 17:03:00.494" starttime="20170928 17:03:00.494" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:00.495">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:03:00.495" starttime="20170928 17:02:51.804" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:00.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:03:00.496" starttime="20170928 17:03:00.495" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:00.496">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:03:00.496">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:03:00.496">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart'}</msg>
<status endtime="20170928 17:03:00.496" starttime="20170928 17:03:00.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:00.497">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:03:00.497" starttime="20170928 17:02:51.803" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:00.497">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status endtime="20170928 17:03:00.497" starttime="20170928 17:02:51.803" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:00.498">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:03:00.498" starttime="20170928 17:03:00.497" status="PASS"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:00.502">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170928 17:03:00.502" starttime="20170928 17:03:00.502" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:00.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170928 17:03:00.503" starttime="20170928 17:03:00.503" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:00.503">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170928 17:03:00.504" starttime="20170928 17:03:00.503" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:00.504">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170928 17:03:00.504" starttime="20170928 17:03:00.504" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:01.303">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170928 17:03:01.303" starttime="20170928 17:03:00.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:01.304">${status} = PASS</msg>
<msg level="INFO" timestamp="20170928 17:03:01.304">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:03:01.304" starttime="20170928 17:03:00.504" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:01.305">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:03:01.305" starttime="20170928 17:03:01.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:01.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:03:01.306" starttime="20170928 17:03:01.305" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:01.306" starttime="20170928 17:03:00.501" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:01.306" starttime="20170928 17:03:00.501" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:01.306" starttime="20170928 17:03:00.500" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:01.307">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status endtime="20170928 17:03:01.307" starttime="20170928 17:03:01.306" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:01.309">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:03:01.309" starttime="20170928 17:03:01.308" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:01.310">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status endtime="20170928 17:03:01.310" starttime="20170928 17:03:01.310" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:01.310" starttime="20170928 17:03:01.309" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:01.310" starttime="20170928 17:03:01.308" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:01.310" starttime="20170928 17:03:01.307" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:04.297">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170928 17:03:04.298">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:03:04.298" starttime="20170928 17:03:01.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:04.300">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:03:04.300" starttime="20170928 17:03:04.299" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:04.301">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170928 17:03:04.301" starttime="20170928 17:03:04.300" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:04.301" starttime="20170928 17:03:04.300" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:04.301" starttime="20170928 17:03:04.299" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:04.301" starttime="20170928 17:03:04.298" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170928 17:03:04.301">Delete All Sessions</msg>
<status endtime="20170928 17:03:04.302" starttime="20170928 17:03:04.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:04.302">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170928 17:03:04.302" starttime="20170928 17:03:00.499" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:04.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:03:04.302" starttime="20170928 17:03:04.302" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:04.303">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170928 17:03:04.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170928 17:03:04.303">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete'}</msg>
<status endtime="20170928 17:03:04.303" starttime="20170928 17:03:04.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:04.303">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20170928 17:03:04.303" starttime="20170928 17:03:00.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:04.304">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status endtime="20170928 17:03:04.304" starttime="20170928 17:03:00.498" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:04.304">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170928 17:03:04.304" starttime="20170928 17:03:04.304" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:04.305" starttime="20170928 17:02:51.802" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:04.305" starttime="20170928 17:02:48.277" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:04.305" starttime="20170928 16:59:59.495" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:04.305" starttime="20170928 16:59:58.755" status="PASS"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:34.306">Slept 30 seconds</msg>
<status endtime="20170928 17:03:34.306" starttime="20170928 17:03:04.305" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.307" starttime="20170928 16:59:22.780" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.307" starttime="20170928 16:56:17.648" status="PASS"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170928 17:03:34.309" starttime="20170928 17:03:34.309" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.328">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170928 17:03:34.328" starttime="20170928 17:03:34.310" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.329">${FFDC_DIR_PATH} = /tmp/fspcibld/14408/obmc-robot/logs/20170928165616226845_TestsSecurityTestSsl/20170928165616226845_TestSSLConnection/</msg>
<status endtime="20170928 17:03:34.329" starttime="20170928 17:03:34.328" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170928 17:03:34.330" starttime="20170928 17:03:34.329" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170928 17:03:34.331" starttime="20170928 17:03:34.330" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:34.332" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/14408/obmc-robot/logs"&gt;/tmp/fspcibld/14408/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170928 17:03:34.332" starttime="20170928 17:03:34.331" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:34.333" html="yes">File '&lt;a href="file:///tmp/fspcibld/14408/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14408/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170928 17:03:34.333" starttime="20170928 17:03:34.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.333">${exist} = True</msg>
<status endtime="20170928 17:03:34.333" starttime="20170928 17:03:34.332" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170928 17:03:34.334" starttime="20170928 17:03:34.333" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170928 17:03:34.334" starttime="20170928 17:03:34.334" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.335">${cur_time} = 2017-09-28 17:03:34:334990</msg>
<status endtime="20170928 17:03:34.335" starttime="20170928 17:03:34.335" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.336">${cur_time} = 20170928170334334990</msg>
<status endtime="20170928 17:03:34.336" starttime="20170928 17:03:34.336" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.336">${cur_time} = 20170928170334334990</msg>
<status endtime="20170928 17:03:34.336" starttime="20170928 17:03:34.334" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:34.337" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/14408/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/14408/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170928 17:03:34.337" starttime="20170928 17:03:34.336" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.337" starttime="20170928 17:03:34.310" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status endtime="20170928 17:03:34.338" starttime="20170928 17:03:34.338" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.338" starttime="20170928 17:03:34.308" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.344">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 17:03:34.344" starttime="20170928 17:03:34.344" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.345">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 17:03:34.345" starttime="20170928 17:03:34.345" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.345">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status endtime="20170928 17:03:34.345" starttime="20170928 17:03:34.343" status="PASS"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.347">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170928 17:03:34.347" starttime="20170928 17:03:34.346" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 17:03:34.347" starttime="20170928 17:03:34.347" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.353">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 17:03:34.356">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 17:03:34.356">${output} = /tmp/fspcibld/14408/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170928 17:03:34.357" starttime="20170928 17:03:34.347" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170928 17:03:34.360" starttime="20170928 17:03:34.359" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<status endtime="20170928 17:03:34.362" starttime="20170928 17:03:34.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.362">${ssh_pw_file_path} = ssh_pw</msg>
<status endtime="20170928 17:03:34.362" starttime="20170928 17:03:34.361" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.363">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 17:03:34.363" starttime="20170928 17:03:34.363" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.364">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170928 17:03:34.364" starttime="20170928 17:03:34.346" status="PASS"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.364">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status endtime="20170928 17:03:34.365" starttime="20170928 17:03:34.364" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.365">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170928 17:03:34.365" starttime="20170928 17:03:34.365" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 17:03:34.366" starttime="20170928 17:03:34.365" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.370">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170928 17:03:34.381">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 17:03:34.381">${os_con_pid} = 184</msg>
<status endtime="20170928 17:03:34.381" starttime="20170928 17:03:34.366" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170928 17:03:34.384" starttime="20170928 17:03:34.383" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.384">${os_con_pid} = 184</msg>
<status endtime="20170928 17:03:34.384" starttime="20170928 17:03:34.345" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.386">${cmd_buf} = kill -9 184</msg>
<status endtime="20170928 17:03:34.386" starttime="20170928 17:03:34.385" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170928 17:03:34.388" starttime="20170928 17:03:34.387" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.388" starttime="20170928 17:03:34.386" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:34.392">Running command 'kill -9 184 2&gt;&amp;1'.</msg>
<status endtime="20170928 17:03:34.395" starttime="20170928 17:03:34.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.396">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 17:03:34.396">${output} = </msg>
<status endtime="20170928 17:03:34.396" starttime="20170928 17:03:34.388" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170928 17:03:34.400" starttime="20170928 17:03:34.400" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.400" starttime="20170928 17:03:34.398" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:34.405" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/14408/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/14408/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status endtime="20170928 17:03:34.405" starttime="20170928 17:03:34.402" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.405" starttime="20170928 17:03:34.401" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.405" starttime="20170928 17:03:34.400" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.406">${output} = </msg>
<status endtime="20170928 17:03:34.406" starttime="20170928 17:03:34.405" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170928 17:03:34.407">${loc_quiet} = 1</msg>
<status endtime="20170928 17:03:34.407" starttime="20170928 17:03:34.406" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170928 17:03:34.461" starttime="20170928 17:03:34.407" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.462">${rc} = 0</msg>
<msg level="INFO" timestamp="20170928 17:03:34.575">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170928 17:03:34.576" starttime="20170928 17:03:34.407" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170928 17:03:34.719">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170928 17:03:34.719" starttime="20170928 17:03:34.338" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170928 17:03:34.824">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.91364|secure|Booting in non-secure mode.
  3.91365|secure|SecureROM valid - enabling functionality
  7.05870|ISTEP  6. 5 - host_init_fsi
  7.20798|ISTEP  6. 6 - host_set_ipl_parms
  7.22629|ISTEP  6. 7 - host_discover_targets
  7.86213|HWAS|PRESENT&gt; DIMM[03]=FF77000000000000
  7.86214|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  7.88415|ISTEP  6. 8 - host_update_master_tpm
 18.54268|SECURE|Security Access Bit&gt; 0x0000000000000000
 18.54269|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 18.54278|ISTEP  6. 9 - host_gard
 18.59592|ISTEP  6.10 - host_revert_sbe_mcs_setup
 18.60141|ISTEP  6.11 - host_start_occ_xstop_handler
 18.60224|ISTEP  6.12 - host_voltage_config
 18.63217|ISTEP  7. 2 - mss_volt
 19.21710|ISTEP  7. 3 - mss_freq
 19.30979|ISTEP  7. 4 - mss_eff_config
 21.97012|ISTEP  7. 5 - mss_attr_update
 21.98091|ISTEP  8. 1 - host_slave_sbe_config
 22.02800|ISTEP  8. 2 - host_setup_sbe
 22.03280|ISTEP  8. 3 - host_cbs_start
 22.06321|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 29.27904|ISTEP  8. 5 - host_attnlisten_proc
 29.27967|ISTEP  8. 6 - host_p9_fbc_eff_config
 29.28470|ISTEP  8. 7 - host_p9_eff_config_links
 29.29481|ISTEP  8. 8 - proc_attr_update
 29.29629|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 29.32462|ISTEP  8.10 - proc_xbus_scominit
 30.87796|ISTEP  8.11 - proc_xbus_enable_ridi
 30.88083|ISTEP  9. 1 - fabric_erepair
 31.09952|ISTEP  9. 2 - fabric_io_dccal
 31.77069|ISTEP  9. 3 - fabric_pre_trainadv
 31.77964|ISTEP  9. 4 - fabric_io_run_training
 31.90314|ISTEP  9. 5 - fabric_post_trainadv
 31.90739|ISTEP  9. 6 - proc_smp_link_layer
 31.91100|ISTEP  9. 7 - proc_fab_iovalid
 31.94236|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 31.95002|ISTEP 10. 1 - proc_build_smp
 32.06521|ISTEP 10. 2 - host_slave_sbe_update
 32.77567|ISTEP 10. 3 - host_set_voltages
 32.80856|ISTEP 10. 4 - proc_cen_ref_clk_enable
 32.81236|ISTEP 10. 5 - proc_enable_osclite
 32.81321|ISTEP 10. 6 - proc_chiplet_scominit
 32.84249|ISTEP 10. 7 - proc_abus_scominit
 32.85301|ISTEP 10. 8 - proc_obus_scominit
 32.91534|ISTEP 10. 9 - proc_npu_scominit
 32.93707|ISTEP 10.10 - proc_pcie_scominit
 32.99087|ISTEP 10.11 - proc_scomoverride_chiplets
 32.99353|ISTEP 10.12 - proc_chiplet_enable_ridi
 32.99561|ISTEP 10.13 - host_rng_bist
 32.99741|ISTEP 10.14 - host_update_redundant_tpm
 33.06568|ISTEP 11. 1 - host_prd_hwreconfig
 33.07303|ISTEP 11. 2 - cen_tp_chiplet_init1
 33.07414|ISTEP 11. 3 - cen_pll_initf
 33.07520|ISTEP 11. 4 - cen_pll_setup
 33.07709|ISTEP 11. 5 - cen_tp_chiplet_init2
 33.08038|ISTEP 11. 6 - cen_tp_arrayinit
 33.08214|ISTEP 11. 7 - cen_tp_chiplet_init3
 33.08341|ISTEP 11. 8 - cen_chiplet_init
 33.08446|ISTEP 11. 9 - cen_arrayinit
 33.08624|ISTEP 11.10 - cen_initf
 33.08726|ISTEP 11.11 - cen_do_manual_inits
 33.08839|ISTEP 11.12 - cen_startclocks
 33.08948|ISTEP 11.13 - cen_scominits
 33.09230|ISTEP 12. 1 - mss_getecid
 33.09695|ISTEP 12. 2 - dmi_attr_update
 33.09846|ISTEP 12. 3 - proc_dmi_scominit
 33.11191|ISTEP 12. 4 - cen_dmi_scominit
 33.11323|ISTEP 12. 5 - dmi_erepair
 33.11491|ISTEP 12. 6 - dmi_io_dccal
 33.11598|ISTEP 12. 7 - dmi_pre_trainadv
 33.11718|ISTEP 12. 8 - dmi_io_run_training
 33.11891|ISTEP 12. 9 - dmi_post_trainadv
 33.11997|ISTEP 12.10 - proc_cen_framelock
 33.12124|ISTEP 12.11 - host_startprd_dmi
 33.12395|ISTEP 12.12 - host_attnlisten_memb
 33.12498|ISTEP 12.13 - cen_set_inband_addr
 33.12622|ISTEP 13. 1 - host_disable_memvolt
 33.26273|ISTEP 13. 2 - mem_pll_reset
 33.27715|ISTEP 13. 3 - mem_pll_initf
 33.32482|ISTEP 13. 4 - mem_pll_setup
 33.34953|ISTEP 13. 6 - mem_startclocks
 33.36713|ISTEP 13. 7 - host_enable_memvolt
 33.36834|ISTEP 13. 8 - mss_scominit
 33.65638|ISTEP 13. 9 - mss_ddr_phy_reset
 33.72250|ISTEP 13.10 - mss_draminit
 33.97617|ISTEP 13.11 - mss_draminit_training
 34.30948|ISTEP 13.12 - mss_draminit_trainadv
 34.31174|ISTEP 13.13 - mss_draminit_mc
 34.34317|ISTEP 14. 1 - mss_memdiag
 44.72604|ISTEP 14. 2 - mss_thermal_init
 44.74009|ISTEP 14. 3 - proc_pcie_config
 44.75428|ISTEP 14. 4 - mss_power_cleanup
 44.75608|ISTEP 14. 5 - proc_setup_bars
 44.79592|ISTEP 14. 6 - proc_htm_setup
 44.80866|ISTEP 14. 7 - proc_exit_cache_contained
 44.82260|ISTEP 15. 1 - host_build_stop_image
 45.77845|ISTEP 15. 2 - proc_set_pba_homer_bar
 45.78540|ISTEP 15. 3 - host_establish_ex_chiplet
 45.79273|ISTEP 15. 4 - host_start_stop_engine
 45.89837|ISTEP 16. 1 - host_activate_master
  0.00709|ISTEP 16. 2 - host_activate_slave_cores
 47.51136|ISTEP 16. 3 - host_secure_rng
 47.52038|ISTEP 16. 4 - mss_scrub
 47.55646|ISTEP 16. 5 - host_ipl_complete
 47.59508|ISTEP 16. 6 - host_load_io_ppe
 47.63206|ISTEP 18.11 - proc_tod_setup
 47.82233|ISTEP 18.12 - proc_tod_init
 47.82538|ISTEP 20. 1 - host_load_payload
 48.21781|ISTEP 20. 2 - host_load_hdat
 51.98601|ISTEP 21. 1 - host_runtime_setup
 52.32940|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FD800000 EndAddress 0x80002017FDBFFFFF
 52.32943|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x8 StartAddress 0x80002017FDC00000 EndAddress 0x80002017FDFFFFFF
 52.32947|dw-Setting HDAT HB Reserved Memory Range: ibm,occ-common-area RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FF800000 EndAddress 0x80002017FFFFFFFF
 52.72363|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-data RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD670000 EndAddress 0x80002017FD7FFFFF
 54.55362|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-code-image RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD390000 EndAddress 0x80002017FD66FFFF
 54.59265|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD380000 EndAddress 0x80002017FD38FFFF
 54.59269|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD370000 EndAddress 0x80002017FD37FFFF
 54.59752|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD360000 EndAddress 0x80002017FD36FFFF
 54.59756|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD350000 EndAddress 0x80002017FD35FFFF
 54.59298|dw-Setting HDAT HB Reserved Memory Range: ibm,secure-crypt-algo-code RangeType 0x3 RangeId 0x0 StartAddress 0x80002017FD340000 EndAddress 0x80002017FD34FFFF
 54.83653|dw-Setting HDAT HB Reserved Memory Range: OCC RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD2A0000 EndAddress 0x80002017FD33FFFF
 54.86706|dw-Setting HDAT HB Reserved Memory Range: WOFDATA RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD1A0000 EndAddress 0x80002017FD29FFFF
 54.86900|dw-Setting HDAT HB Reserved Memory Range: HCODE RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD130000 EndAddress 0x80002017FD19FFFF
 62.33551|htmgt|OCCs are now running in ACTIVE state
 62.34507|ISTEP 21. 2 - host_verify_hdat
 62.35086|ISTEP 21. 3 - host_start_payload
[   77.292811980,5] OPAL skiboot-v5.8-rc1-pd9d2012 starting...
[   77.292815961,7] initial console log level: memory 7, driver 5
[   77.292818091,6] CPU: P9 generation processor (max 4 threads/core)
[   77.292820048,7] CPU: Boot CPU PIR is 0x0020 PVR is 0x004e1200
[   77.292822096,7] CPU: Initial max PIR set to 0x7fff
[   77.293822012,7] OPAL table: 0x300e4740 .. 0x300e4c80, branch table: 0x30002000
[   77.293825482,7] Assigning physical memory map table for nimbus
[   77.293828099,7] Parsing HDAT...
[   77.293829639,5] SPIRA-S found.
[   77.293832008,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   77.294038201,4] SENSORS: Duplicate sensor ID : 8
[   77.294198035,4] SENSORS: Duplicate sensor ID : 9
[   77.294199967,6] SP Family is openbmc
[   77.294205475,7] LPC: IOPATH chip id = 0
[   77.294206879,7] LPC: FW BAR       = f0000000
[   77.294208439,7] LPC: MEM BAR      = e0000000
[   77.294210013,7] LPC: IO BAR       = d0010000
[   77.294211562,7] LPC: Internal BAR = c0012000
[   77.294224420,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   77.294227342,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   77.295001223,5] UART: Using UART at 0x60300d00103f8
[   77.297605927,3] I2C: v2 found, but not supported. Parsing as v1
[   77.297929763,3] I2C: v2 found, but not supported. Parsing as v1
[   77.298615066,5] P9 DD2.00 detected
[   77.298659154,5] CHIP: Chip ID 0000 type: P9N DD2.0
[   77.298714307,5] P9 DD2.00 detected
[   77.298746215,5] CHIP: Chip ID 0008 type: P9N DD2.0
[   77.299085950,5] SLW: Enabling: stop0_lite
[   77.299134754,5] SLW: Enabling: stop0
[   77.299295922,5] PLAT: Using virtual UART
[   77.299506199,7] LPC: Routing irq 9, policy: 0 (r=1)
[   77.299508056,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   77.299727498,5] PLAT: Detected Witherspoon platform
[   77.299789304,5] PLAT: Detected BMC platform OpenBMC
[   77.340060863,5] CPU: All 176 processors called in...
[    2.463138139,5] FLASH: Found system flash:  id:0
[    2.463230745,5] BT: Interface initialized, IO 0x00e4
[    2.463278691,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.463280243,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    3.412247813,5] NVRAM: Size is 576 KB
[    4.105526490,5] STB: secure and trusted boot not supported
[    4.105595741,5] OPAL: Using OPAL UART console
[    4.105653607,7] LPC: Routing irq 4, policy: 0 (r=1)
[    4.105655028,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    4.106939214,5] VAS: Initialized chip 0
[    4.108080114,5] VAS: Initialized chip 8
[    4.108266356,5] Found ibm,power9-nx
[    4.108316249,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    4.108447825,5] Found ibm,power9-nx
[    4.108487549,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    6.335613156,3] FLASH: flash subpartition not found.
[    6.335683317,3] FLASH: Failed to parse subpart info for CAPP
[    6.338015478,3] CAPP: Error loading ucode lid. index=200d1
[    6.362266031,5] PCI: Resetting PHBs and training links...
[    7.398197681,5] PCI: Probing slots...
[    7.455560041,3] PCI: built-in device not found:  (loc: 100)
[    7.455622053,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    7.455671870,3] PCI: built-in device not found: GPU0 (loc: 400)
[    7.455714916,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    7.455754398,3] PCI: built-in device not found: GPU1 (loc: 500)
[    7.455799866,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    7.455841882,3] PCI: built-in device not found: GPU2 (loc: 600)
[    7.455892893,3] PCI: built-in device not found:  (loc: 100)
[    7.455932058,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    7.455971282,3] PCI: built-in device not found: GPU3 (loc: 300)
[    7.456013960,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    7.456053201,3] PCI: built-in device not found: GPU4 (loc: 400)
[    7.456095890,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    7.456137721,3] PCI: built-in device not found: GPU5 (loc: 500)
[    7.456189633,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.456238583,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    7.456289897,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    7.456348977,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    7.456404489,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    7.456469982,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    7.456523877,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.456577377,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    7.456632250,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    7.456705577,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    7.456771343,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    7.456842568,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    7.456916756,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    7.456990915,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    7.457057340,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.457114964,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.457177886,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.457240931,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    7.457296144,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    7.457351772,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    7.457413048,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    7.457472379,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    7.457540014,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    7.457607379,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    7.457674985,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    7.457742400,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    7.457807590,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    7.457874684,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    7.457942329,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    7.458009488,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    7.458076758,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    7.458144009,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    7.458211456,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    7.458273836,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.458327802,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.458381741,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    7.458435396,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    7.458490594,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    7.458555414,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    7.458611629,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   16.261826663,5] IPMI: Resetting boot count on successful boot
[   16.261904498,5] INIT: Waiting for kernel...
[   16.261933864,5] INIT: 64-bit LE kernel discovered
[   16.261974955,5] OCC: All Chip Rdy after 0 ms
[   16.304844022,5] INIT: Starting kernel at 0x20011000, fdt at 0x30957c50 349535 bytes)
[   17.264888485,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.8-openpower1 (fspbld@gfwa610.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Wed Aug 30 16:46:19 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e2700-0x2017ff6ebfff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a6700-0x2017ff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69ce00-0x2017ff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693500-0x2017ff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689c00-0x2017ff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff680300-0x2017ff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff676a00-0x2017ff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404960
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033784(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 217623296K/218103808K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 480512K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.004528] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.014072] clocksource: timebase mult[1f40000] shift[24] registered
[    0.019130] Console: colour dummy device 80x25
[    0.023805] console [tty0] enabled
[    0.026123] console [hvc0] enabled
[    0.026123] console [hvc0] enabled
[    0.028600] bootconsole [udbg0] disabled
[    0.028600] bootconsole [udbg0] disabled
[    0.033901] pid_max: default: 180224 minimum: 1408
[    0.037139] Security Framework initialized
[    0.041510] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.131907] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.197153] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.197376] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.202713] EEH: PowerNV platform initialized
[    0.202825] POWER9 performance monitor hardware support registered
[    0.204229] smp: Bringing up secondary CPUs ...
[    0.679028] smp: Brought up 8 nodes, 176 CPUs
[    0.679178] numa: Node 0 CPUs: 0-87
[    0.679260] numa: Node 8 CPUs: 88-175
[    0.679328] numa: Node 250 CPUs:
[    0.679391] numa: Node 251 CPUs:
[    0.679463] numa: Node 252 CPUs:
[    0.679531] numa: Node 253 CPUs:
[    0.679588] numa: Node 254 CPUs:
[    0.679661] numa: Node 255 CPUs:
[    0.697077] devtmpfs: initialized
[    0.711667] evm: security.capability
[    0.712366] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.712667] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.714378] NET: Registered protocol family 16
[    0.715103] cpuidle: using governor menu
[   20.475356646,3] LPC: Got LPC reset on chip 0x0 !
[   20.475359945,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   20.475369238,6] IPMI: dropping non severe PEL event
[   20.475486258,7] UART: IRQ functional !
[    0.775090] PCI: Probing PCI hardware
[    0.775198] PCI host bridge to bus 0000:00
[    0.775274] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.775426] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.775558] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.775704] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.775795] pci 0000:00:00.0: disabling bridge mem windows
[    0.775995] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.776172] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.776284] PCI host bridge to bus 0001:00
[    0.776325] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.776463] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.776609] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.776762] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.776860] pci 0001:00:00.0: disabling bridge mem windows
[    0.777245] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.777339] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.777630] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.777851] PCI host bridge to bus 0002:00
[    0.777890] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.778033] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.778180] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.778317] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.778411] pci 0002:00:00.0: disabling bridge mem windows
[    0.778780] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.778861] pci 0002:01:00.0: disabling bridge mem windows
[    0.779087] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.779410] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.779644] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.779809] PCI host bridge to bus 0003:00
[    0.779851] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.779976] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.780092] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.780262] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.780380] pci 0003:00:00.0: disabling bridge mem windows
[    0.780591] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.780747] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.780874] PCI host bridge to bus 0004:00
[    0.780923] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.781068] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.781202] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.781349] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.781438] pci 0004:00:00.0: disabling bridge mem windows
[    0.781809] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.781891] pci 0004:01:00.0: disabling bridge mem windows
[    0.782306] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.782402] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.782781] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.782881] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.782984] random: fast init done
[    0.783323] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.783412] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.783805] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.783888] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.784151] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.784584] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.784705] pci 0004:02:02.0: disabling bridge mem windows
[    0.785060] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.785181] pci 0004:02:0a.0: disabling bridge mem windows
[    0.785545] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.785667] pci 0004:02:0b.0: disabling bridge mem windows
[    0.786032] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.786138] pci 0004:02:0c.0: disabling bridge mem windows
[    0.786397] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.787974] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.788078] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.788342] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.788521] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.788686] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.788836] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.789003] PCI host bridge to bus 0005:00
[    0.789047] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.789202] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.789335] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.789486] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.789560] pci 0005:00:00.0: disabling bridge mem windows
[    0.789948] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.790377] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.790640] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.790850] PCI host bridge to bus 0030:00
[    0.790912] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.791054] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.791172] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.791327] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.791440] pci 0030:00:00.0: disabling bridge mem windows
[    0.791669] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.791862] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.791995] PCI host bridge to bus 0033:00
[    0.792038] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.792190] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.792324] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.792485] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.792609] pci 0033:00:00.0: disabling bridge mem windows
[    0.792833] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.792999] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.793130] PCI host bridge to bus 0034:00
[    0.793181] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.793316] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.793455] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.793615] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.793708] pci 0034:00:00.0: disabling bridge mem windows
[    0.793940] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.794106] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.794234] PCI host bridge to bus 0035:00
[    0.794283] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.794441] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.794562] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.794733] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.794812] pci 0035:00:00.0: disabling bridge mem windows
[    0.795242] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.795325] pci 0035:01:00.0: disabling bridge mem windows
[    0.795646] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.795989] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.796089] pci 0035:02:08.0: disabling bridge mem windows
[    0.796514] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.796595] pci 0035:02:0d.0: disabling bridge mem windows
[    0.796882] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.797808] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.797993] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.798168] PCI host bridge to bus 0006:00
[    0.798232] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.798344] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.798510] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.798791] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.799073] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.799349] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.799617] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.799899] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.800294] PCI host bridge to bus 0007:00
[    0.800337] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.800439] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.800603] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.800877] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.801135] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.801397] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.801653] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.801911] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.802204] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.802607] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.802689] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.802803] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.802935] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.803065] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.803467] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.803855] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.810270] IOMMU table initialized, virtual merging enabled
[    0.810331] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.810438] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.810507] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.810574] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.810721] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.810830] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.810958] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.811051] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.811109] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.811226] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.811346] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.811440] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.811535] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.811898] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.812289] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.818682] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.818763] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.818844] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.818921] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.819037] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.819437] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.819489] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.819577] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.819734] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.820143] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.820299] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.820423] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.820540] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.820634] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.820764] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.820884] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.820992] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.821079] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.821174] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.821293] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.821374] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.821470] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.821555] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.821642] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.821751] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.821862] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.821954] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.822008] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.822094] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.822194] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.822301] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.822414] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.822518] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.822613] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.822670] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.822762] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.822855] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.822932] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.823011] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.823107] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.823201] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.823293] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.823684] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.824054] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.830315] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.830400] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.830496] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.830551] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.830674] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.830817] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.830902] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.830978] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.831070] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.831469] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.831523] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.831657] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.831792] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.832180] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.838435] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.838513] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.838618] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.838692] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.838787] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.838918] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.839078] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.839207] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.839315] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.839465] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.839599] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.839738] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.839857] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.840008] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.840403] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.840761] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.847012] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.847096] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.847192] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.847250] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.847401] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.847794] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.847879] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.848279] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.848367] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.848769] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.848900] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.849020] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.849126] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.849524] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.849584] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.849682] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.850086] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.850154] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.850571] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.850619] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.850726] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.850899] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.851050] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.851208] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.851354] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.851504] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.851649] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.851799] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.851962] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.852114] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.852262] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.852411] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.852557] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.852719] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.852863] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.853031] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.853176] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.853332] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.853471] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.853620] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.853779] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.853943] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.854104] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.854270] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.854445] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.854536] pci 0006:00:00.1: Associating to existing PE d
[    0.854616] pci 0006:00:01.0: Associating to existing PE d
[    0.854697] pci 0006:00:01.1: Associating to existing PE d
[    0.854765] pci 0006:00:02.0: Associating to existing PE d
[    0.854852] pci 0006:00:02.1: Associating to existing PE d
[    0.854952] NPU6: Found 1 MMIO ATSD registers
[    0.854958] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.855116] pci 0007:00:00.1: Associating to existing PE d
[    0.855200] pci 0007:00:01.0: Associating to existing PE d
[    0.855272] pci 0007:00:01.1: Associating to existing PE d
[    0.855346] pci 0007:00:02.0: Associating to existing PE d
[    0.855422] pci 0007:00:02.1: Associating to existing PE d
[    0.855502] NPU7: Found 1 MMIO ATSD registers
[    0.859233] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.867732] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.867840] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.867926] vgaarb: loaded
[    0.868071] SCSI subsystem initialized
[    0.868223] usbcore: registered new interface driver usbfs
[    0.868296] usbcore: registered new interface driver hub
[    0.868887] usbcore: registered new device driver usb
[    0.868974] pps_core: LinuxPPS API ver. 1 registered
[    0.869050] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.869179] PTP clock support registered
[    0.869960] clocksource: Switched to clocksource timebase
[    0.873018] NET: Registered protocol family 2
[    0.873337] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.875802] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.876244] TCP: Hash tables configured (established 524288 bind 65536)
[    0.876517] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.877305] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.878540] NET: Registered protocol family 1
[    0.878622] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.878712] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.189582] Initialise system trusted keyrings
[    3.189711] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.194783] Key type asymmetric registered
[    3.194825] Asymmetric key parser 'x509' registered
[    3.194891] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.194958] io scheduler noop registered
[    3.195370] io scheduler cfq registered (default)
[    3.195412] io scheduler mq-deadline registered
[    3.195451] io scheduler kyber registered
[    3.197992] ipmi message handler version 39.2
[    3.198055] ipmi device interface
[    3.198147] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    3.229338] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    3.242598] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    3.242668] hvc0: No interrupts property, using OPAL event
[    3.243028] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    3.243498] [drm] radeon kernel modesetting enabled.
[    3.253402] brd: module loaded
[    3.272888] loop: module loaded
[    3.273033] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    3.273116] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    3.273209] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    3.273280] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    3.273510] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    3.283672] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    3.283753] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    3.284414] scsi host0: ahci
[    3.284617] scsi host1: ahci
[    3.284813] scsi host2: ahci
[    3.285012] scsi host3: ahci
[    3.285130] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    3.285231] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    3.285362] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    3.285483] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    3.285723] libphy: Fixed MDIO Bus: probed
[    3.285787] tg3.c:v3.137 (May 11, 2014)
[    3.285849] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    3.285948] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    3.315192] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.315608] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    3.315700] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.315876] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.316000] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.316171] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    3.346593] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.347001] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    3.347100] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.347236] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.347319] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.347593] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    3.347676] ehci-pci: EHCI PCI platform driver
[    3.347767] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    3.347855] ohci-pci: OHCI PCI platform driver
[    3.347993] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.348080] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    3.348259] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    3.348393] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    3.349160] hub 1-0:1.0: USB hub found
[    3.349211] hub 1-0:1.0: 4 ports detected
[    3.349409] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.349511] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    3.349652] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.349963] hub 2-0:1.0: USB hub found
[    3.350015] hub 2-0:1.0: 4 ports detected
[    3.350249] usbcore: registered new interface driver usb-storage
[    3.429876] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    3.429951] i2c /dev entries driver
[    3.430300] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.430618] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.430945] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.431263] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.431585] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   23.354585691,3] I2C: Request timeout !
[   23.354646969,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   23.354730573,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   23.354793245,3] I2C:  start_time=00000002d26d1ece end_time=00000002d30a0adf (duration=00000000009cec11)
[   23.354887442,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    3.611060] ata3: SATA link down (SStatus 0 SControl 300)
[    3.611160] ata4: SATA link down (SStatus 0 SControl 300)
[   23.440762591,3] I2C: Request timeout !
[   23.440810127,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   23.440910791,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   23.440973298,3] I2C:  start_time=00000002d790171a end_time=00000002d82cffea (duration=00000000009ce8d0)
[   23.441072023,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    3.779844] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.779920] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.780865] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.780982] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.781039] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.781104] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.781635] ata1.00: configured for UDMA/133
[    3.781761] ata2.00: configured for UDMA/133
[    3.782092] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.782971] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   24.014943555,3] I2C: Request timeout !
[   24.014990813,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.015088984,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   24.015161483,3] I2C:  start_time=00000002dcb31ab1 end_time=00000002dd50046a (duration=00000000009ce9b9)
[   24.015270420,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   24.127799013,3] I2C: Request timeout !
[   24.127861346,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.127946889,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   24.128006921,3] I2C:  start_time=00000002e36d24cf end_time=00000002e40a0df9 (duration=00000000009ce92a)
[   24.128097946,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   24.248862779,3] I2C: Request timeout !
[   24.248922727,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.249003206,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   24.249076056,3] I2C:  start_time=00000002eaa46cc6 end_time=00000002eb41575c (duration=00000000009cea96)
[   24.249167398,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   24.363769873,3] I2C: Request timeout !
[   24.363819804,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.363900290,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   24.363967910,3] I2C:  start_time=00000002f17dc588 end_time=00000002f21aaf1a (duration=00000000009ce992)
[   24.364051498,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   24.486884863,3] I2C: Request timeout !
[   24.486936963,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.487035104,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   24.487100082,3] I2C:  start_time=00000002f8d45bbe end_time=00000002f9714522 (duration=00000000009ce964)
[   24.487198901,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.098000111,3] I2C: Request timeout !
[   25.098047409,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.098145475,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   25.098212917,3] I2C:  start_time=00000003002af2f6 end_time=0000000300c7dc0e (duration=00000000009ce918)
[   25.098311755,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    5.161654] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.161968] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.162288] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.162627] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   25.214546991,3] I2C: Request timeout !
[   25.214612037,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.214708505,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   25.214767744,3] I2C:  start_time=00000003071d4dfd end_time=0000000307ba38bb (duration=00000000009ceabe)
[   25.214862300,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.333555271,3] I2C: Request timeout !
[   25.333843627,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.335313843,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   25.336760231,3] I2C:  start_time=000000030e353d9c end_time=000000030ed22538 (duration=00000000009ce79c)
[   25.339623352,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.466933019,3] I2C: Request timeout !
[   25.466977228,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.467073287,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   25.467149838,3] I2C:  start_time=0000000316286b94 end_time=0000000316c55415 (duration=00000000009ce881)
[   25.467244359,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.098567468,3] I2C: Request timeout !
[   26.098617395,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.098703188,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   26.098777333,3] I2C:  start_time=000000031eb81c5d end_time=000000031f55042d (duration=00000000009ce7d0)
[   26.098881483,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    6.143136] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    6.143198] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    6.152728] usbcore: registered new interface driver usbhid
[    6.152781] usbhid: USB HID core driver
[    6.153171] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    6.153459] NET: Registered protocol family 17
[    6.153515] Key type dns_resolver registered
[    6.153777] registered taskstats version 1
[    6.153811] Loading compiled-in X.509 certificates
[    6.161273] Loaded X.509 cert 'Build time autogenerated kernel key: 69b7bd2878a4bab90574770d0a2ffddecb40bd94'
[    6.166328] Key type encrypted registered
[    6.166388] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    6.166520] evm: HMAC attrs: 0x1
[    6.219981] rtc-opal opal-rtc: setting system clock to 2017-09-28 16:58:33 UTC (1506617913)
[    6.222283] Freeing unused kernel memory: 11456K
[    6.222345] This architecture does not have kernel memory protection.
[    6.240901] udevd[2944]: starting version 3.2.2
[    6.244361] udevd[2945]: starting eudev-3.2.2
[    6.294961] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    6.295046] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    6.295157] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    6.295353] [drm] platform has no IO space, trying MMIO
[    6.295412] [drm] VGA not enabled on entry, requesting chip POST
[    6.295521] [drm] Using P2A bridge for configuration
[    6.295606] [drm] AST 2500 detected
[    6.295666] [drm] Analog VGA only
[    6.295761] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    6.295986] [TTM] Zone  kernel: Available graphics memory: 108817376 kiB
[    6.296075] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    6.296156] [TTM] Initializing pool allocator
[    6.297864] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    6.300575] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    6.300688] scsi 1:0:0:0: Attached scsi generic sg1 type 0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p848cad7)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP Booting in 9 sec: [sda2] Ubuntu   [24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   46.060411] kexec_core: Starting new kernel
[   66.212484403,5] OPAL: Switch to big-endian OS
[   68.334384460,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d90000:0xc00000000533e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x077c7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 10656 MiB at 0x0000201563000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x2017ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e4d80-0x2017ff6eea7f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6bb080-0x2017ff6c4d7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6b1380-0x2017ff6bb07f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a7680-0x2017ff6b137f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69d980-0x2017ff6a767f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693c80-0x2017ff69d97f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689f80-0x2017ff693c7f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404544
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115232(87%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 206570240K/218103808K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 621824K reserved, 10911744K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000421] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001147] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001766] Console: colour dummy device 80x25
[    0.002325] console [hvc0] enabled
[    0.002325] console [hvc0] enabled
[    0.002628] bootconsole [udbg0] disabled
[    0.002628] bootconsole [udbg0] disabled
[    0.003245] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003365] pid_max: default: 180224 minimum: 1408
[    0.005449] Security Framework initialized
[    0.005484] Yama: becoming mindful.
[    0.005583] AppArmor: AppArmor initialized
[    0.009063] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098685] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.151883] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.152019] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155754] ftrace: allocating 30684 entries in 12 pages
[    0.174176] EEH: PowerNV platform initialized
[    0.174221] POWER9 performance monitor hardware support registered
[    0.176538] smp: Bringing up secondary CPUs ...
[    0.651539] smp: Brought up 8 nodes, 176 CPUs
[    0.651611] numa: Node 0 CPUs: 0-87
[    0.651649] numa: Node 8 CPUs: 88-175
[    0.651688] numa: Node 250 CPUs:
[    0.651725] numa: Node 251 CPUs:
[    0.651761] numa: Node 252 CPUs:
[    0.651806] numa: Node 253 CPUs:
[    0.651852] numa: Node 254 CPUs:
[    0.651925] numa: Node 255 CPUs:
[    0.664090] devtmpfs: initialized
[    0.725148] evm: security.selinux
[    0.725185] evm: security.SMACK64
[    0.725210] evm: security.SMACK64EXEC
[    0.725234] evm: security.SMACK64TRANSMUTE
[    0.725259] evm: security.SMACK64MMAP
[    0.725284] evm: security.ima
[    0.725309] evm: security.capability
[    0.726308] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.726479] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.732501] NET: Registered protocol family 16
[    0.754669] cpuidle: using governor ladder
[    0.778687] cpuidle: using governor menu
[    0.778951] pstore: using zlib compression
[    0.778987] pstore: Registered nvram as persistent store backend
[    0.849030] PCI: Probing PCI hardware
[    0.849172] PCI host bridge to bus 0000:00
[    0.849242] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.849390] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.849513] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.849890] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.850014] PCI host bridge to bus 0001:00
[    0.850063] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.850184] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.850321] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.851001] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.851298] PCI host bridge to bus 0002:00
[    0.851349] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.851492] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.851612] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.852248] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.852732] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.852925] PCI host bridge to bus 0003:00
[    0.852980] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.853115] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.853210] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.853547] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.853692] PCI host bridge to bus 0004:00
[    0.853747] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.853875] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.854000] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.855764] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.857341] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.859361] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.859535] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.859681] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.859830] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.859999] PCI host bridge to bus 0005:00
[    0.860054] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.860200] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.860322] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.860357] random: fast init done
[    0.861440] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.861659] PCI host bridge to bus 0030:00
[    0.861702] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.861853] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.861974] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.862368] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.862492] PCI host bridge to bus 0033:00
[    0.862542] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.862652] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.862787] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.863192] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.863320] PCI host bridge to bus 0034:00
[    0.863371] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.863516] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.863636] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.864035] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.864167] PCI host bridge to bus 0035:00
[    0.864225] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.864369] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.864488] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.865306] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.866266] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.867339] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.867494] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.867687] PCI host bridge to bus 0006:00
[    0.867742] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.867848] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.869077] PCI host bridge to bus 0007:00
[    0.869109] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.869189] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.870355] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.870733] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.870836] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.870908] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.871030] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.871153] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.871550] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.871973] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.876777] IOMMU table initialized, virtual merging enabled
[    0.876834] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.876907] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.876982] iommu: Adding device 0001:01:00.0 to group 0
[    0.877053] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.877122] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.877290] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.877390] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.877468] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.877567] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.877659] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.877786] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.877914] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.878016] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.878115] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.878513] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.878883] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.883656] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.883732] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.883816] iommu: Adding device 0002:02:00.0 to group 1
[    0.883883] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.883935] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.884057] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.884452] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.884508] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.884595] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.884753] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.885168] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.885341] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.885445] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.885569] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.885687] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.885788] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.885872] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.885994] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.886112] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.886217] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.886324] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.886410] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.886503] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.886584] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.886679] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.886795] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.886896] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.886981] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.887068] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.887150] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.887239] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.887345] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.887449] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.887535] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.887626] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.887707] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.887788] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.887872] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.887961] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.888047] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.888133] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.888218] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.888302] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.888673] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.889052] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.893819] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.893897] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.894004] iommu: Adding device 0004:03:00.0 to group 2
[    0.894081] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.894152] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.894247] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.894380] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.894440] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.894533] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.894618] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.895014] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.895067] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.895170] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.895320] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.895728] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.900516] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.900586] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.900683] iommu: Adding device 0004:01:00.0 to group 3
[    0.900770] iommu: Adding device 0004:01:00.1 to group 3
[    0.900854] iommu: Adding device 0004:01:00.2 to group 3
[    0.900912] iommu: Adding device 0004:01:00.3 to group 3
[    0.900996] iommu: Adding device 0004:01:00.4 to group 3
[    0.901081] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.901149] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.901253] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.901379] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.901535] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.901653] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.901776] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.901869] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.902002] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.902157] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.902291] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.902422] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.902797] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.903161] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.907938] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.908003] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.908093] iommu: Adding device 0005:01:00.0 to group 4
[    0.908181] iommu: Adding device 0005:01:00.1 to group 4
[    0.908256] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.908338] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.908496] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.908860] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.908953] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.909350] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.909437] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.909835] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.909969] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.910072] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.910183] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.910576] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.910647] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.910743] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.911142] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.911212] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.911618] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.911665] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.911765] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.911932] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.912093] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.912234] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.912378] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.912528] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.912670] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.912814] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.912960] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.913108] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.913253] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.913390] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.913537] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.913688] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.913835] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.913985] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.914133] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.914287] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.914420] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.914552] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.914683] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.914836] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.914983] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.915137] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.915294] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.915380] pci 0006:00:00.1: Associating to existing PE d
[    0.915454] pci 0006:00:01.0: Associating to existing PE d
[    0.915535] pci 0006:00:01.1: Associating to existing PE d
[    0.915614] pci 0006:00:02.0: Associating to existing PE d
[    0.915692] pci 0006:00:02.1: Associating to existing PE d
[    0.915812] NPU6: Found 1 MMIO ATSD registers
[    0.915816] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.915963] pci 0007:00:00.1: Associating to existing PE d
[    0.916044] pci 0007:00:01.0: Associating to existing PE d
[    0.916123] pci 0007:00:01.1: Associating to existing PE d
[    0.916199] pci 0007:00:02.0: Associating to existing PE d
[    0.916266] pci 0007:00:02.1: Associating to existing PE d
[    0.916362] NPU7: Found 1 MMIO ATSD registers
[    0.920059] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.944634] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.944694] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.948993] SCSI subsystem initialized
[    0.949416] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.949500] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.949578] vgaarb: loaded
[    0.949680] usbcore: registered new interface driver usbfs
[    0.949757] usbcore: registered new interface driver hub
[    0.950283] usbcore: registered new device driver usb
[    0.950357] pps_core: LinuxPPS API ver. 1 registered
[    0.950416] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.950555] PTP clock support registered
[    0.951485] NetLabel: Initializing
[    0.951518] NetLabel:  domain hash size = 128
[    0.951573] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.951687] NetLabel:  unlabeled traffic allowed by default
[    0.952611] clocksource: Switched to clocksource timebase
[    0.972086] VFS: Disk quotas dquot_6.6.0
[    0.972381] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.972911] AppArmor: AppArmor Filesystem Enabled
[    0.976564] NET: Registered protocol family 2
[    0.977392] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.979188] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.979534] TCP: Hash tables configured (established 524288 bind 65536)
[    0.979620] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.980302] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.981561] NET: Registered protocol family 1
[    0.981876] Unpacking initramfs...
[    1.922159] Freeing initrd memory: 38528K
[    1.957825] audit: initializing netlink subsys (disabled)
[    1.957936] audit: type=2000 audit(1506617963.948:1): initialized
[    1.965092] Initialise system trusted keyrings
[    1.965807] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    1.969359] zbud: loaded
[    1.973698] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    1.974545] fuse init (API version 7.26)
[    1.979033] Key type asymmetric registered
[    1.979061] Asymmetric key parser 'x509' registered
[    1.979111] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    1.979437] io scheduler noop registered
[    1.979463] io scheduler deadline registered
[    1.979508] io scheduler cfq registered (default)
[    1.982055] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.064718] Console: switching to colour frame buffer device 128x48
[    2.147163] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.147485] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.147535] hvc0: No interrupts property, using OPAL event
[    2.147941] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.150286] Linux agpgart interface v0.103
[    2.165434] loop: module loaded
[    2.165797] libphy: Fixed MDIO Bus: probed
[    2.165829] tun: Universal TUN/TAP device driver, 1.6
[    2.165900] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.166054] PPP generic driver version 2.4.2
[    2.166212] VFIO - User Level meta-driver version: 0.3
[    2.167219] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.167305] ehci-pci: EHCI PCI platform driver
[    2.167400] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.167474] ohci-pci: OHCI PCI platform driver
[    2.167577] uhci_hcd: USB Universal Host Controller Interface driver
[    2.167774] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.167878] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.168067] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.168210] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.168854] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.168921] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.169037] usb usb1: Product: xHCI Host Controller
[    2.169110] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.169196] usb usb1: SerialNumber: 0001:01:00.0
[    2.169430] hub 1-0:1.0: USB hub found
[    2.169478] hub 1-0:1.0: 4 ports detected
[    2.169849] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.169910] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.170048] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.170188] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.170276] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.170376] usb usb2: Product: xHCI Host Controller
[    2.170440] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.170523] usb usb2: SerialNumber: 0001:01:00.0
[    2.170750] hub 2-0:1.0: USB hub found
[    2.170797] hub 2-0:1.0: 4 ports detected
[    2.171563] mousedev: PS/2 mouse device common for all mice
[    2.552576] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    2.552666] i2c /dev entries driver
[    2.555666] device-mapper: uevent: version 1.0.3
[    2.556020] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    2.556107] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    2.569151] ledtrig-cpu: registered to indicate activity on CPUs
[    2.570218] NET: Registered protocol family 10
[    2.577711] Segment Routing with IPv6
[    2.577756] NET: Registered protocol family 17
[    2.577820] Key type dns_resolver registered
[    2.578079] registered taskstats version 1
[    2.578127] Loading compiled-in X.509 certificates
[    2.582321] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    2.582603] zswap: loaded using pool lzo/zbud
[    2.585486] Key type big_key registered
[    2.585519] Key type trusted registered
[    2.588208] Key type encrypted registered
[    2.588236] AppArmor: AppArmor sha1 policy hashing enabled
[    2.588280] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    2.588368] evm: HMAC attrs: 0x1
[    2.652618] rtc-opal opal-rtc: setting system clock to 2017-09-28 16:59:25 UTC (1506617965)
[    2.653355] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.653360] Unable to open file: /etc/keys/x509_evm.der (-2)
[    2.653820] Freeing unused kernel memory: 4416K
[    2.653914] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    2.868166] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.870845] tg3.c:v3.137 (May 11, 2014)
[    2.875232] [drm] Initialized
[    2.878316] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.878371] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    2.879398] scsi host0: ahci
[    2.879675] scsi host1: ahci
[    2.879927] scsi host2: ahci
[    2.880151] scsi host3: ahci
[    2.880273] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    2.880321] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    2.880368] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    2.880415] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    2.885805] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    2.886333] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    2.886415] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.886480] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.886529] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.898099] [drm] platform has no IO space, trying MMIO
[    2.898143] [drm] Using P2A bridge for configuration
[    2.898176] [drm] AST 2500 detected
[    2.898206] [drm] Analog VGA only
[    2.898239] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    2.898335] [TTM] Zone  kernel: Available graphics memory: 108795936 kiB
[    2.898377] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    2.898415] [TTM] Initializing pool allocator
[    2.898455] [TTM] Initializing DMA pool allocator
[    2.901411] fb: switching to astdrmfb from OFfb vga
[    2.901479] Console: switching to colour dummy device 80x25
[    2.904294] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    2.909121] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    2.909155] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.909185] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.909215] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.918987] Console: switching to colour frame buffer device 128x48
[    2.939082] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    2.968506] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    2.979926] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    3.041040] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    3.194626] ata4: SATA link down (SStatus 0 SControl 300)
[    3.194720] ata3: SATA link down (SStatus 0 SControl 300)
[    3.356514] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.356581] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.357516] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.357583] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.357697] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.357811] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.358273] ata1.00: configured for UDMA/133
[    3.358400] ata2.00: configured for UDMA/133
[    3.359011] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.404729] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.404784] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    3.404790] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    3.404863] sd 0:0:0:0: [sda] Write Protect is off
[    3.404927] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.405540] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.452739] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.452780] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    3.452860] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    3.452916] sd 1:0:0:0: [sdb] Write Protect is off
[    3.452996] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.463622]  sda: sda1 sda2
[    3.464069] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    3.482853] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: recovering journal
/dev/sda2: Clearing orphaned inode 22415636 (uid=0, gid=0, mode=040700, size=4096)
/dev/sda2: Clearing orphaned inode 22415638 (uid=0, gid=0, mode=041777, size=4096)
/dev/sda2: Clearing orphaned inode 50069519 (uid=0, gid=0, mode=040700, size=4096)
/dev/sda2: Clearing orphaned inode 50069520 (uid=0, gid=0, mode=041777, size=4096)
/dev/sda2: clean, 61900/61054976 files, 5014981/244188416 blocks
[    8.932691] random: crng init done
done.
[   10.547503] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[   11.412994] ip_tables: (C) 2000-2006 Netfilter Core Team
[   11.454309] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[   11.455041] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[   11.467836] systemd[1]: Set hostname to &lt;w54L&gt;.
[   12.179567] systemd[1]: Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
[   12.179854] systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[   12.180078] systemd[1]: Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[   12.180327] systemd[1]: Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[   12.180586] systemd[1]: Listening on udev Control Socket.
[[0;32m  OK  [0m] Listening on udev Control Socket.
[   12.180756] systemd[1]: Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[   12.181319] systemd[1]: Set up automount Arbitrary Executable File Formats File System Automount Point.
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Created slice User and Session Slice.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Created slice System Slice.
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
[[0;32m  OK  [0m] Reached target Slices.
         Starting Set the console keyboard layout...
         Mounting Huge Pages File System...
         Mounting POSIX Message Queue File System...
[[0;32m  OK  [0m] Started Read required files in advance.
[[0;32m  OK  [0m] Listening on Syslog Socket.
         Starting Journal Service...
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
         Mounting Debug File System...
         Starting Nameserver information manager...
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
         Starting Load Kernel Modules...
         Starting Uncomplicated firewall...
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Starting Apply Kernel Variables...
         Mounting FUSE Control File System...
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting Flush Journal to Persistent Storage...
         Starting Load/Save Random Seed...
         Starting udev Coldplug all Devices...
         Activating swap /swapfile...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Create Volatile Files and Directories...
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting Set console font and keymap...
         Starting AppArmor initialization...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Network Time Synchronization...
         Starting Update UTMP about System Boot/Shutdown...
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[   90.210957201,3] I2C: Request timeout !
[   90.211016151,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   90.211099854,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   90.211161451,3] I2C:  start_time=0000000ac68ade19 end_time=0000000ac727ec98 (duration=00000000009d0e7f)
[   90.211245139,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started AppArmor initialization.
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
         Starting Raise network interfaces...
[   90.264303260,3] I2C: Request timeout !
[   90.264376834,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   90.264463134,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   90.264533288,3] I2C:  start_time=0000000ac9b8da4d end_time=0000000aca55ec81 (duration=00000000009d1234)
[   90.264635045,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Listening on Load/Save RF Kill Switch Status /dev/rfkill Watch.
[   90.334055858,3] I2C: Request timeout !
[   90.334130953,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   90.334226450,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   90.334288178,3] I2C:  start_time=0000000acde15941 end_time=0000000ace7e46a3 (duration=00000000009ced62)
[   90.334381947,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Found device /dev/hvc0.
[   90.375093149,3] I2C: Request timeout !
[   90.375151505,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   90.375249031,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   90.375313177,3] I2C:  start_time=0000000ad0538cb6 end_time=0000000ad0f0755c (duration=00000000009ce8a6)
[   90.375407403,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Reached target Timers.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0[   90.405869922,3] I2C: Request timeout !
[   90.405918107,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   90.406017353,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   90.406074107,3] I2C:  start_time=0000000ad2292ae0 end_time=0000000ad25530b3 (duration=00000000002c05d3)
[   90.406167083,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
         Starting LSB: daemon to balance interrupts for SMP systems...
         Starting Accounts Service...
         Starting Login Service...
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Regular background program processing daemon.
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
[   90.510105974,3] I2C: Request timeout !
[   90.510162924,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   90.510260851,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   90.510317350,3] I2C:  start_time=0000000ad85fb0c8 end_time=0000000ad8fc9873 (duration=00000000009ce7ab)
[   90.510439410,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started Login Service.
[   91.086333878,3] I2C: Request timeout !
[   91.086727076,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   91.089179733,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   91.090436836,3] I2C:  start_time=0000000adda1f258 end_time=0000000ade3ed8cf (duration=00000000009ce677)
[   91.091703641,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Accounts Service.
[   91.164307045,3] I2C: Request timeout !
[   91.165506164,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   91.167961023,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   91.169201619,3] I2C:  start_time=0000000ae247b8f3 end_time=0000000ae2e49f80 (duration=00000000009ce68d)
[   91.170521403,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   91.271007890,3] I2C: Request timeout !
[   91.271498777,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   91.272783233,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   91.274035467,3] I2C:  start_time=0000000ae8a3d751 end_time=0000000ae940bfa3 (duration=00000000009ce852)
[   91.276486177,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   91.426952882,3] I2C: Request timeout !
[   91.427001314,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   91.427096237,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   91.427173296,3] I2C:  start_time=0000000af1ef6139 end_time=0000000af28c47cb (duration=00000000009ce692)
[   91.427248106,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting Permit User Sessions...
         Starting OpenBSD Secure Shell server...
         Starting Network Name Resolution...
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Hold until boot process finishes up...
         Starting Terminate Plymouth Boot Screen...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu 17.04 w54L hvc0

w54L login: [  112.314043870,5] IPMI: Soft shutdown requested
[[0;32m  OK  [0m] Stopped target Timers.
[[0;32m  OK  [0m] Stopped Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Closed Load/Save RF Kill Switch Status /dev/rfkill Watch.
[[0;32m  OK  [0m] Stopped Daily apt activities.
[[0;32m  OK  [0m] Stopped target System Time Synchronized.
[[0;32m  OK  [0m] Stopped Message of the Day.
[[0;32m  OK  [0m] Stopped Stop ureadahead data collection 45s after completed startup.
[[0;32m  OK  [0m] Stopped target Graphical Interface.
[[0;32m  OK  [0m] Stopped target Multi-User System.
         Stopping Regular background program processing daemon...
         Stopping System Logging Service...
         Stopping OpenBSD Secure Shell server...
         Stopping Login Service...
         Stopping D-Bus System Message Bus...
         Stopping Network Name Resolution...
[[0;32m  OK  [0m] Stopped target Login Prompts.
         Stopping Getty on tty1...
         Stopping Serial Getty on hvc0...
         Stopping LSB: daemon to balance interrupts for SMP systems...
         Stopping Accounts Service...
[[0;32m  OK  [0m] Stopped Accounts Service.
[[0;32m  OK  [0m] Stopped Login Service.
[[0;32m  OK  [0m] Stopped Regular background program processing daemon.
[[0;32m  OK  [0m] Stopped Serial Getty on hvc0.
[[0;32m  OK  [0m] Stopped Getty on tty1.
[[0;32m  OK  [0m] Stopped OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Stopped Network Name Resolution.
[[0;32m  OK  [0m] Stopped D-Bus System Message Bus.
[[0;32m  OK  [0m] Stopped System Logging Service.
[[0;32m  OK  [0m] Removed slice system-getty.slice.
[[0;32m  OK  [0m] Removed slice system-serial\x2dgetty.slice.
         Stopping Permit User Sessions...
[[0;32m  OK  [0m] Stopped Permit User Sessions.
[[0;32m  OK  [0m] Stopped target Network.
         Stopping ifup for enP5p1s0f0...
         Stopping Raise network interfaces...
[[0;32m  OK  [0m] Stopped target User and Group Name Lookups.
[[0;32m  OK  [0m] Stopped LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Stopped target Basic System.
[[0;32m  OK  [0m] Stopped target Sockets.
[[0;32m  OK  [0m] Closed D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Closed UUID daemon activation socket.
[[0;32m  OK  [0m] Closed Syslog Socket.
[[0;32m  OK  [0m] Stopped target Slices.
[[0;32m  OK  [0m] Removed slice User and Session Slice.
[[0;32m  OK  [0m] Stopped target Paths.
[[0;32m  OK  [0m] Stopped target System Initialization.
         Stopping Load/Save Random Seed...
         Stopping Update UTMP about System Boot/Shutdown...
         Stopping Network Time Synchronization...
[[0;32m  OK  [0m] Stopped target Encrypted Volumes.
[[0;32m  OK  [0m] Stopped Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Stopped Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Stopped target Swap.
         Deactivating swap /swapfile...
[[0;32m  OK  [0m] Stopped target Remote File Systems.
[[0;32m  OK  [0m] Stopped Load/Save Random Seed.
[[0;32m  OK  [0m] Stopped Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Stopped Network Time Synchronization.
[[0;32m  OK  [0m] Stopped Create Volatile Files and Directories.
[[0;32m  OK  [0m] Deactivated swap /swapfile.
[[0;32m  OK  [0m] Reached target Unmount All Filesystems.
[[0;32m  OK  [0m] Stopped Raise network interfaces.
[[0;32m  OK  [0m] Stopped ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Stopped target Network (Pre).
[[0;32m  OK  [0m] Stopped Apply Kernel Variables.
[[0;32m  OK  [0m] Stopped Load Kernel Modules.
[[0;32m  OK  [0m] Stopped target Local File Systems.
[[0;32m  OK  [0m] Stopped target Local File Systems (Pre).
[[0;32m  OK  [0m] Stopped Remount Root and Kernel File Systems.
[[0;32m  OK  [0m] Stopped Create Static Device Nodes in /dev.
[[0;32m  OK  [0m] Reached target Shutdown.
[   39.768502] reboot: Power down
[  115.420042688,5] OPAL: Shutdown request type 0x0...


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.91359|secure|Booting in non-secure mode.
  3.91360|secure|SecureROM valid - enabling functionality
  5.57469|ISTEP  6. 5 - host_init_fsi
  5.69539|ISTEP  6. 6 - host_set_ipl_parms
  5.72431|ISTEP  6. 7 - host_discover_targets
  6.20021|HWAS|PRESENT&gt; DIMM[03]=FF77000000000000
  6.20022|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.22217|ISTEP  6. 8 - host_update_master_tpm
 16.76414|SECURE|Security Access Bit&gt; 0x0000000000000000
 16.76415|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 16.76425|ISTEP  6. 9 - host_gard
 16.81597|ISTEP  6.10 - host_revert_sbe_mcs_setup
 16.82083|ISTEP  6.11 - host_start_occ_xstop_handler
 16.82242|ISTEP  6.12 - host_voltage_config
 16.85657|ISTEP  7. 2 - mss_volt
 17.16160|ISTEP  7. 3 - mss_freq
 17.25253|ISTEP  7. 4 - mss_eff_config
 19.86395|ISTEP  7. 5 - mss_attr_update
 19.87365|ISTEP  8. 1 - host_slave_sbe_config
 19.90899|ISTEP  8. 2 - host_setup_sbe
 19.91399|ISTEP  8. 3 - host_cbs_start
 19.93678|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 27.15250|ISTEP  8. 5 - host_attnlisten_proc
 27.15314|ISTEP  8. 6 - host_p9_fbc_eff_config
 27.15820|ISTEP  8. 7 - host_p9_eff_config_links
 27.16821|ISTEP  8. 8 - proc_attr_update
 27.16973|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 27.19773|ISTEP  8.10 - proc_xbus_scominit
 28.75242|ISTEP  8.11 - proc_xbus_enable_ridi
 28.75614|ISTEP  9. 1 - fabric_erepair
 28.81497|ISTEP  9. 2 - fabric_io_dccal
 29.48563|ISTEP  9. 3 - fabric_pre_trainadv
 29.49493|ISTEP  9. 4 - fabric_io_run_training
 29.61845|ISTEP  9. 5 - fabric_post_trainadv
 29.62271|ISTEP  9. 6 - proc_smp_link_layer
 29.62676|ISTEP  9. 7 - proc_fab_iovalid
 29.65752|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 29.66327|ISTEP 10. 1 - proc_build_smp
 29.78981|ISTEP 10. 2 - host_slave_sbe_update
 30.51431|ISTEP 10. 3 - host_set_voltages
 30.54492|ISTEP 10. 4 - proc_cen_ref_clk_enable
 30.55061|ISTEP 10. 5 - proc_enable_osclite
 30.55116|ISTEP 10. 6 - proc_chiplet_scominit
 30.58066|ISTEP 10. 7 - proc_abus_scominit
 30.59196|ISTEP 10. 8 - proc_obus_scominit
 30.65330|ISTEP 10. 9 - proc_npu_scominit
 30.67527|ISTEP 10.10 - proc_pcie_scominit
 30.72103|ISTEP 10.11 - proc_scomoverride_chiplets
 30.72217|ISTEP 10.12 - proc_chiplet_enable_ridi
 30.73774|ISTEP 10.13 - host_rng_bist
 30.73959|ISTEP 10.14 - host_update_redundant_tpm
 30.80493|ISTEP 11. 1 - host_prd_hwreconfig
 30.81378|ISTEP 11. 2 - cen_tp_chiplet_init1
 30.81529|ISTEP 11. 3 - cen_pll_initf
 30.81629|ISTEP 11. 4 - cen_pll_setup
 30.81726|ISTEP 11. 5 - cen_tp_chiplet_init2
 30.81902|ISTEP 11. 6 - cen_tp_arrayinit
 30.82026|ISTEP 11. 7 - cen_tp_chiplet_init3
 30.82132|ISTEP 11. 8 - cen_chiplet_init
 30.82230|ISTEP 11. 9 - cen_arrayinit
 30.82330|ISTEP 11.10 - cen_initf
 30.82428|ISTEP 11.11 - cen_do_manual_inits
 30.82591|ISTEP 11.12 - cen_startclocks
 30.82703|ISTEP 11.13 - cen_scominits
 30.82925|ISTEP 12. 1 - mss_getecid
 30.83386|ISTEP 12. 2 - dmi_attr_update
 30.83522|ISTEP 12. 3 - proc_dmi_scominit
 30.83692|ISTEP 12. 4 - cen_dmi_scominit
 30.83834|ISTEP 12. 5 - dmi_erepair
 30.83994|ISTEP 12. 6 - dmi_io_dccal
 30.84134|ISTEP 12. 7 - dmi_pre_trainadv
 30.84397|ISTEP 12. 8 - dmi_io_run_training
 30.84538|ISTEP 12. 9 - dmi_post_trainadv
 30.84654|ISTEP 12.10 - proc_cen_framelock
 30.84798|ISTEP 12.11 - host_startprd_dmi
 30.84944|ISTEP 12.12 - host_attnlisten_memb
 30.85066|ISTEP 12.13 - cen_set_inband_addr
 30.86570|ISTEP 13. 1 - host_disable_memvolt
 31.00648|ISTEP 13. 2 - mem_pll_reset
 31.02049|ISTEP 13. 3 - mem_pll_initf
 31.06784|ISTEP 13. 4 - mem_pll_setup
 31.09254|ISTEP 13. 6 - mem_startclocks
 31.10912|ISTEP 13. 7 - host_enable_memvolt
 31.11017|ISTEP 13. 8 - mss_scominit
 31.40054|ISTEP 13. 9 - mss_ddr_phy_reset
 31.48952|ISTEP 13.10 - mss_draminit
 31.74082|ISTEP 13.11 - mss_draminit_training
 32.07230|ISTEP 13.12 - mss_draminit_trainadv
 32.07418|ISTEP 13.13 - mss_draminit_mc
 32.10436|ISTEP 14. 1 - mss_memdiag
 42.48327|ISTEP 14. 2 - mss_thermal_init
 42.49790|ISTEP 14. 3 - proc_pcie_config
 42.51508|ISTEP 14. 4 - mss_power_cleanup
 42.51703|ISTEP 14. 5 - proc_setup_bars
 42.55645|ISTEP 14. 6 - proc_htm_setup
 42.57022|ISTEP 14. 7 - proc_exit_cache_contained
 42.58423|ISTEP 15. 1 - host_build_stop_image
 43.52835|ISTEP 15. 2 - proc_set_pba_homer_bar
 43.53266|ISTEP 15. 3 - host_establish_ex_chiplet
 43.54553|ISTEP 15. 4 - host_start_stop_engine
 43.65297|ISTEP 16. 1 - host_activate_master
  0.00708|ISTEP 16. 2 - host_activate_slave_cores
 45.28841|ISTEP 16. 3 - host_secure_rng
 45.28724|ISTEP 16. 4 - mss_scrub
 45.30054|ISTEP 16. 5 - host_ipl_complete
 45.32308|ISTEP 16. 6 - host_load_io_ppe
 45.35593|ISTEP 18.11 - proc_tod_setup
 45.47565|ISTEP 18.12 - proc_tod_init
 45.46341|ISTEP 20. 1 - host_load_payload
 45.78976|ISTEP 20. 2 - host_load_hdat
 49.56695|ISTEP 21. 1 - host_runtime_setup
 49.85921|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FD800000 EndAddress 0x80002017FDBFFFFF
 49.85925|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x8 StartAddress 0x80002017FDC00000 EndAddress 0x80002017FDFFFFFF
 49.85928|dw-Setting HDAT HB Reserved Memory Range: ibm,occ-common-area RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FF800000 EndAddress 0x80002017FFFFFFFF
 50.28779|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-data RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD670000 EndAddress 0x80002017FD7FFFFF
 51.56878|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-code-image RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD390000 EndAddress 0x80002017FD66FFFF
 51.61436|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD380000 EndAddress 0x80002017FD38FFFF
 51.61440|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD370000 EndAddress 0x80002017FD37FFFF
 51.60797|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD360000 EndAddress 0x80002017FD36FFFF
 51.60801|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD350000 EndAddress 0x80002017FD35FFFF
 51.63358|dw-Setting HDAT HB Reserved Memory Range: ibm,secure-crypt-algo-code RangeType 0x3 RangeId 0x0 StartAddress 0x80002017FD340000 EndAddress 0x80002017FD34FFFF
 51.90743|dw-Setting HDAT HB Reserved Memory Range: OCC RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD2A0000 EndAddress 0x80002017FD33FFFF
 51.90775|dw-Setting HDAT HB Reserved Memory Range: WOFDATA RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD1A0000 EndAddress 0x80002017FD29FFFF
 51.90962|dw-Setting HDAT HB Reserved Memory Range: HCODE RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD130000 EndAddress 0x80002017FD19FFFF
 59.34518|htmgt|OCCs are now running in ACTIVE state
 59.34901|ISTEP 21. 2 - host_verify_hdat
 59.37675|ISTEP 21. 3 - host_start_payload
[   76.015445422,5] OPAL skiboot-v5.8-rc1-pd9d2012 starting...
[   76.015449364,7] initial console log level: memory 7, driver 5
[   76.015451428,6] CPU: P9 generation processor (max 4 threads/core)
[   76.015453308,7] CPU: Boot CPU PIR is 0x003c PVR is 0x004e1200
[   76.015455266,7] CPU: Initial max PIR set to 0x7fff
[   76.016455461,7] OPAL table: 0x300e4740 .. 0x300e4c80, branch table: 0x30002000
[   76.016458722,7] Assigning physical memory map table for nimbus
[   76.016461344,7] Parsing HDAT...
[   76.016462850,5] SPIRA-S found.
[   76.016465194,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   76.016670648,4] SENSORS: Duplicate sensor ID : 8
[   76.016831287,4] SENSORS: Duplicate sensor ID : 9
[   76.016833227,6] SP Family is openbmc
[   76.016838673,7] LPC: IOPATH chip id = 0
[   76.016840082,7] LPC: FW BAR       = f0000000
[   76.016841662,7] LPC: MEM BAR      = e0000000
[   76.016843201,7] LPC: IO BAR       = d0010000
[   76.016844735,7] LPC: Internal BAR = c0012000
[   76.016857527,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   76.016860414,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   76.017628214,5] UART: Using UART at 0x60300d00103f8
[   76.020232253,3] I2C: v2 found, but not supported. Parsing as v1
[   76.020567738,3] I2C: v2 found, but not supported. Parsing as v1
[   76.021272007,5] P9 DD2.00 detected
[   76.021334606,5] CHIP: Chip ID 0000 type: P9N DD2.0
[   76.021391982,5] P9 DD2.00 detected
[   76.021422995,5] CHIP: Chip ID 0008 type: P9N DD2.0
[   76.021756590,5] SLW: Enabling: stop0_lite
[   76.021823594,5] SLW: Enabling: stop0
[   76.021975478,5] PLAT: Using virtual UART
[   76.022181924,7] LPC: Routing irq 9, policy: 0 (r=1)
[   76.022183794,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   76.022415895,5] PLAT: Detected Witherspoon platform
[   76.022474041,5] PLAT: Detected BMC platform OpenBMC
[   76.063002477,5] CPU: All 176 processors called in...
[   76.062256041,7] XIVE[CPU 0036] Initialized TMA (VP: 0/b6 W01=0000000000000000)
[   76.062162210,7] XIVE[CPU 0032] Initialized TMA (VP: 0/b2 W01=0000000000000000)
[   76.056817528,7] XIVE[CPU 0033] Initialized TMA (VP: 0/b3 W01=0000000000000000)
[   76.057009869,7] XIVE[CPU 002e] Initialized TMA (VP: 0/ae W01=0000000000000000)
[   76.058024678,7] XIVE[CPU 002d] Initialized TMA (VP: 0/ad W01=0000000000000000)
[   76.057569468,7] XIVE[CPU 0855] Initialized TMA (VP: 1/d5 W01=0000000000000000)
[   76.062131207,7] XIVE[CPU 0031] Initialized TMA (VP: 0/b1 W01=0000000000000000)
[    2.428775262,5] FLASH: Found system flash:  id:0
[    2.428872243,5] BT: Interface initialized, IO 0x00e4
[    2.428917777,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.428919282,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    4.275474914,5] NVRAM: Size is 576 KB
[    4.478819806,5] STB: secure and trusted boot not supported
[    4.479323467,5] OPAL: Using OPAL UART console
[    4.479361030,7] LPC: Routing irq 4, policy: 0 (r=1)
[    4.479362462,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    4.482028970,5] VAS: Initialized chip 0
[    4.484045626,5] VAS: Initialized chip 8
[    4.484547287,5] Found ibm,power9-nx
[    4.485823367,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    4.488043259,5] Found ibm,power9-nx
[    4.488691035,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    7.196764983,3] FLASH: flash subpartition not found.
[    7.196822317,3] FLASH: Failed to parse subpart info for CAPP
[    7.197513827,3] CAPP: Error loading ucode lid. index=200d1
[    7.221699365,5] PCI: Resetting PHBs and training links...
[    8.258311006,5] PCI: Probing slots...
[    8.317938717,3] PCI: built-in device not found:  (loc: 100)
[    8.318023155,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    8.318072644,3] PCI: built-in device not found: GPU0 (loc: 400)
[    8.318118061,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    8.318172352,3] PCI: built-in device not found: GPU1 (loc: 500)
[    8.318220293,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    8.318264673,3] PCI: built-in device not found: GPU2 (loc: 600)
[    8.318307683,3] PCI: built-in device not found:  (loc: 100)
[    8.318344218,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    8.318388500,3] PCI: built-in device not found: GPU3 (loc: 300)
[    8.318426091,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    8.318470288,3] PCI: built-in device not found: GPU4 (loc: 400)
[    8.318508017,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    8.318554725,3] PCI: built-in device not found: GPU5 (loc: 500)
[    8.318599011,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.318667986,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.318723512,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    8.318792405,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    8.318855260,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    8.318935759,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    8.318992439,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.319045875,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    8.319100669,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    8.319173829,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    8.319241899,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    8.319315817,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    8.319389881,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    8.319461320,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    8.319555323,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.319615300,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.319678183,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.319741263,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.319801449,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.319856777,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.319927729,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.319992088,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.320061890,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.320131427,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.320196347,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.320263656,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.320346380,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.320428321,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.320495239,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.320562302,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.320629378,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.320696350,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.320769260,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.320833787,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.320897646,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.320946645,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.320995657,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    8.321050626,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    8.321130467,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    8.321196718,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   16.423052096,5] IPMI: Resetting boot count on successful boot
[   16.423112306,5] INIT: Waiting for kernel...
[   16.423154124,5] INIT: 64-bit LE kernel discovered
[   16.423200177,5] OCC: All Chip Rdy after 0 ms
[   16.466067693,5] INIT: Starting kernel at 0x20011000, fdt at 0x30957c50 349535 bytes)
[   17.426059586,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.8-openpower1 (fspbld@gfwa610.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Wed Aug 30 16:46:19 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e2700-0x2017ff6ebfff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a6700-0x2017ff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69ce00-0x2017ff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693500-0x2017ff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689c00-0x2017ff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff680300-0x2017ff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff676a00-0x2017ff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404960
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033784(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 217623296K/218103808K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 480512K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.003915] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.005560] clocksource: timebase mult[1f40000] shift[24] registered
[    0.007337] Console: colour dummy device 80x25
[    0.011039] console [tty0] enabled
[    0.011446] console [hvc0] enabled
[    0.011446] console [hvc0] enabled
[    0.015650] bootconsole [udbg0] disabled
[    0.015650] bootconsole [udbg0] disabled
[    0.017635] pid_max: default: 180224 minimum: 1408
[    0.021260] Security Framework initialized
[    0.026035] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.120070] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.185288] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.185544] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.190895] EEH: PowerNV platform initialized
[    0.191011] POWER9 performance monitor hardware support registered
[    0.192379] smp: Bringing up secondary CPUs ...
[    0.667398] smp: Brought up 8 nodes, 176 CPUs
[    0.667592] numa: Node 0 CPUs: 0-87
[    0.667679] numa: Node 8 CPUs: 88-175
[    0.667765] numa: Node 250 CPUs:
[    0.667848] numa: Node 251 CPUs:
[    0.667906] numa: Node 252 CPUs:
[    0.667979] numa: Node 253 CPUs:
[    0.668036] numa: Node 254 CPUs:
[    0.668114] numa: Node 255 CPUs:
[    0.685584] devtmpfs: initialized
[    0.700169] evm: security.capability
[    0.700904] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.701226] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.702945] NET: Registered protocol family 16
[    0.703677] cpuidle: using governor menu
[   21.151110841,3] LPC: Got LPC reset on chip 0x0 !
[   21.151114269,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   21.151123547,6] IPMI: dropping non severe PEL event
[   21.151241161,7] UART: IRQ functional !
[    0.763651] PCI: Probing PCI hardware
[    0.763755] PCI host bridge to bus 0000:00
[    0.763816] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.763895] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.763966] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.764099] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.764166] pci 0000:00:00.0: disabling bridge mem windows
[    0.764346] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.764477] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.764616] PCI host bridge to bus 0001:00
[    0.764653] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.764731] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.764801] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.764919] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.764986] pci 0001:00:00.0: disabling bridge mem windows
[    0.765337] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.765407] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.765635] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.765806] PCI host bridge to bus 0002:00
[    0.765843] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.765921] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.765992] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.766109] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.766176] pci 0002:00:00.0: disabling bridge mem windows
[    0.766509] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.766577] pci 0002:01:00.0: disabling bridge mem windows
[    0.766782] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.767081] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.767278] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.767414] PCI host bridge to bus 0003:00
[    0.767451] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.767530] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.767600] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.767718] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.767785] pci 0003:00:00.0: disabling bridge mem windows
[    0.767957] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.768086] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.768184] PCI host bridge to bus 0004:00
[    0.768221] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.768298] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.768368] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.768490] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.768556] pci 0004:00:00.0: disabling bridge mem windows
[    0.768897] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.768965] pci 0004:01:00.0: disabling bridge mem windows
[    0.769343] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.769412] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.769743] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.769811] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.770145] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.770213] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.770550] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.770619] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.774215] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.776820] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.778923] pci 0004:02:02.0: disabling bridge mem windows
[    0.781549] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.783692] pci 0004:02:0a.0: disabling bridge mem windows
[    0.786356] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.793179] pci 0004:02:0b.0: disabling bridge mem windows
[    0.793578] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.793673] pci 0004:02:0c.0: disabling bridge mem windows
[    0.793935] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.795524] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.795659] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.795926] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.796120] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.796292] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.796470] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.796621] PCI host bridge to bus 0005:00
[    0.796686] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.796834] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.796992] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.797159] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.797294] pci 0005:00:00.0: disabling bridge mem windows
[    0.797552] random: fast init done
[    0.797683] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.798130] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.798450] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.798684] PCI host bridge to bus 0030:00
[    0.798740] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.798885] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.799026] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.799194] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.799296] pci 0030:00:00.0: disabling bridge mem windows
[    0.799537] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.799737] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.799867] PCI host bridge to bus 0033:00
[    0.799935] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.800099] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.800231] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.800397] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.800503] pci 0033:00:00.0: disabling bridge mem windows
[    0.800761] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.800958] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.801086] PCI host bridge to bus 0034:00
[    0.801151] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.801313] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.801431] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.801588] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.801723] pci 0034:00:00.0: disabling bridge mem windows
[    0.801960] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.802130] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.802279] PCI host bridge to bus 0035:00
[    0.802355] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.802498] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.802635] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.802801] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.802921] pci 0035:00:00.0: disabling bridge mem windows
[    0.803341] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.803435] pci 0035:01:00.0: disabling bridge mem windows
[    0.803758] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.804096] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.804191] pci 0035:02:08.0: disabling bridge mem windows
[    0.804636] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.804718] pci 0035:02:0d.0: disabling bridge mem windows
[    0.805017] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.805927] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.806089] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.806249] PCI host bridge to bus 0006:00
[    0.806302] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.806416] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.806579] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.806818] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.807069] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.807339] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.807607] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.807869] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.808234] PCI host bridge to bus 0007:00
[    0.808280] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.808358] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.808541] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.808817] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.809066] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.809316] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.809565] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.809817] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.810114] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.810495] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.810579] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.810674] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.810790] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.810934] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.811323] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.811696] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.818097] IOMMU table initialized, virtual merging enabled
[    0.818150] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.818227] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.818332] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.818418] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.818565] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.818678] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.818779] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.818873] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.818975] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.819095] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.819201] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.819290] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.819367] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.819775] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.820150] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.826536] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.826628] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.826725] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.826790] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.826923] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.827322] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.827376] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.827506] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.827664] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.828065] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.828228] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.828359] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.828478] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.828604] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.828719] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.828825] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.828945] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.829062] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.829180] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.829295] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.829383] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.829463] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.829557] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.829652] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.829779] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.829891] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.829980] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.830065] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.830154] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.830247] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.830366] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.830472] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.830563] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.830647] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.830737] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.830821] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.830909] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.831001] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.831090] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.831182] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.831272] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.831357] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.831751] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.832123] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.838375] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.838459] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.838556] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.838634] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.838742] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.838873] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.838958] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.839015] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.839120] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.839516] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.839573] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.839687] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.839832] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.840237] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.846505] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.846585] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.846674] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.846763] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.846877] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.847011] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.847183] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.847302] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.847445] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.847582] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.847723] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.847869] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.848015] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.848116] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.848527] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.848887] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.855143] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.855220] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.855290] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.855378] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.855530] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.855921] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.856009] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.856402] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.856493] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.856890] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.857018] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.857134] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.857252] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.857647] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.857710] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.857810] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.858206] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.858269] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.858658] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.858709] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.858827] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.858998] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.859152] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.859303] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.859450] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.859595] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.859736] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.859896] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.860038] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.860181] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.860335] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.860483] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.860651] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.860816] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.860984] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.861131] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.861291] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.861452] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.861614] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.861746] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.861905] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.862049] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.862213] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.862360] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.862508] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.862593] pci 0006:00:00.1: Associating to existing PE d
[    0.862656] pci 0006:00:01.0: Associating to existing PE d
[    0.862745] pci 0006:00:01.1: Associating to existing PE d
[    0.862826] pci 0006:00:02.0: Associating to existing PE d
[    0.862909] pci 0006:00:02.1: Associating to existing PE d
[    0.863022] NPU6: Found 1 MMIO ATSD registers
[    0.863027] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.863182] pci 0007:00:00.1: Associating to existing PE d
[    0.863265] pci 0007:00:01.0: Associating to existing PE d
[    0.863347] pci 0007:00:01.1: Associating to existing PE d
[    0.863413] pci 0007:00:02.0: Associating to existing PE d
[    0.863504] pci 0007:00:02.1: Associating to existing PE d
[    0.863587] NPU7: Found 1 MMIO ATSD registers
[    0.867334] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.875774] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.875882] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.875947] vgaarb: loaded
[    0.876081] SCSI subsystem initialized
[    0.876246] usbcore: registered new interface driver usbfs
[    0.876321] usbcore: registered new interface driver hub
[    0.876913] usbcore: registered new device driver usb
[    0.877003] pps_core: LinuxPPS API ver. 1 registered
[    0.877090] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.877227] PTP clock support registered
[    0.877973] clocksource: Switched to clocksource timebase
[    0.880983] NET: Registered protocol family 2
[    0.881291] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.883767] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.884192] TCP: Hash tables configured (established 524288 bind 65536)
[    0.884467] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.885276] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.886578] NET: Registered protocol family 1
[    0.886646] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.886699] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.206394] Initialise system trusted keyrings
[    3.206515] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.211427] Key type asymmetric registered
[    3.211489] Asymmetric key parser 'x509' registered
[    3.211585] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.211702] io scheduler noop registered
[    3.212137] io scheduler cfq registered (default)
[    3.212194] io scheduler mq-deadline registered
[    3.212261] io scheduler kyber registered
[    3.214861] ipmi message handler version 39.2
[    3.214913] ipmi device interface
[    3.215016] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    3.815795] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    3.829208] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    3.829280] hvc0: No interrupts property, using OPAL event
[    3.829646] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    3.830133] [drm] radeon kernel modesetting enabled.
[    3.840027] brd: module loaded
[    3.859553] loop: module loaded
[    3.859705] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    3.859761] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    3.859816] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    3.859869] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    3.860047] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    3.870185] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    3.870252] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    3.870859] scsi host0: ahci
[    3.871052] scsi host1: ahci
[    3.871253] scsi host2: ahci
[    3.871437] scsi host3: ahci
[    3.871543] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    3.871610] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    3.871675] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    3.871768] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    3.872001] libphy: Fixed MDIO Bus: probed
[    3.872096] tg3.c:v3.137 (May 11, 2014)
[    3.872168] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    3.872279] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    3.903190] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.903663] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    3.903766] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.903912] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.904032] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.904215] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    3.934639] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.935025] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    3.935117] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.935260] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.935393] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.935680] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    3.935740] ehci-pci: EHCI PCI platform driver
[    3.935835] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    3.935915] ohci-pci: OHCI PCI platform driver
[    3.936065] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.936165] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    3.936353] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    3.936480] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    3.937288] hub 1-0:1.0: USB hub found
[    3.937340] hub 1-0:1.0: 4 ports detected
[    3.937523] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.937635] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    3.937768] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.938076] hub 2-0:1.0: USB hub found
[    3.938132] hub 2-0:1.0: 4 ports detected
[    3.938374] usbcore: registered new interface driver usb-storage
[    3.997971] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    3.998041] i2c /dev entries driver
[    3.998377] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.998697] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.999008] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.999321] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.999637] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   24.317843622,3] I2C: Request timeout !
[   24.318032636,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.319512265,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   24.320969186,3] I2C:  start_time=00000002eec0fc85 end_time=00000002ef5de753 (duration=00000000009ceace)
[   24.322437327,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    4.199127] ata3: SATA link down (SStatus 0 SControl 300)
[    4.209099] a[   24.415321380,3] I2C: Request timeout !
[   24.415894027,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.417359077,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   24.418816299,3] I2C:  start_time=00000002f4906078 end_time=00000002f4dfb9d1 (duration=00000000004f5959)
[   24.420999672,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
ta4: SATA link down (SStatus 0 SControl 300)
[   24.463527601,3] I2C: Request timeout !
[   24.463579646,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   24.463669614,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   24.463728996,3] I2C:  start_time=00000002f76ff4e9 end_time=00000002f80cddda (duration=00000000009ce8f1)
[   24.463814537,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    4.367888] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.367972] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.368891] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.368981] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.369084] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.369218] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.369817] ata2.00: configured for UDMA/133
[    4.389759] ata1.00: configured for UDMA/133
[    4.390231] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    4.391126] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   25.017188931,3] I2C: Request timeout !
[   25.017243580,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.017336059,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   25.017411099,3] I2C:  start_time=00000002fb59de53 end_time=00000002fbf6c764 (duration=00000000009ce911)
[   25.017509131,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.132096504,3] I2C: Request timeout !
[   25.132141036,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.132223434,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   25.132300510,3] I2C:  start_time=0000000302333742 end_time=0000000302d0211f (duration=00000000009ce9dd)
[   25.132393375,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.265470918,3] I2C: Request timeout !
[   25.265525963,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.265626097,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   25.265693131,3] I2C:  start_time=000000030a2659ed end_time=000000030ac342e7 (duration=00000000009ce8fa)
[   25.265786042,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    5.109679] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.109993] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.110302] at24 9[   25.370154364,3] I2C: Request timeout !
[   25.370790129,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.372272799,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   25.374415705,3] I2C:  start_time=000000031063af31 end_time=000000031094b70f (duration=00000000003107de)
[   25.376582890,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.110612] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   25.499420609,3] I2C: Request timeout !
[   25.499485427,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.499558055,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   25.499622411,3] I2C:  start_time=0000000318182445 end_time=0000000318b50b85 (duration=00000000009ce740)
[   25.499715870,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.120797538,3] I2C: Request timeout !
[   26.120846738,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.120942138,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   26.121016030,3] I2C:  start_time=00000003200b50b6 end_time=0000000320a83873 (duration=00000000009ce7bd)
[   26.121111886,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.233651472,3] I2C: Request timeout !
[   26.233703095,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.233803327,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   26.233872060,3] I2C:  start_time=0000000326c55476 end_time=0000000327623c04 (duration=00000000009ce78e)
[   26.233970322,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.367028141,3] I2C: Request timeout !
[   26.367610058,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.371270969,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   26.373704421,3] I2C:  start_time=000000032eb87d8f end_time=000000032f5566bf (duration=00000000009ce930)
[   26.378547866,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.481935809,3] I2C: Request timeout !
[   26.482738887,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.486400495,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   26.490029703,3] I2C:  start_time=000000033591d780 end_time=00000003362ec0bc (duration=00000000009ce93c)
[   26.494866947,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    6.531184] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    6.531239] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    6.540929] usbcore: registered new interface driver usbhid
[    6.540971] usbhid: USB HID core driver
[    6.541326] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    6.541589] NET: Registered protocol family 17
[    6.541639] Key type dns_resolver registered
[    6.541885] registered taskstats version 1
[    6.541917] Loading compiled-in X.509 certificates
[    6.547529] Loaded X.509 cert 'Build time autogenerated kernel key: 69b7bd2878a4bab90574770d0a2ffddecb40bd94'
[    6.552852] Key type encrypted registered
[    6.552909] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    6.553022] evm: HMAC attrs: 0x1
[    6.668026] rtc-opal opal-rtc: setting system clock to 2017-09-28 17:02:08 UTC (1506618128)
[    6.670457] Freeing unused kernel memory: 11456K
[    6.670523] This architecture does not have kernel memory protection.
[    6.690562] udevd[2944]: starting version 3.2.2
[    6.695798] udevd[2945]: starting eudev-3.2.2
[    6.746768] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    6.746844] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    6.746903] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    6.747070] [drm] platform has no IO space, trying MMIO
[    6.747116] [drm] VGA not enabled on entry, requesting chip POST
[    6.747177] [drm] Using P2A bridge for configuration
[    6.747220] [drm] AST 2500 detected
[    6.747254] [drm] Analog VGA only
[    6.747326] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    6.747501] [TTM] Zone  kernel: Available graphics memory: 108817376 kiB
[    6.747569] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    6.747629] [TTM] Initializing pool allocator
[    6.749577] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p848cad7)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP Booting in 9 sec: [sda2] Ubuntu   [24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   70.838522] kexec_core: Starting new kernel
[   91.294492284,5] OPAL: Switch to big-endian OS
[   93.416686172,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d90000:0xc00000000533e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x077c7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 10656 MiB at 0x0000201563000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x2017ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e4d80-0x2017ff6eea7f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6bb080-0x2017ff6c4d7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6b1380-0x2017ff6bb07f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a7680-0x2017ff6b137f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69d980-0x2017ff6a767f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693c80-0x2017ff69d97f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689f80-0x2017ff693c7f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404544
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115232(87%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 206570240K/218103808K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 621824K reserved, 10911744K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000421] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001148] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001768] Console: colour dummy device 80x25
[    0.002331] console [hvc0] enabled
[    0.002331] console [hvc0] enabled
[    0.002622] bootconsole [udbg0] disabled
[    0.002622] bootconsole [udbg0] disabled
[    0.003238] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003359] pid_max: default: 180224 minimum: 1408
[    0.005450] Security Framework initialized
[    0.005485] Yama: becoming mindful.
[    0.005617] AppArmor: AppArmor initialized
[    0.009061] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098729] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.151916] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.152061] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155818] ftrace: allocating 30684 entries in 12 pages
[    0.174250] EEH: PowerNV platform initialized
[    0.174296] POWER9 performance monitor hardware support registered
[    0.176602] smp: Bringing up secondary CPUs ...
[    0.651634] smp: Brought up 8 nodes, 176 CPUs
[    0.651698] numa: Node 0 CPUs: 0-87
[    0.651728] numa: Node 8 CPUs: 88-175
[    0.651757] numa: Node 250 CPUs:
[    0.651784] numa: Node 251 CPUs:
[    0.651811] numa: Node 252 CPUs:
[    0.651838] numa: Node 253 CPUs:
[    0.651866] numa: Node 254 CPUs:
[    0.651892] numa: Node 255 CPUs:
[    0.663984] devtmpfs: initialized
[    0.725126] evm: security.selinux
[    0.725172] evm: security.SMACK64
[    0.725206] evm: security.SMACK64EXEC
[    0.725268] evm: security.SMACK64TRANSMUTE
[    0.725320] evm: security.SMACK64MMAP
[    0.725382] evm: security.ima
[    0.725417] evm: security.capability
[    0.726436] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.726629] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.732677] NET: Registered protocol family 16
[    0.754618] cpuidle: using governor ladder
[    0.778634] cpuidle: using governor menu
[    0.778896] pstore: using zlib compression
[    0.778932] pstore: Registered nvram as persistent store backend
[    0.848961] PCI: Probing PCI hardware
[    0.849093] PCI host bridge to bus 0000:00
[    0.849146] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.849212] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.849270] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.849607] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.849723] PCI host bridge to bus 0001:00
[    0.849770] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.849878] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.849935] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.850565] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.850847] PCI host bridge to bus 0002:00
[    0.850875] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.850939] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.850996] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.851589] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.852061] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.852223] PCI host bridge to bus 0003:00
[    0.852259] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.852324] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.852381] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.852687] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.852799] PCI host bridge to bus 0004:00
[    0.852827] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.852891] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.852948] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.854659] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.856184] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.858119] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.858273] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.858405] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.858536] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.858697] PCI host bridge to bus 0005:00
[    0.858725] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.858789] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.858846] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.859875] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.860081] PCI host bridge to bus 0030:00
[    0.860109] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.860174] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.860231] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.860584] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.860703] PCI host bridge to bus 0033:00
[    0.860731] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.860795] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.860852] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.861217] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.861336] PCI host bridge to bus 0034:00
[    0.861364] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.861428] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.861485] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.861842] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.861961] PCI host bridge to bus 0035:00
[    0.861989] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.862054] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.862110] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.862887] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.863825] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.865108] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.866615] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.869054] PCI host bridge to bus 0006:00
[    0.869081] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.871456] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.875003] PCI host bridge to bus 0007:00
[    0.875031] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.878653] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.882105] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.888402] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.890533] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.892940] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.895361] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.900114] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.905156] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.907575] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.914295] IOMMU table initialized, virtual merging enabled
[    0.914339] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.916851] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.919249] iommu: Adding device 0001:01:00.0 to group 0
[    0.923965] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.931030] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.933500] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.933613] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.933734] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.933824] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.933907] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.934019] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.934142] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.934234] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.934335] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.934753] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.934983] random: fast init done
[    0.935176] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.939896] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.939993] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.940081] iommu: Adding device 0002:02:00.0 to group 1
[    0.940135] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.940213] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.940344] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.940734] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.940783] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.940888] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.941033] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.941436] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.941599] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.941683] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.941790] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.941921] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.942040] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.942155] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.942266] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.942368] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.942470] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.942574] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.942658] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.942747] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.942832] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.942926] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.943044] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.943148] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.943236] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.943321] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.943410] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.943498] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.943600] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.943701] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.943786] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.943869] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.943956] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.944040] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.944123] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.944212] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.944296] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.944383] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.944468] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.944552] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.944943] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.945337] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.950057] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.950133] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.950236] iommu: Adding device 0004:03:00.0 to group 2
[    0.950270] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.950346] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.950476] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.950613] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.950698] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.950778] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.950860] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.951257] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.951311] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.951433] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.951564] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.951963] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.956638] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.956717] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.956811] iommu: Adding device 0004:01:00.0 to group 3
[    0.956898] iommu: Adding device 0004:01:00.1 to group 3
[    0.956977] iommu: Adding device 0004:01:00.2 to group 3
[    0.957049] iommu: Adding device 0004:01:00.3 to group 3
[    0.957120] iommu: Adding device 0004:01:00.4 to group 3
[    0.957189] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.957262] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.957363] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.957476] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.957636] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.957751] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.957878] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.958012] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.958142] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.958271] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.958398] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.958526] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.958926] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.959320] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.964004] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.964082] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.964186] iommu: Adding device 0005:01:00.0 to group 4
[    0.964271] iommu: Adding device 0005:01:00.1 to group 4
[    0.964341] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.964415] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.964561] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.964955] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.965031] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.965444] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.965531] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.965928] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.966052] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.966163] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.966271] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.966657] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.966738] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.966823] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.967209] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.967298] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.967688] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.967747] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.967888] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.968034] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.968176] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.968317] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.968462] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.968607] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.968751] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.968900] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.969045] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.969191] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.969335] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.969477] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.969607] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.969745] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.969896] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.970044] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.970195] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.970342] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.970488] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.970632] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.970777] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.970922] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.971070] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.971220] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.971377] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.971465] pci 0006:00:00.1: Associating to existing PE d
[    0.971541] pci 0006:00:01.0: Associating to existing PE d
[    0.971615] pci 0006:00:01.1: Associating to existing PE d
[    0.971691] pci 0006:00:02.0: Associating to existing PE d
[    0.971772] pci 0006:00:02.1: Associating to existing PE d
[    0.971892] NPU6: Found 1 MMIO ATSD registers
[    0.971897] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.972031] pci 0007:00:00.1: Associating to existing PE d
[    0.972102] pci 0007:00:01.0: Associating to existing PE d
[    0.972161] pci 0007:00:01.1: Associating to existing PE d
[    0.972248] pci 0007:00:02.0: Associating to existing PE d
[    0.972337] pci 0007:00:02.1: Associating to existing PE d
[    0.972406] NPU7: Found 1 MMIO ATSD registers
[    0.976068] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.999913] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.999987] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    1.004250] SCSI subsystem initialized
[    1.004680] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    1.004768] pci 0002:02:00.0: vgaarb: bridge control possible
[    1.004867] vgaarb: loaded
[    1.005037] usbcore: registered new interface driver usbfs
[    1.005098] usbcore: registered new interface driver hub
[    1.005620] usbcore: registered new device driver usb
[    1.005714] pps_core: LinuxPPS API ver. 1 registered
[    1.005781] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    1.005896] PTP clock support registered
[    1.006759] NetLabel: Initializing
[    1.006793] NetLabel:  domain hash size = 128
[    1.006853] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    1.006973] NetLabel:  unlabeled traffic allowed by default
[    1.007885] clocksource: Switched to clocksource timebase
[    1.027447] VFS: Disk quotas dquot_6.6.0
[    1.027682] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    1.028240] AppArmor: AppArmor Filesystem Enabled
[    1.031740] NET: Registered protocol family 2
[    1.032571] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    1.034391] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    1.034760] TCP: Hash tables configured (established 524288 bind 65536)
[    1.034878] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.035566] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.036804] NET: Registered protocol family 1
[    1.037127] Unpacking initramfs...
[    1.977179] Freeing initrd memory: 38528K
[    2.013206] audit: initializing netlink subsys (disabled)
[    2.013322] audit: type=2000 audit(1506618200.004:1): initialized
[    2.020565] Initialise system trusted keyrings
[    2.021229] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    2.024681] zbud: loaded
[    2.028962] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    2.029822] fuse init (API version 7.26)
[    2.034313] Key type asymmetric registered
[    2.034354] Asymmetric key parser 'x509' registered
[    2.034421] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    2.034790] io scheduler noop registered
[    2.034823] io scheduler deadline registered
[    2.034894] io scheduler cfq registered (default)
[    2.037455] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.120099] Console: switching to colour frame buffer device 128x48
[    2.202543] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.202837] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.202912] hvc0: No interrupts property, using OPAL event
[    2.203366] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.205761] Linux agpgart interface v0.103
[    2.221010] loop: module loaded
[    2.221384] libphy: Fixed MDIO Bus: probed
[    2.221427] tun: Universal TUN/TAP device driver, 1.6
[    2.221469] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.221615] PPP generic driver version 2.4.2
[    2.221780] VFIO - User Level meta-driver version: 0.3
[    2.222758] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.222856] ehci-pci: EHCI PCI platform driver
[    2.222950] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.223025] ohci-pci: OHCI PCI platform driver
[    2.223119] uhci_hcd: USB Universal Host Controller Interface driver
[    2.223321] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.223433] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.223599] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.223743] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.224392] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.224450] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.224537] usb usb1: Product: xHCI Host Controller
[    2.224571] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.224660] usb usb1: SerialNumber: 0001:01:00.0
[    2.224917] hub 1-0:1.0: USB hub found
[    2.224977] hub 1-0:1.0: 4 ports detected
[    2.225356] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.225419] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.225556] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.225697] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.225774] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.225881] usb usb2: Product: xHCI Host Controller
[    2.225954] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.226037] usb usb2: SerialNumber: 0001:01:00.0
[    2.226264] hub 2-0:1.0: USB hub found
[    2.226303] hub 2-0:1.0: 4 ports detected
[    2.227072] mousedev: PS/2 mouse device common for all mice
[    2.291831] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    2.291897] i2c /dev entries driver
[    2.294914] device-mapper: uevent: version 1.0.3
[    2.295300] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    2.295391] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    2.308684] ledtrig-cpu: registered to indicate activity on CPUs
[    2.309725] NET: Registered protocol family 10
[    2.316981] Segment Routing with IPv6
[    2.317057] NET: Registered protocol family 17
[    2.317137] Key type dns_resolver registered
[    2.317449] registered taskstats version 1
[    2.317499] Loading compiled-in X.509 certificates
[    2.321748] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    2.322049] zswap: loaded using pool lzo/zbud
[    2.324983] Key type big_key registered
[    2.325017] Key type trusted registered
[    2.328022] Key type encrypted registered
[    2.328051] AppArmor: AppArmor sha1 policy hashing enabled
[    2.328103] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    2.328219] evm: HMAC attrs: 0x1
[    2.383890] rtc-opal opal-rtc: setting system clock to 2017-09-28 17:03:20 UTC (1506618200)
[    2.384686] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.384691] Unable to open file: /etc/keys/x509_evm.der (-2)
[    2.385171] Freeing unused kernel memory: 4416K
[    2.385267] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    2.598375] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.600840] tg3.c:v3.137 (May 11, 2014)
[    2.605705] [drm] Initialized
[    2.608524] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.608590] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    2.609651] scsi host0: ahci
[    2.609912] scsi host1: ahci
[    2.610154] scsi host2: ahci
[    2.610389] scsi host3: ahci
[    2.610526] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    2.610611] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    2.610719] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    2.610834] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    2.617075] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    2.617605] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    2.617688] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.617814] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.617928] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.629550] [drm] platform has no IO space, trying MMIO
[    2.629610] [drm] Using P2A bridge for configuration
[    2.629691] [drm] AST 2500 detected
[    2.629742] [drm] Analog VGA only
[    2.629797] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    2.629927] [TTM] Zone  kernel: Available graphics memory: 108795936 kiB
[    2.629997] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    2.630090] [TTM] Initializing pool allocator
[    2.630158] [TTM] Initializing DMA pool allocator
[    2.633234] fb: switching to astdrmfb from OFfb vga
[    2.633311] Console: switching to colour dummy device 80x25
[    2.635586] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    2.641487] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    2.641536] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.641581] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.641621] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.651707] Console: switching to colour frame buffer device 128x48
[    2.672273] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    2.699784] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    2.714445] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    2.756313] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    2.925972] ata4: SATA link down (SStatus 0 SControl 300)
[    2.926051] ata3: SATA link down (SStatus 0 SControl 300)
[    3.087783] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.087850] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.088753] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.088817] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.088908] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.088995] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.089492] ata2.00: configured for UDMA/133
[    3.089615] ata1.00: configured for UDMA/133
[    3.090386] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.136031] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.136054] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    3.136159] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    3.136230] sd 0:0:0:0: [sda] Write Protect is off
[    3.136304] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.136777] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.184014] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.184045] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    3.184139] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    3.184194] sd 1:0:0:0: [sdb] Write Protect is off
[    3.184282] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.196317]  sda: sda1 sda2
[    3.196803] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    3.210007] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: clean, 61900/61054976 files, 5015045/244188416 blocks
done.
[    3.643611] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    4.482820] ip_tables: (C) 2000-2006 Netfilter Core Team
[    4.524111] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    4.524929] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[    4.537633] systemd[1]: Set hostname to &lt;w54L&gt;.
[   16.570407] systemd[1]: Created slice System Slice.
[[0;32m  OK  [0m] Created slice System Slice.
[   16.570758] systemd[1]: Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[   16.570985] systemd[1]: Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[   16.571408] systemd[1]: Created slice User and Session Slice.
[[0;32m  OK  [0m] Created slice User and Session Slice.
[   16.572391] systemd[1]: Mounting Debug File System...
         Mounting Debug File System...
[   16.572625] systemd[1]: Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[   16.572905] systemd[1]: Reached target Remote File Systems.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[   16.573150] systemd[1]: Reached target Slices.
[[0;32m  OK  [0m] Reached target Slices.
[   16.573321] random: crng init done
[   16.574030] systemd[1]: Mounting POSIX Message Queue File System...
         Mounting POSIX Message Queue File System...
[   16.574290] systemd[1]: Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
         Starting Uncomplicated firewall...
         Starting Load Kernel Modules...
         Starting Set the console keyboard layout...
         Starting Nameserver information manager...
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[[0;32m  OK  [0m] Started Read required files in advance.
         Mounting Huge Pages File System...
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
         Starting Journal Service...
[[0;32m  OK  [0m] Listening on udev Control Socket.
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Starting Apply Kernel Variables...
         Mounting FUSE Control File System...
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Activating swap /swapfile...
         Starting Load/Save Random Seed...
         Starting udev Coldplug all Devices...
         Starting Flush Journal to Persistent Storage...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting AppArmor initialization...
         Starting Set console font and keymap...
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting Create Volatile Files and Directories...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Started AppArmor initialization.
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[  115.452170029,3] I2C: Request timeout !
[  115.452233401,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  115.452326812,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[  115.452405042,3] I2C:  start_time=0000000dcfdc06ef end_time=0000000dd0790b93 (duration=00000000009d04a4)
[  115.452504246,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[  116.069423245,3] I2C: Request timeout !
[  116.069482705,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  116.069577626,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[  116.069636843,3] I2C:  start_time=0000000dd790639f end_time=0000000dd82d4ded (duration=00000000009cea4e)
[  116.069730481,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
         Starting Accounts Service...
         Starting LSB: daemon to balance interrupts for SMP systems...
[[0;32m  OK  [0m] Started Regular background program processing daemon.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Reached target Timers.
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
         Starting Login Service...
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
[  116.190516554,3] I2C: Request timeout !
[  116.190569252,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  116.190654641,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[  116.190717517,3] I2C:  start_time=0000000ddec82549 end_time=0000000ddf650c65 (duration=00000000009ce71c)
[  116.190817650,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started System Logging Service.
[  116.336202970,3] I2C: Request timeout !
[  116.336267759,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  116.336355489,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[  116.336423006,3] I2C:  start_time=0000000de7772544 end_time=0000000de8140bf0 (duration=00000000009ce6ac)
[  116.336525122,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting Permit User Sessions...
         Starting Network Name Resolution...
         Starting OpenBSD Secure Shell server...
[  116.387498385,3] I2C: Request timeout !
[  116.387544595,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[  116.387639501,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[  116.387707504,3] I2C:  start_time=0000000dea85daf4 end_time=0000000deb22c0ab (duration=00000000009ce5b7)
[  116.387793460,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Permit User Sessions.
[[0;32m  OK  [0m] Started Login Service.
[[0;32m  OK  [0m] Started Accounts Service.
         Starting Terminate Plymouth Boot Screen...
         Starting Hold until boot process finishes up...
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu 17.04 w54L hvc0

w54L login: </msg>
<status endtime="20170928 17:03:34.830" starttime="20170928 17:03:34.721" status="PASS"></status>
</kw>
<status endtime="20170928 17:03:34.831" starttime="20170928 17:03:34.307" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170928 17:03:34.831" starttime="20170928 16:56:16.307" status="PASS" critical="yes"></status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170928 17:03:34.832" starttime="20170928 16:56:16.254" status="PASS"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170928 17:03:34.835" starttime="20170928 16:56:07.369" status="PASS"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="0">Critical Tests</stat>
<stat pass="2" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">chassisboot</stat>
<stat pass="1" fail="0">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="2" id="s1" name="Tests" fail="0">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="1" id="s1-s2" name="Test Basic Poweron" fail="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg level="WARN" timestamp="20170928 16:56:34.479">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
