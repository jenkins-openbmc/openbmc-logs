<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161217 01:36:20.312" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161217 01:36:20.795" level="INFO">
PATH: /home/fspcibld/barreleye-20161217012219.all.tar</msg>
<status status="PASS" endtime="20161217 01:36:20.795" starttime="20161217 01:36:20.795"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161217 01:36:20.796" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161217012219.all.tar"&gt;/home/fspcibld/barreleye-20161217012219.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161217 01:36:20.796" starttime="20161217 01:36:20.795"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161217 01:36:20.796" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161217012219.all.tar</msg>
<status status="PASS" endtime="20161217 01:36:20.797" starttime="20161217 01:36:20.796"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:20.797" starttime="20161217 01:36:20.794"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161217 01:36:20.799" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161217 01:36:20.799" starttime="20161217 01:36:20.799"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161217 01:36:20.803" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161217 01:36:23.811" level="INFO">${RC} = 0</msg>
<msg timestamp="20161217 01:36:23.811" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.83 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.756 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161217 01:36:23.811" starttime="20161217 01:36:20.799"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161217 01:36:23.814" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.83 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.756 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.922 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.721 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.721/1.059/1.839/0.457 ms</msg>
<status status="PASS" endtime="20161217 01:36:23.814" starttime="20161217 01:36:23.813"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:23.816" starttime="20161217 01:36:23.815"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:23.816" starttime="20161217 01:36:20.798"></status>
</kw>
<msg timestamp="20161217 01:36:23.816" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161217 01:36:23.816" starttime="20161217 01:36:20.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:23.821" starttime="20161217 01:36:23.817"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:36:23.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:36:23.823" starttime="20161217 01:36:23.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:36:23.824" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:36:23.824" starttime="20161217 01:36:23.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:36:23.825" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:36:23.825" starttime="20161217 01:36:23.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:36:23.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:36:23.825" starttime="20161217 01:36:23.825"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:36:24.173" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:36:24.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:24.173" starttime="20161217 01:36:23.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:36:24.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:36:24.174" starttime="20161217 01:36:24.173"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:24.174" starttime="20161217 01:36:23.821"></status>
</kw>
<msg timestamp="20161217 01:36:24.174" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161217 01:36:24.174" starttime="20161217 01:36:23.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:24.177" starttime="20161217 01:36:24.174"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:36:24.178" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:36:24.178" starttime="20161217 01:36:24.178"></status>
</kw>
<msg timestamp="20161217 01:36:24.178" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:36:24.178" starttime="20161217 01:36:24.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:24.182" starttime="20161217 01:36:24.181"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:24.182" starttime="20161217 01:36:24.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:24.185" starttime="20161217 01:36:24.182"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:36:24.185" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:36:24.186" starttime="20161217 01:36:24.185"></status>
</kw>
<msg timestamp="20161217 01:36:24.186" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:36:24.186" starttime="20161217 01:36:24.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:24.190" starttime="20161217 01:36:24.189"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:24.190" starttime="20161217 01:36:24.189"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:24.190" starttime="20161217 01:36:24.186"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:36:24.190" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:36:26.658" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:36:26.659" starttime="20161217 01:36:24.190"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:26.659" starttime="20161217 01:36:24.177"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:26.660" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161217 01:36:26.718" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:26.719" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161217 01:36:26.719" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:26.719" starttime="20161217 01:36:26.659"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:26.720" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:26.720" starttime="20161217 01:36:26.719"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:26.720" starttime="20161217 01:36:20.797"></status>
</kw>
<msg timestamp="20161217 01:36:26.720" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161217 01:36:26.720" starttime="20161217 01:36:20.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:26.725" starttime="20161217 01:36:26.720"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:26.725" starttime="20161217 01:36:20.797"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:36:26.729" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:36:26.730" starttime="20161217 01:36:26.729"></status>
</kw>
<msg timestamp="20161217 01:36:26.730" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:36:26.730" starttime="20161217 01:36:26.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:26.733" starttime="20161217 01:36:26.733"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:26.733" starttime="20161217 01:36:26.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:26.736" starttime="20161217 01:36:26.733"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:36:26.737" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:36:26.737" starttime="20161217 01:36:26.736"></status>
</kw>
<msg timestamp="20161217 01:36:26.737" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:36:26.737" starttime="20161217 01:36:26.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:26.741" starttime="20161217 01:36:26.741"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:26.741" starttime="20161217 01:36:26.740"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:26.741" starttime="20161217 01:36:26.737"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:36:26.742" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:36:28.923" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:36:28.924" starttime="20161217 01:36:26.741"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:28.924" starttime="20161217 01:36:26.727"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:28.925" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161217 01:36:29.015" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:29.016" level="INFO">${version} = 20161216222224</msg>
<msg timestamp="20161217 01:36:29.016" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:29.016" starttime="20161217 01:36:28.924"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:29.017" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:29.017" starttime="20161217 01:36:29.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:29.023" starttime="20161217 01:36:29.022"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:29.023" starttime="20161217 01:36:29.017"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:29.023" starttime="20161217 01:36:26.726"></status>
</kw>
<msg timestamp="20161217 01:36:29.023" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161217 01:36:29.023" starttime="20161217 01:36:26.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:29.028" starttime="20161217 01:36:29.024"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:36:29.031" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:36:29.031" starttime="20161217 01:36:29.030"></status>
</kw>
<msg timestamp="20161217 01:36:29.031" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:36:29.031" starttime="20161217 01:36:29.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:29.034" starttime="20161217 01:36:29.034"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:29.034" starttime="20161217 01:36:29.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:29.037" starttime="20161217 01:36:29.035"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:36:29.038" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:36:29.038" starttime="20161217 01:36:29.038"></status>
</kw>
<msg timestamp="20161217 01:36:29.038" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:36:29.038" starttime="20161217 01:36:29.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:29.042" starttime="20161217 01:36:29.042"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:29.042" starttime="20161217 01:36:29.041"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:29.042" starttime="20161217 01:36:29.039"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:36:29.043" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:36:31.261" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:36:31.262" starttime="20161217 01:36:29.042"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:31.262" starttime="20161217 01:36:29.030"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20161217 01:36:31.263" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20161217 01:36:31.362" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:31.362" level="INFO">${output} = </msg>
<msg timestamp="20161217 01:36:31.362" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals on disk.</msg>
<msg timestamp="20161217 01:36:31.362" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20161217 01:36:31.362" starttime="20161217 01:36:31.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:31.363" starttime="20161217 01:36:31.362"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${stderr}</arg>
<arg>Vacuuming done</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:31.364" starttime="20161217 01:36:31.363"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:31.364" starttime="20161217 01:36:29.029"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161217 01:36:31.366" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161217 01:36:31.366" starttime="20161217 01:36:31.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161217 01:36:31.367" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161217 01:36:31.367" starttime="20161217 01:36:31.367"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:36:31.369" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161217 01:36:31.370" starttime="20161217 01:36:31.369"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:36:31.372" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161217 01:36:31.372" starttime="20161217 01:36:31.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:36:31.373" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:36:31.373" starttime="20161217 01:36:31.373"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:31.374" starttime="20161217 01:36:31.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:36:31.382" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:36:31.382" starttime="20161217 01:36:31.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:36:31.383" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:36:31.384" starttime="20161217 01:36:31.383"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:31.384" starttime="20161217 01:36:31.382"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:31.384" starttime="20161217 01:36:31.380"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:31.384" starttime="20161217 01:36:31.375"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:36:31.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:36:31.386" starttime="20161217 01:36:31.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:36:31.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:36:31.386" starttime="20161217 01:36:31.386"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:36:31.387" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:36:31.387" starttime="20161217 01:36:31.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:36:31.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:36:31.387" starttime="20161217 01:36:31.387"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:36:31.730" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:36:31.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:31.730" starttime="20161217 01:36:31.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:36:31.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:36:31.731" starttime="20161217 01:36:31.731"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:31.732" starttime="20161217 01:36:31.384"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161217 01:36:32.011" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:36:32.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.012" starttime="20161217 01:36:31.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:36:32.019" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:36:32.019" starttime="20161217 01:36:32.018"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:36:32.020" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:36:32.021" starttime="20161217 01:36:32.020"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.021" starttime="20161217 01:36:32.019"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.021" starttime="20161217 01:36:32.017"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.022" starttime="20161217 01:36:32.012"></status>
</kw>
<msg timestamp="20161217 01:36:32.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.022" starttime="20161217 01:36:31.370"></status>
</kw>
<msg timestamp="20161217 01:36:32.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.023" starttime="20161217 01:36:31.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:36:32.023" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.024" starttime="20161217 01:36:32.023"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161217 01:36:32.026" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161217 01:36:32.026" starttime="20161217 01:36:32.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161217 01:36:32.027" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161217 01:36:32.027" starttime="20161217 01:36:32.026"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:36:32.029" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161217 01:36:32.029" starttime="20161217 01:36:32.029"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:36:32.030" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161217 01:36:32.030" starttime="20161217 01:36:32.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:36:32.031" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:36:32.031" starttime="20161217 01:36:32.031"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:32.031" starttime="20161217 01:36:32.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:36:32.035" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:36:32.036" starttime="20161217 01:36:32.035"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:36:32.036" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:36:32.037" starttime="20161217 01:36:32.036"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.037" starttime="20161217 01:36:32.036"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.037" starttime="20161217 01:36:32.034"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.038" starttime="20161217 01:36:32.032"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:36:32.038" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:36:32.039" starttime="20161217 01:36:32.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:36:32.039" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:36:32.039" starttime="20161217 01:36:32.039"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:36:32.040" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:36:32.040" starttime="20161217 01:36:32.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:36:32.040" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:36:32.040" starttime="20161217 01:36:32.040"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:36:32.388" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:36:32.388" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.388" starttime="20161217 01:36:32.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:36:32.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.389" starttime="20161217 01:36:32.388"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.389" starttime="20161217 01:36:32.038"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161217 01:36:32.649" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:36:32.650" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.650" starttime="20161217 01:36:32.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:36:32.653" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:36:32.654" starttime="20161217 01:36:32.653"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:36:32.654" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161217 01:36:32.655" starttime="20161217 01:36:32.654"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.655" starttime="20161217 01:36:32.654"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.655" starttime="20161217 01:36:32.653"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.655" starttime="20161217 01:36:32.650"></status>
</kw>
<msg timestamp="20161217 01:36:32.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.656" starttime="20161217 01:36:32.029"></status>
</kw>
<msg timestamp="20161217 01:36:32.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.656" starttime="20161217 01:36:32.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:36:32.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:36:32.657" starttime="20161217 01:36:32.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161217 01:36:32.657" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161217 01:36:32.657" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161217 01:36:32.657" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161217 01:36:32.657" starttime="20161217 01:36:32.657"></status>
</kw>
<msg timestamp="20161217 01:36:32.658" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161217 01:36:32.658" starttime="20161217 01:36:32.025"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:32.658" starttime="20161217 01:36:32.658"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.658" starttime="20161217 01:36:32.025"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.658" starttime="20161217 01:36:32.024"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.658" starttime="20161217 01:36:31.365"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161217 01:36:32.660" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161217 01:36:32.660" starttime="20161217 01:36:32.660"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:36:32.661" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161217 01:36:32.662" starttime="20161217 01:36:32.661"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161217 01:36:32.663" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161217 01:36:32.663" starttime="20161217 01:36:32.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:36:32.664" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:36:32.664" starttime="20161217 01:36:32.663"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:32.664" starttime="20161217 01:36:32.664"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:36:32.666" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:36:32.666" starttime="20161217 01:36:32.665"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:36:32.667" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161217 01:36:32.667" starttime="20161217 01:36:32.666"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.667" starttime="20161217 01:36:32.666"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:32.668" starttime="20161217 01:36:32.664"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161217 01:36:32.668" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161217 01:36:32.669" starttime="20161217 01:36:32.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161217 01:36:32.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161217 01:36:32.670" starttime="20161217 01:36:32.669"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161217 01:36:32.670" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161217 01:36:32.670" starttime="20161217 01:36:32.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161217 01:36:32.671" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161217 01:36:32.671" starttime="20161217 01:36:32.670"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161217 01:36:33.381" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161217 01:36:33.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:33.381" starttime="20161217 01:36:32.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:36:33.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161217 01:36:33.382" starttime="20161217 01:36:33.382"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:33.382" starttime="20161217 01:36:32.668"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161217 01:36:33.526" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161217 01:36:33.526" level="INFO">${ret} = &lt;Response [403]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:33.526" starttime="20161217 01:36:33.383"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161217 01:36:33.528" level="INFO">${msg} = Response code:403, Content:{
  "data": {
    "description": "The specified resource cannot be created: '/org/openbmc/settings/host0'"
  }, 
  "message": "403 Forbidden", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161217 01:36:33.528" starttime="20161217 01:36:33.527"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161217 01:36:33.530" level="INFO">Response code:403, Content:{
  "data": {
    "description": "The specified resource cannot be created: '/org/openbmc/settings/host0'"
  }, 
  "message": "403 Forbidden", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161217 01:36:33.533" starttime="20161217 01:36:33.529"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:33.533" starttime="20161217 01:36:33.528"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:33.534" starttime="20161217 01:36:33.527"></status>
</kw>
<msg timestamp="20161217 01:36:33.534" level="INFO">${resp} = &lt;Response [403]&gt;</msg>
<status status="PASS" endtime="20161217 01:36:33.534" starttime="20161217 01:36:32.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161217 01:36:33.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20161217 01:36:33.535" level="FAIL">403 != 200</msg>
<status status="FAIL" endtime="20161217 01:36:33.535" starttime="20161217 01:36:33.534"></status>
</kw>
<status status="FAIL" endtime="20161217 01:36:33.536" starttime="20161217 01:36:32.660"></status>
</kw>
<status status="FAIL" endtime="20161217 01:36:33.536" starttime="20161217 01:36:32.659"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="FAIL" endtime="20161217 01:36:33.537" critical="yes" starttime="20161217 01:36:20.794">403 != 200</status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161217 01:36:33.543" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161217 01:36:33.543" starttime="20161217 01:36:33.543"></status>
</kw>
<msg timestamp="20161217 01:36:33.543" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161217 01:36:33.544" starttime="20161217 01:36:33.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:33.547" starttime="20161217 01:36:33.547"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:33.547" starttime="20161217 01:36:33.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:33.550" starttime="20161217 01:36:33.547"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161217 01:36:33.551" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161217 01:36:33.551" starttime="20161217 01:36:33.550"></status>
</kw>
<msg timestamp="20161217 01:36:33.551" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161217 01:36:33.551" starttime="20161217 01:36:33.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:33.555" starttime="20161217 01:36:33.554"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:33.555" starttime="20161217 01:36:33.554"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:33.555" starttime="20161217 01:36:33.551"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161217 01:36:33.556" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161217 01:36:35.978" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161217 01:36:35.978" starttime="20161217 01:36:33.555"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:35.979" starttime="20161217 01:36:33.542"></status>
</kw>
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:35.982" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161217 01:36:36.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:36.324" level="INFO">${bmc_cpu_usage_output} = 41%</msg>
<msg timestamp="20161217 01:36:36.324" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:36.324" starttime="20161217 01:36:35.981"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:36.325" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:36.325" starttime="20161217 01:36:36.324"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:36.326" level="INFO">${bmc_cpu_percentage} = 41</msg>
<status status="PASS" endtime="20161217 01:36:36.326" starttime="20161217 01:36:36.325"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:36.331" starttime="20161217 01:36:36.326"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:36.331" starttime="20161217 01:36:35.980"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:36.331" starttime="20161217 01:36:35.980"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:36.332" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161217 01:36:36.763" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:36.763" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161217 01:36:36.764" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:36.764" starttime="20161217 01:36:36.332"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:36.764" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:36.765" starttime="20161217 01:36:36.764"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:36.765" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161217 01:36:36.765" starttime="20161217 01:36:36.765"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:36.770" starttime="20161217 01:36:36.766"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:36.771" starttime="20161217 01:36:36.331"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:36.771" starttime="20161217 01:36:36.331"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:36.772" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161217 01:36:37.111" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:37.111" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161217 01:36:37.111" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:37.111" starttime="20161217 01:36:36.772"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:37.112" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:37.112" starttime="20161217 01:36:37.112"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:37.113" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161217 01:36:37.113" starttime="20161217 01:36:37.113"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:37.118" starttime="20161217 01:36:37.114"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.119" starttime="20161217 01:36:36.771"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.119" starttime="20161217 01:36:36.771"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.119" starttime="20161217 01:36:35.980"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.119" starttime="20161217 01:36:35.979"></status>
</kw>
<kw name="Check BMC Mem Performance" library="utils">
<doc>Minimal 10% of memory should be free</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:37.122" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161217 01:36:37.289" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:37.289" level="INFO">${bmc_mem_free_output} = 368784</msg>
<msg timestamp="20161217 01:36:37.290" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:37.290" starttime="20161217 01:36:37.122"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:37.290" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:37.290" starttime="20161217 01:36:37.290"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:37.291" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161217 01:36:37.491" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:37.491" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161217 01:36:37.491" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:37.491" starttime="20161217 01:36:37.291"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:37.492" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:37.492" starttime="20161217 01:36:37.491"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:37.499" level="INFO">${bmc_mem_percentage} = 36878400</msg>
<status status="PASS" endtime="20161217 01:36:37.499" starttime="20161217 01:36:37.492"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:37.506" level="INFO">${bmc_mem_percentage} = 73</msg>
<status status="PASS" endtime="20161217 01:36:37.506" starttime="20161217 01:36:37.499"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:37.512" starttime="20161217 01:36:37.507"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.512" starttime="20161217 01:36:37.121"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.512" starttime="20161217 01:36:37.121"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:37.513" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161217 01:36:37.663" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:37.664" level="INFO">${bmc_mem_free_output} = 368732</msg>
<msg timestamp="20161217 01:36:37.664" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:37.664" starttime="20161217 01:36:37.513"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:37.664" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:37.664" starttime="20161217 01:36:37.664"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:37.665" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161217 01:36:37.864" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:37.864" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161217 01:36:37.864" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:37.864" starttime="20161217 01:36:37.664"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:37.865" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:37.865" starttime="20161217 01:36:37.864"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:37.870" level="INFO">${bmc_mem_percentage} = 36873200</msg>
<status status="PASS" endtime="20161217 01:36:37.870" starttime="20161217 01:36:37.865"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:37.875" level="INFO">${bmc_mem_percentage} = 73</msg>
<status status="PASS" endtime="20161217 01:36:37.875" starttime="20161217 01:36:37.870"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:37.879" starttime="20161217 01:36:37.875"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.880" starttime="20161217 01:36:37.512"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:37.880" starttime="20161217 01:36:37.512"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:37.880" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161217 01:36:38.047" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:38.047" level="INFO">${bmc_mem_free_output} = 368660</msg>
<msg timestamp="20161217 01:36:38.047" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:38.048" starttime="20161217 01:36:37.880"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:38.048" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:38.048" starttime="20161217 01:36:38.048"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161217 01:36:38.048" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161217 01:36:38.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161217 01:36:38.215" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161217 01:36:38.215" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161217 01:36:38.215" starttime="20161217 01:36:38.048"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161217 01:36:38.216" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161217 01:36:38.216" starttime="20161217 01:36:38.215"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:38.218" level="INFO">${bmc_mem_percentage} = 36866000</msg>
<status status="PASS" endtime="20161217 01:36:38.218" starttime="20161217 01:36:38.216"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161217 01:36:38.221" level="INFO">${bmc_mem_percentage} = 73</msg>
<status status="PASS" endtime="20161217 01:36:38.221" starttime="20161217 01:36:38.219"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161217 01:36:38.224" starttime="20161217 01:36:38.222"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:38.224" starttime="20161217 01:36:37.880"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:38.224" starttime="20161217 01:36:37.880"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:38.224" starttime="20161217 01:36:37.120"></status>
</kw>
<status status="PASS" endtime="20161217 01:36:38.224" starttime="20161217 01:36:37.120"></status>
</kw>
<doc>Check performance of memory and BMC CPU.</doc>
<status status="PASS" endtime="20161217 01:36:38.225" critical="yes" starttime="20161217 01:36:33.541"></status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20161217 01:36:38.226" starttime="20161217 01:36:20.315"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="1">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
