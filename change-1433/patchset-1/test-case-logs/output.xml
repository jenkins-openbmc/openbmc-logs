<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161208 12:51:24.599">
<suite id="s1" name="Tests" source="/tmp/root/16718/obmc-robot/tests">
<suite id="s1-s1" name="Security" source="/tmp/root/16718/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/16718/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:25.273">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:25.272" endtime="20161208 12:51:25.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.274">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:25.273" endtime="20161208 12:51:25.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.274">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:25.274" endtime="20161208 12:51:25.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:25.275" endtime="20161208 12:51:25.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.626">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:25.626">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:25.275" endtime="20161208 12:51:25.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:25.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:25.626" endtime="20161208 12:51:25.627" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.272" endtime="20161208 12:51:25.628" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 12:51:25.629" endtime="20161208 12:51:25.634" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:25.635">Created directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs"&gt;/tmp/root/16718/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20161208 12:51:25.635" endtime="20161208 12:51:25.635" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:25.637">File '/tmp/root/16718/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20161208 12:51:25.636" endtime="20161208 12:51:25.637" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:25.637">${exist} = False</msg>
<status starttime="20161208 12:51:25.636" endtime="20161208 12:51:25.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:25.641">Created file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:51:25.640" endtime="20161208 12:51:25.641" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.638" endtime="20161208 12:51:25.641" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.642">${cur_time} = 2016-12-08 12:51:25:641548</msg>
<status starttime="20161208 12:51:25.641" endtime="20161208 12:51:25.642" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.642">${cur_time} = 20161208125125641548</msg>
<status starttime="20161208 12:51:25.642" endtime="20161208 12:51:25.642" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:25.642">${cur_time} = 20161208125125641548</msg>
<status starttime="20161208 12:51:25.641" endtime="20161208 12:51:25.642" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:25.643">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:51:25.643" endtime="20161208 12:51:25.643" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.634" endtime="20161208 12:51:25.643" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.628" endtime="20161208 12:51:25.644" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20161208 12:51:25.271" endtime="20161208 12:51:25.644" status="PASS" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161208 12:51:25.644">Delete All Sessions</msg>
<status starttime="20161208 12:51:25.644" endtime="20161208 12:51:25.644" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20161208 12:51:24.628" endtime="20161208 12:51:25.644" status="PASS"></status>
</suite>
<status starttime="20161208 12:51:24.626" endtime="20161208 12:51:25.645" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Association" source="/tmp/root/16718/obmc-robot/tests/test_association.robot">
<kw type="setup" name="Suite Initialization Setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:25.677">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:51:25.677" endtime="20161208 12:51:25.677" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:25.678">${has_host} = False</msg>
<status starttime="20161208 12:51:25.677" endtime="20161208 12:51:25.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:51:25.681" endtime="20161208 12:51:25.681" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.678" endtime="20161208 12:51:25.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.685">${port_num} = 22</msg>
<status starttime="20161208 12:51:25.685" endtime="20161208 12:51:25.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.686">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:51:25.686" endtime="20161208 12:51:25.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:25.686">${https_num} = 443</msg>
<status starttime="20161208 12:51:25.686" endtime="20161208 12:51:25.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:25.687">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:51:25.687" endtime="20161208 12:51:25.687" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.685" endtime="20161208 12:51:25.687" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.682" endtime="20161208 12:51:25.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:25.688">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:51:25.688" endtime="20161208 12:51:25.688" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:25.688">${has_port} = False</msg>
<status starttime="20161208 12:51:25.688" endtime="20161208 12:51:25.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:51:25.692" endtime="20161208 12:51:25.692" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:51:25.693" endtime="20161208 12:51:25.693" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.692" endtime="20161208 12:51:25.693" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.689" endtime="20161208 12:51:25.693" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:25.693">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:51:28.107">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:51:25.693" endtime="20161208 12:51:28.108" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.676" endtime="20161208 12:51:28.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.113">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161208 12:51:28.112" endtime="20161208 12:51:28.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.114">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:28.113" endtime="20161208 12:51:28.114" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:28.114" endtime="20161208 12:51:28.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.122">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:28.121" endtime="20161208 12:51:28.122" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:28.123">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:28.123" endtime="20161208 12:51:28.124" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.122" endtime="20161208 12:51:28.124" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.120" endtime="20161208 12:51:28.124" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.115" endtime="20161208 12:51:28.124" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:28.125">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:28.125" endtime="20161208 12:51:28.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:28.127" endtime="20161208 12:51:28.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.128">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:28.127" endtime="20161208 12:51:28.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:28.128" endtime="20161208 12:51:28.128" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.461">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:28.461">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:28.129" endtime="20161208 12:51:28.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:28.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:28.462" endtime="20161208 12:51:28.462" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.124" endtime="20161208 12:51:28.462" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.749">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:28.749">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:28.462" endtime="20161208 12:51:28.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.756">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:28.755" endtime="20161208 12:51:28.756" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:28.758">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:28.757" endtime="20161208 12:51:28.758" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.757" endtime="20161208 12:51:28.758" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.755" endtime="20161208 12:51:28.758" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.750" endtime="20161208 12:51:28.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:28.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:28.111" endtime="20161208 12:51:28.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:28.760">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:28.759" endtime="20161208 12:51:28.760" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.761">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 12:51:28.761" endtime="20161208 12:51:28.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.768">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:51:28.767" endtime="20161208 12:51:28.768" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:28.769">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:51:28.769" endtime="20161208 12:51:28.769" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.768" endtime="20161208 12:51:28.769" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.767" endtime="20161208 12:51:28.769" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.762" endtime="20161208 12:51:28.769" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:28.770">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:28.770" endtime="20161208 12:51:28.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.771">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:28.771" endtime="20161208 12:51:28.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.772">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:28.771" endtime="20161208 12:51:28.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:28.772">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:28.772" endtime="20161208 12:51:28.772" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:29.550">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:28.772" endtime="20161208 12:51:29.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:29.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:29.550" endtime="20161208 12:51:29.551" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.770" endtime="20161208 12:51:29.551" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.687">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:29.687">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:29.551" endtime="20161208 12:51:29.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.694">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:29.693" endtime="20161208 12:51:29.694" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:29.695">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:29.695" endtime="20161208 12:51:29.696" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.694" endtime="20161208 12:51:29.696" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.693" endtime="20161208 12:51:29.696" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.688" endtime="20161208 12:51:29.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:29.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:28.760" endtime="20161208 12:51:29.697" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.698">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:29.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:29.698">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:29.697" endtime="20161208 12:51:29.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:29.698">Length is 0</msg>
<status starttime="20161208 12:51:29.698" endtime="20161208 12:51:29.699" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.109" endtime="20161208 12:51:29.699" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:28.108" endtime="20161208 12:51:29.699" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:25.676" endtime="20161208 12:51:29.699" status="PASS"></status>
</kw>
<test id="s1-s2-t1" name="Create error log on single FRU">
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.702">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161208 12:51:29.701" endtime="20161208 12:51:29.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.703">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:29.703" endtime="20161208 12:51:29.703" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:29.704" endtime="20161208 12:51:29.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.708">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:29.708" endtime="20161208 12:51:29.708" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:29.709">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:29.709" endtime="20161208 12:51:29.709" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.709" endtime="20161208 12:51:29.709" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.707" endtime="20161208 12:51:29.709" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.704" endtime="20161208 12:51:29.710" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:29.710">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:29.710" endtime="20161208 12:51:29.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:29.711" endtime="20161208 12:51:29.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.712">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:29.711" endtime="20161208 12:51:29.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:29.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:29.712" endtime="20161208 12:51:29.712" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:30.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:29.713" endtime="20161208 12:51:30.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:30.190" endtime="20161208 12:51:30.190" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.710" endtime="20161208 12:51:30.190" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.430">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:30.430">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:30.190" endtime="20161208 12:51:30.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.435">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:30.434" endtime="20161208 12:51:30.435" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.436">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:30.435" endtime="20161208 12:51:30.436" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.435" endtime="20161208 12:51:30.436" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.434" endtime="20161208 12:51:30.436" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.430" endtime="20161208 12:51:30.436" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:30.436">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:29.700" endtime="20161208 12:51:30.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.437">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:30.436" endtime="20161208 12:51:30.437" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.438">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 12:51:30.437" endtime="20161208 12:51:30.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.442">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:51:30.441" endtime="20161208 12:51:30.442" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.443">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:51:30.443" endtime="20161208 12:51:30.443" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.442" endtime="20161208 12:51:30.443" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.441" endtime="20161208 12:51:30.443" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.438" endtime="20161208 12:51:30.443" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.444">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:30.444" endtime="20161208 12:51:30.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.445">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:30.445" endtime="20161208 12:51:30.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.445">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:30.445" endtime="20161208 12:51:30.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:30.446" endtime="20161208 12:51:30.446" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:30.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:30.446" endtime="20161208 12:51:30.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:30.775" endtime="20161208 12:51:30.776" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.443" endtime="20161208 12:51:30.776" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.836">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:30.836">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:30.776" endtime="20161208 12:51:30.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.842">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:30.841" endtime="20161208 12:51:30.842" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.843">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:30.843" endtime="20161208 12:51:30.843" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.842" endtime="20161208 12:51:30.843" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.840" endtime="20161208 12:51:30.844" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:30.836" endtime="20161208 12:51:30.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:30.844">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:30.437" endtime="20161208 12:51:30.844" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.845">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:30.845">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:30.845">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:30.844" endtime="20161208 12:51:30.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:30.845">Length is 0</msg>
<status starttime="20161208 12:51:30.845" endtime="20161208 12:51:30.845" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.700" endtime="20161208 12:51:30.846" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:29.700" endtime="20161208 12:51:30.846" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:30.846">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161208 12:51:31.227">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:51:31.227">${elog} = q 227</msg>
<msg level="INFO" timestamp="20161208 12:51:31.227">${stderr} = </msg>
<status starttime="20161208 12:51:30.846" endtime="20161208 12:51:31.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.228">Length is 0</msg>
<status starttime="20161208 12:51:31.227" endtime="20161208 12:51:31.228" status="PASS"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.229">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 12:51:31.229" endtime="20161208 12:51:31.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.233">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:51:31.233" endtime="20161208 12:51:31.233" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.234">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:51:31.234" endtime="20161208 12:51:31.234" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.234" endtime="20161208 12:51:31.234" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.232" endtime="20161208 12:51:31.234" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.229" endtime="20161208 12:51:31.235" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.235">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:31.235" endtime="20161208 12:51:31.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.236">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:31.236" endtime="20161208 12:51:31.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.237">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:31.236" endtime="20161208 12:51:31.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.237">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:31.237" endtime="20161208 12:51:31.237" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.891">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:31.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:31.238" endtime="20161208 12:51:31.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:31.892" endtime="20161208 12:51:31.892" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.235" endtime="20161208 12:51:31.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.953">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:31.953">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:31.893" endtime="20161208 12:51:31.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.960">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:31.960" endtime="20161208 12:51:31.960" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.962">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:31.961" endtime="20161208 12:51:31.962" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.961" endtime="20161208 12:51:31.962" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.959" endtime="20161208 12:51:31.962" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.954" endtime="20161208 12:51:31.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:31.962">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:31.228" endtime="20161208 12:51:31.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:31.963" endtime="20161208 12:51:31.963" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.964">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:31.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:31.964">${jsondata} = {u'data': [u'/org/openbmc/records/events/227'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:31.964" endtime="20161208 12:51:31.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:31.965">${log_list} = [u'/org/openbmc/records/events/227']</msg>
<status starttime="20161208 12:51:31.228" endtime="20161208 12:51:31.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status starttime="20161208 12:51:31.965" endtime="20161208 12:51:31.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.966">${association_uri} = /org/openbmc/records/events/227/fru</msg>
<status starttime="20161208 12:51:31.966" endtime="20161208 12:51:31.967" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.968">${base_uri} = /org/openbmc/records/events/227/fru/attr/endpoints</msg>
<status starttime="20161208 12:51:31.968" endtime="20161208 12:51:31.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.973">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/227/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:31.972" endtime="20161208 12:51:31.973" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.974">URI:https://9.3.23.30:443/org/openbmc/records/events/227/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:31.973" endtime="20161208 12:51:31.974" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.973" endtime="20161208 12:51:31.974" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.972" endtime="20161208 12:51:31.974" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.969" endtime="20161208 12:51:31.974" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:31.975">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:31.974" endtime="20161208 12:51:31.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:31.976" endtime="20161208 12:51:31.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.976">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:31.976" endtime="20161208 12:51:31.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:31.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:31.977" endtime="20161208 12:51:31.977" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.307">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:32.307">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:31.977" endtime="20161208 12:51:32.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.308">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:32.308" endtime="20161208 12:51:32.308" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:31.974" endtime="20161208 12:51:32.308" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.401">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/227/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:32.401">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:32.308" endtime="20161208 12:51:32.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.406">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:32.405" endtime="20161208 12:51:32.406" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.407">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:32.406" endtime="20161208 12:51:32.407" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.406" endtime="20161208 12:51:32.407" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.405" endtime="20161208 12:51:32.407" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.402" endtime="20161208 12:51:32.407" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:32.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:31.967" endtime="20161208 12:51:32.407" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.408">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:32.408">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:32.408">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:32.407" endtime="20161208 12:51:32.408" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:32.408">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status starttime="20161208 12:51:31.967" endtime="20161208 12:51:32.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status starttime="20161208 12:51:32.408" endtime="20161208 12:51:32.409" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.410">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status starttime="20161208 12:51:32.410" endtime="20161208 12:51:32.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.415">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:32.414" endtime="20161208 12:51:32.415" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.416">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:32.415" endtime="20161208 12:51:32.416" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.415" endtime="20161208 12:51:32.416" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.413" endtime="20161208 12:51:32.416" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.410" endtime="20161208 12:51:32.416" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.417">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:32.417" endtime="20161208 12:51:32.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.418">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:32.417" endtime="20161208 12:51:32.418" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.418">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:32.418" endtime="20161208 12:51:32.418" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.419">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:32.418" endtime="20161208 12:51:32.419" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.776">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:32.776">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:32.419" endtime="20161208 12:51:32.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.777">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:32.776" endtime="20161208 12:51:32.777" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.416" endtime="20161208 12:51:32.777" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.917">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:32.918">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:32.777" endtime="20161208 12:51:32.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.925">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:32.924" endtime="20161208 12:51:32.925" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.926">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:32.926" endtime="20161208 12:51:32.926" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.925" endtime="20161208 12:51:32.926" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.923" endtime="20161208 12:51:32.926" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.918" endtime="20161208 12:51:32.927" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:32.927">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:32.409" endtime="20161208 12:51:32.927" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.928">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:32.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:32.928">${content} = {u'data': [u'/org/openbmc/records/events/227'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:32.928" endtime="20161208 12:51:32.928" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:32.928">${dimm1_event} = [u'/org/openbmc/records/events/227']</msg>
<status starttime="20161208 12:51:32.409" endtime="20161208 12:51:32.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status starttime="20161208 12:51:32.929" endtime="20161208 12:51:32.929" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 12:51:32.930" endtime="20161208 12:51:32.934" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:32.935">Directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs"&gt;/tmp/root/16718/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 12:51:32.935" endtime="20161208 12:51:32.935" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:32.936">File '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 12:51:32.936" endtime="20161208 12:51:32.936" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:32.936">${exist} = True</msg>
<status starttime="20161208 12:51:32.936" endtime="20161208 12:51:32.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 12:51:32.937" endtime="20161208 12:51:32.939" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.940">${cur_time} = 2016-12-08 12:51:32:940182</msg>
<status starttime="20161208 12:51:32.940" endtime="20161208 12:51:32.940" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.941">${cur_time} = 20161208125132940182</msg>
<status starttime="20161208 12:51:32.941" endtime="20161208 12:51:32.941" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:32.941">${cur_time} = 20161208125132940182</msg>
<status starttime="20161208 12:51:32.940" endtime="20161208 12:51:32.941" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:32.942">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:51:32.941" endtime="20161208 12:51:32.942" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.934" endtime="20161208 12:51:32.942" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.930" endtime="20161208 12:51:32.942" status="PASS"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status starttime="20161208 12:51:29.699" endtime="20161208 12:51:32.942" status="PASS" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Delete error log">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.944">${data} = {u'data': []}</msg>
<status starttime="20161208 12:51:32.943" endtime="20161208 12:51:32.944" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.945">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161208 12:51:32.944" endtime="20161208 12:51:32.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.945">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:32.945" endtime="20161208 12:51:32.945" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:32.946" endtime="20161208 12:51:32.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.950">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:32.950" endtime="20161208 12:51:32.950" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.951">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:32.951" endtime="20161208 12:51:32.951" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.951" endtime="20161208 12:51:32.951" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.949" endtime="20161208 12:51:32.952" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.946" endtime="20161208 12:51:32.952" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:32.952">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:32.952" endtime="20161208 12:51:32.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.953">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:32.953" endtime="20161208 12:51:32.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.954">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:32.954" endtime="20161208 12:51:32.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:32.954">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:32.954" endtime="20161208 12:51:32.954" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.281">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:33.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:32.955" endtime="20161208 12:51:33.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:33.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:33.282" endtime="20161208 12:51:33.282" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:32.952" endtime="20161208 12:51:33.282" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.575">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:33.575">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:33.283" endtime="20161208 12:51:33.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.579">${msg} = Response code:200, Content:{
  "data": 228, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:33.579" endtime="20161208 12:51:33.579" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:33.580">Response code:200, Content:{
  "data": 228, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:33.580" endtime="20161208 12:51:33.580" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:33.579" endtime="20161208 12:51:33.580" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:33.578" endtime="20161208 12:51:33.580" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:33.575" endtime="20161208 12:51:33.580" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:33.581">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:32.944" endtime="20161208 12:51:33.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:33.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:33.581" endtime="20161208 12:51:33.581" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.582">To JSON using : content={
  "data": 228, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:33.582">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:33.582">${json} = {u'data': 228, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:33.581" endtime="20161208 12:51:33.582" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.582">${LOGID} = 228</msg>
<status starttime="20161208 12:51:33.582" endtime="20161208 12:51:33.582" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.583">${uri} = /org/openbmc/records/events/228</msg>
<status starttime="20161208 12:51:33.583" endtime="20161208 12:51:33.583" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:33.583">${log_uri1} = /org/openbmc/records/events/228</msg>
<status starttime="20161208 12:51:32.943" endtime="20161208 12:51:33.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.584">${association_uri1} = /org/openbmc/records/events/228/fru</msg>
<status starttime="20161208 12:51:33.583" endtime="20161208 12:51:33.584" status="PASS"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.584">${data} = {u'data': []}</msg>
<status starttime="20161208 12:51:33.584" endtime="20161208 12:51:33.584" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.585">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161208 12:51:33.585" endtime="20161208 12:51:33.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.586">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:33.586" endtime="20161208 12:51:33.586" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:33.586" endtime="20161208 12:51:33.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.591">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:33.590" endtime="20161208 12:51:33.591" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:33.592">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:33.592" endtime="20161208 12:51:33.592" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:33.591" endtime="20161208 12:51:33.592" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:33.590" endtime="20161208 12:51:33.592" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:33.587" endtime="20161208 12:51:33.592" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:33.593">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:33.593" endtime="20161208 12:51:33.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:33.594" endtime="20161208 12:51:33.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.595">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:33.594" endtime="20161208 12:51:33.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:33.595">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:33.595" endtime="20161208 12:51:33.595" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.022">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:34.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:33.595" endtime="20161208 12:51:34.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:34.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:34.023" endtime="20161208 12:51:34.023" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:33.593" endtime="20161208 12:51:34.024" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.315">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:34.315">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:34.024" endtime="20161208 12:51:34.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.322">${msg} = Response code:200, Content:{
  "data": 229, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:34.322" endtime="20161208 12:51:34.323" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:34.324">Response code:200, Content:{
  "data": 229, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:34.323" endtime="20161208 12:51:34.324" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:34.323" endtime="20161208 12:51:34.324" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:34.321" endtime="20161208 12:51:34.324" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:34.316" endtime="20161208 12:51:34.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:34.325">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:33.585" endtime="20161208 12:51:34.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:34.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:34.325" endtime="20161208 12:51:34.326" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.327">To JSON using : content={
  "data": 229, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:34.327">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:34.327">${json} = {u'data': 229, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:34.326" endtime="20161208 12:51:34.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.328">${LOGID} = 229</msg>
<status starttime="20161208 12:51:34.327" endtime="20161208 12:51:34.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.328">${uri} = /org/openbmc/records/events/229</msg>
<status starttime="20161208 12:51:34.328" endtime="20161208 12:51:34.328" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:34.328">${log_uri2} = /org/openbmc/records/events/229</msg>
<status starttime="20161208 12:51:33.584" endtime="20161208 12:51:34.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.329">${del_uri} = /org/openbmc/records/events/228/action/delete</msg>
<status starttime="20161208 12:51:34.329" endtime="20161208 12:51:34.329" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.330">${base_uri} = /org/openbmc/records/events/228/action/delete</msg>
<status starttime="20161208 12:51:34.330" endtime="20161208 12:51:34.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.331">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:34.331" endtime="20161208 12:51:34.331" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:34.331" endtime="20161208 12:51:34.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.336">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/228/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:34.335" endtime="20161208 12:51:34.336" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:34.336">URI:https://9.3.23.30:443/org/openbmc/records/events/228/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:34.336" endtime="20161208 12:51:34.336" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:34.336" endtime="20161208 12:51:34.337" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:34.334" endtime="20161208 12:51:34.337" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:34.332" endtime="20161208 12:51:34.337" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:34.338">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:34.337" endtime="20161208 12:51:34.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.339">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:34.339" endtime="20161208 12:51:34.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.340">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:34.339" endtime="20161208 12:51:34.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.341">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:34.340" endtime="20161208 12:51:34.341" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:34.733">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:34.733">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:34.341" endtime="20161208 12:51:34.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:34.734">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:34.733" endtime="20161208 12:51:34.734" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:34.337" endtime="20161208 12:51:34.734" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.183">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/228/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:35.183">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:34.734" endtime="20161208 12:51:35.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.191">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:35.190" endtime="20161208 12:51:35.191" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.192">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:35.192" endtime="20161208 12:51:35.192" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.191" endtime="20161208 12:51:35.193" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.189" endtime="20161208 12:51:35.193" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.184" endtime="20161208 12:51:35.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:35.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:34.329" endtime="20161208 12:51:35.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.194">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:35.194" endtime="20161208 12:51:35.194" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.197">${base_uri} = /org/openbmc/records/events/228/fru</msg>
<status starttime="20161208 12:51:35.195" endtime="20161208 12:51:35.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.201">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/228/fru, method:Get, args:{}</msg>
<status starttime="20161208 12:51:35.201" endtime="20161208 12:51:35.201" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.202">URI:https://9.3.23.30:443/org/openbmc/records/events/228/fru, method:Get, args:{}</msg>
<status starttime="20161208 12:51:35.202" endtime="20161208 12:51:35.202" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.201" endtime="20161208 12:51:35.202" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.200" endtime="20161208 12:51:35.202" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.197" endtime="20161208 12:51:35.202" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.203">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:35.203" endtime="20161208 12:51:35.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:35.204" endtime="20161208 12:51:35.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.205">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:35.204" endtime="20161208 12:51:35.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.205">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:35.205" endtime="20161208 12:51:35.205" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.537">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:35.537">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:35.205" endtime="20161208 12:51:35.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:35.537" endtime="20161208 12:51:35.538" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.202" endtime="20161208 12:51:35.538" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.592">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/228/fru, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:35.592">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20161208 12:51:35.538" endtime="20161208 12:51:35.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.597">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status starttime="20161208 12:51:35.596" endtime="20161208 12:51:35.597" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.598">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status starttime="20161208 12:51:35.597" endtime="20161208 12:51:35.598" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.597" endtime="20161208 12:51:35.598" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.596" endtime="20161208 12:51:35.598" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.593" endtime="20161208 12:51:35.598" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:35.598">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20161208 12:51:35.195" endtime="20161208 12:51:35.598" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.599">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:35.599">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:35.599">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru'}, u'message': u'404 Not Found', u'status': u'error'}</msg>
<status starttime="20161208 12:51:35.598" endtime="20161208 12:51:35.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status starttime="20161208 12:51:35.599" endtime="20161208 12:51:35.599" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.601">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status starttime="20161208 12:51:35.601" endtime="20161208 12:51:35.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.605">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:35.605" endtime="20161208 12:51:35.605" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.606">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:35.606" endtime="20161208 12:51:35.606" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.605" endtime="20161208 12:51:35.606" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.604" endtime="20161208 12:51:35.606" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.601" endtime="20161208 12:51:35.606" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.607">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:35.607" endtime="20161208 12:51:35.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.608">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:35.608" endtime="20161208 12:51:35.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.609">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:35.608" endtime="20161208 12:51:35.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:35.609" endtime="20161208 12:51:35.609" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:35.938">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:35.938">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:35.610" endtime="20161208 12:51:35.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:35.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:35.938" endtime="20161208 12:51:35.939" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:35.607" endtime="20161208 12:51:35.939" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.019">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:36.020">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:35.939" endtime="20161208 12:51:36.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.027">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:36.026" endtime="20161208 12:51:36.027" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:36.028">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:36.028" endtime="20161208 12:51:36.029" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.028" endtime="20161208 12:51:36.029" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.026" endtime="20161208 12:51:36.029" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.020" endtime="20161208 12:51:36.029" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.029">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:35.600" endtime="20161208 12:51:36.029" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.030">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:36.030">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:36.030">${content} = {u'data': [u'/org/openbmc/records/events/229'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:36.029" endtime="20161208 12:51:36.030" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.030">${dimm3_event} = [u'/org/openbmc/records/events/229']</msg>
<status starttime="20161208 12:51:35.600" endtime="20161208 12:51:36.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161208 12:51:36.031" endtime="20161208 12:51:36.031" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.033">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status starttime="20161208 12:51:36.033" endtime="20161208 12:51:36.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.038">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:36.038" endtime="20161208 12:51:36.039" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:36.039">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 12:51:36.039" endtime="20161208 12:51:36.039" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.039" endtime="20161208 12:51:36.039" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.037" endtime="20161208 12:51:36.040" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.033" endtime="20161208 12:51:36.040" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:36.040">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:36.040" endtime="20161208 12:51:36.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.041">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:36.041" endtime="20161208 12:51:36.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.042">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:36.042" endtime="20161208 12:51:36.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.043">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:36.042" endtime="20161208 12:51:36.043" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.376">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:36.376">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:36.043" endtime="20161208 12:51:36.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:36.377">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:36.376" endtime="20161208 12:51:36.377" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.040" endtime="20161208 12:51:36.377" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.459">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:36.460">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:36.377" endtime="20161208 12:51:36.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.464">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:36.463" endtime="20161208 12:51:36.464" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:36.464">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:36.464" endtime="20161208 12:51:36.465" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.464" endtime="20161208 12:51:36.465" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.463" endtime="20161208 12:51:36.465" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.460" endtime="20161208 12:51:36.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:36.032" endtime="20161208 12:51:36.465" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.466">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:36.466">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:36.466">${content} = {u'data': [u'/org/openbmc/records/events/229'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:36.465" endtime="20161208 12:51:36.466" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.466">${dimm2_event} = [u'/org/openbmc/records/events/229']</msg>
<status starttime="20161208 12:51:36.031" endtime="20161208 12:51:36.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161208 12:51:36.466" endtime="20161208 12:51:36.467" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 12:51:36.467" endtime="20161208 12:51:36.470" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:36.471">Directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs"&gt;/tmp/root/16718/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 12:51:36.471" endtime="20161208 12:51:36.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:36.472">File '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 12:51:36.472" endtime="20161208 12:51:36.472" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.472">${exist} = True</msg>
<status starttime="20161208 12:51:36.471" endtime="20161208 12:51:36.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 12:51:36.472" endtime="20161208 12:51:36.475" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.476">${cur_time} = 2016-12-08 12:51:36:475886</msg>
<status starttime="20161208 12:51:36.476" endtime="20161208 12:51:36.476" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.477">${cur_time} = 20161208125136475886</msg>
<status starttime="20161208 12:51:36.476" endtime="20161208 12:51:36.477" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.477">${cur_time} = 20161208125136475886</msg>
<status starttime="20161208 12:51:36.475" endtime="20161208 12:51:36.477" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:51:36.478">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:51:36.477" endtime="20161208 12:51:36.478" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.471" endtime="20161208 12:51:36.478" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.467" endtime="20161208 12:51:36.478" status="PASS"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status starttime="20161208 12:51:32.943" endtime="20161208 12:51:36.478" status="PASS" critical="yes"></status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20161208 12:51:36.479" endtime="20161208 12:51:36.487" status="PASS"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status starttime="20161208 12:51:25.646" endtime="20161208 12:51:36.487" status="PASS"></status>
</suite>
<suite id="s1-s3" name="Test Basic Poweron" source="/tmp/root/16718/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s3-t1" name="power on test">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:36.517">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:51:36.517" endtime="20161208 12:51:36.518" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.518">${has_host} = False</msg>
<status starttime="20161208 12:51:36.517" endtime="20161208 12:51:36.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:51:36.521" endtime="20161208 12:51:36.522" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.518" endtime="20161208 12:51:36.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.525">${port_num} = 22</msg>
<status starttime="20161208 12:51:36.525" endtime="20161208 12:51:36.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.526">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:51:36.526" endtime="20161208 12:51:36.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:36.527">${https_num} = 443</msg>
<status starttime="20161208 12:51:36.527" endtime="20161208 12:51:36.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:36.528">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:51:36.527" endtime="20161208 12:51:36.528" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.525" endtime="20161208 12:51:36.528" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.522" endtime="20161208 12:51:36.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:36.529">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:51:36.528" endtime="20161208 12:51:36.529" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:36.529">${has_port} = False</msg>
<status starttime="20161208 12:51:36.528" endtime="20161208 12:51:36.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:51:36.533" endtime="20161208 12:51:36.533" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:51:36.533" endtime="20161208 12:51:36.533" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.532" endtime="20161208 12:51:36.533" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.529" endtime="20161208 12:51:36.533" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:36.534">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:51:39.121">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:51:36.534" endtime="20161208 12:51:39.121" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.516" endtime="20161208 12:51:39.122" status="PASS"></status>
</kw>
<kw library="utils" name="Get Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:39.123">${cur_time} = 20161208125139122991</msg>
<status starttime="20161208 12:51:39.123" endtime="20161208 12:51:39.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:39.124">${cur_time} = 20161208125139122991</msg>
<status starttime="20161208 12:51:39.122" endtime="20161208 12:51:39.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:39.129">${LOG_TIME} = 20161208125139122991</msg>
<status starttime="20161208 12:51:39.124" endtime="20161208 12:51:39.129" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:39.130">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161208125139122991_$$'.</msg>
<status starttime="20161208 12:51:39.129" endtime="20161208 12:51:39.138" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:36.516" endtime="20161208 12:51:39.138" status="PASS"></status>
</kw>
<kw library="poweroffs" name="BMC Power Off">
<doc>Powers off the system and makes sure that all states are</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:39.141">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:51:39.140" endtime="20161208 12:51:39.141" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:39.141">${has_host} = False</msg>
<status starttime="20161208 12:51:39.140" endtime="20161208 12:51:39.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:51:39.147" endtime="20161208 12:51:39.147" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:39.142" endtime="20161208 12:51:39.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:39.155">${port_num} = 22</msg>
<status starttime="20161208 12:51:39.154" endtime="20161208 12:51:39.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:39.156">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:51:39.155" endtime="20161208 12:51:39.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:39.157">${https_num} = 443</msg>
<status starttime="20161208 12:51:39.156" endtime="20161208 12:51:39.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:39.158">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:51:39.157" endtime="20161208 12:51:39.158" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:39.153" endtime="20161208 12:51:39.158" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:39.148" endtime="20161208 12:51:39.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:39.159">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:51:39.159" endtime="20161208 12:51:39.159" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:39.159">${has_port} = False</msg>
<status starttime="20161208 12:51:39.158" endtime="20161208 12:51:39.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:51:39.163" endtime="20161208 12:51:39.163" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:51:39.163" endtime="20161208 12:51:39.164" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:39.162" endtime="20161208 12:51:39.164" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:39.159" endtime="20161208 12:51:39.164" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:39.164">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:51:41.725">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:51:39.164" endtime="20161208 12:51:41.725" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:39.139" endtime="20161208 12:51:41.726" status="PASS"></status>
</kw>
<kw library="utils" name="Initiate Power Off">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.727">@{arglist} = [ ]</msg>
<status starttime="20161208 12:51:41.727" endtime="20161208 12:51:41.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.728">${args} = {u'data': []}</msg>
<status starttime="20161208 12:51:41.728" endtime="20161208 12:51:41.728" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.730">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:51:41.730" endtime="20161208 12:51:41.730" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.733">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status starttime="20161208 12:51:41.732" endtime="20161208 12:51:41.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:41.733" endtime="20161208 12:51:41.734" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:41.734" endtime="20161208 12:51:41.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.740">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:41.740" endtime="20161208 12:51:41.740" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:41.741">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:41.741" endtime="20161208 12:51:41.741" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:41.741" endtime="20161208 12:51:41.741" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:41.739" endtime="20161208 12:51:41.741" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:41.735" endtime="20161208 12:51:41.742" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:41.742">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:41.742" endtime="20161208 12:51:41.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:41.743" endtime="20161208 12:51:41.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.744">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:41.744" endtime="20161208 12:51:41.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:41.745">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:41.744" endtime="20161208 12:51:41.745" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.081">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:42.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:41.745" endtime="20161208 12:51:42.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:42.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:42.082" endtime="20161208 12:51:42.082" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:41.742" endtime="20161208 12:51:42.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.372">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:42.373">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:42.083" endtime="20161208 12:51:42.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.377">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:42.376" endtime="20161208 12:51:42.377" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:42.378">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:42.378" endtime="20161208 12:51:42.378" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.377" endtime="20161208 12:51:42.378" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.376" endtime="20161208 12:51:42.378" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.373" endtime="20161208 12:51:42.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:42.379">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:41.731" endtime="20161208 12:51:42.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:42.379">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:41.729" endtime="20161208 12:51:42.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:42.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:42.379" endtime="20161208 12:51:42.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.381">@{arglist} = [ ]</msg>
<status starttime="20161208 12:51:42.381" endtime="20161208 12:51:42.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.382">${args} = {u'data': []}</msg>
<status starttime="20161208 12:51:42.381" endtime="20161208 12:51:42.382" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.383">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:51:42.382" endtime="20161208 12:51:42.383" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.384">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:51:42.384" endtime="20161208 12:51:42.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:42.384" endtime="20161208 12:51:42.384" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:42.385" endtime="20161208 12:51:42.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.389">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:42.388" endtime="20161208 12:51:42.389" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:42.390">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:42.390" endtime="20161208 12:51:42.390" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.389" endtime="20161208 12:51:42.390" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.388" endtime="20161208 12:51:42.390" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.385" endtime="20161208 12:51:42.390" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:42.391">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:42.391" endtime="20161208 12:51:42.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:42.392" endtime="20161208 12:51:42.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.393">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:42.392" endtime="20161208 12:51:42.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:42.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:42.393" endtime="20161208 12:51:42.393" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.057">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:43.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:42.394" endtime="20161208 12:51:43.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:43.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:43.058" endtime="20161208 12:51:43.058" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.390" endtime="20161208 12:51:43.059" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.904">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:43.904">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:43.059" endtime="20161208 12:51:43.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.912">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:43.911" endtime="20161208 12:51:43.912" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:43.913">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:43.913" endtime="20161208 12:51:43.913" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.912" endtime="20161208 12:51:43.914" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.910" endtime="20161208 12:51:43.914" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.905" endtime="20161208 12:51:43.914" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:43.914">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:42.383" endtime="20161208 12:51:43.914" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:43.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:42.382" endtime="20161208 12:51:43.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:43.915">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:43.915" endtime="20161208 12:51:43.916" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.916">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:43.917">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:43.917">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:43.916" endtime="20161208 12:51:43.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:43.917">${state} = 0</msg>
<status starttime="20161208 12:51:42.380" endtime="20161208 12:51:43.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161208 12:51:43.918" endtime="20161208 12:51:43.918" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.380" endtime="20161208 12:51:43.918" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:42.380" endtime="20161208 12:51:43.918" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:41.726" endtime="20161208 12:51:43.918" status="PASS"></status>
</kw>
<kw library="poweroffs" name="Check Power Off States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.919">@{arglist} = [ ]</msg>
<status starttime="20161208 12:51:43.919" endtime="20161208 12:51:43.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.920">${args} = {u'data': []}</msg>
<status starttime="20161208 12:51:43.919" endtime="20161208 12:51:43.920" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.921">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:51:43.921" endtime="20161208 12:51:43.921" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.922">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:51:43.922" endtime="20161208 12:51:43.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.923">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:43.922" endtime="20161208 12:51:43.923" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:43.923" endtime="20161208 12:51:43.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.930">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:43.929" endtime="20161208 12:51:43.930" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:43.931">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:43.931" endtime="20161208 12:51:43.931" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.930" endtime="20161208 12:51:43.931" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.928" endtime="20161208 12:51:43.931" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.924" endtime="20161208 12:51:43.931" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:43.932">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:43.932" endtime="20161208 12:51:43.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.933">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:43.933" endtime="20161208 12:51:43.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.933">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:43.933" endtime="20161208 12:51:43.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:43.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:43.934" endtime="20161208 12:51:43.934" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:44.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:44.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:43.934" endtime="20161208 12:51:44.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:44.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:44.711" endtime="20161208 12:51:44.711" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.931" endtime="20161208 12:51:44.712" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.156">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:45.157">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:44.712" endtime="20161208 12:51:45.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.164">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:45.163" endtime="20161208 12:51:45.164" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.166">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:45.165" endtime="20161208 12:51:45.166" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.165" endtime="20161208 12:51:45.166" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.162" endtime="20161208 12:51:45.166" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.157" endtime="20161208 12:51:45.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:45.167">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:43.921" endtime="20161208 12:51:45.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:45.167">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:43.920" endtime="20161208 12:51:45.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:45.168" endtime="20161208 12:51:45.168" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.169">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:45.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:45.169">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:45.168" endtime="20161208 12:51:45.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:45.169">${power_state} = 0</msg>
<status starttime="20161208 12:51:43.919" endtime="20161208 12:51:45.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161208 12:51:45.170" endtime="20161208 12:51:45.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status starttime="20161208 12:51:45.170" endtime="20161208 12:51:45.170" status="PASS"></status>
</kw>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.172">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20161208 12:51:45.172" endtime="20161208 12:51:45.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.176">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161208 12:51:45.176" endtime="20161208 12:51:45.176" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.177">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161208 12:51:45.177" endtime="20161208 12:51:45.177" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.177" endtime="20161208 12:51:45.177" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.175" endtime="20161208 12:51:45.178" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.172" endtime="20161208 12:51:45.178" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.178">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:45.178" endtime="20161208 12:51:45.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:45.179" endtime="20161208 12:51:45.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.180">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:45.180" endtime="20161208 12:51:45.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:45.180" endtime="20161208 12:51:45.180" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.887">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:45.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:45.181" endtime="20161208 12:51:45.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:45.887" endtime="20161208 12:51:45.888" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.178" endtime="20161208 12:51:45.888" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.967">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:51:45.967">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:45.889" endtime="20161208 12:51:45.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.974">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:45.973" endtime="20161208 12:51:45.974" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.975">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:45.975" endtime="20161208 12:51:45.975" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.974" endtime="20161208 12:51:45.976" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.972" endtime="20161208 12:51:45.976" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.968" endtime="20161208 12:51:45.976" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:45.976">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:45.171" endtime="20161208 12:51:45.976" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.977">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:45.977">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:45.977">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:45.977" endtime="20161208 12:51:45.977" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:45.978">${state} = Off</msg>
<status starttime="20161208 12:51:45.171" endtime="20161208 12:51:45.978" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:45.978">${boot_progress} = Off</msg>
<status starttime="20161208 12:51:45.170" endtime="20161208 12:51:45.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20161208 12:51:45.978" endtime="20161208 12:51:45.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status starttime="20161208 12:51:45.979" endtime="20161208 12:51:45.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.979">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status starttime="20161208 12:51:45.979" endtime="20161208 12:51:45.979" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.980">@{arglist} = [ ]</msg>
<status starttime="20161208 12:51:45.980" endtime="20161208 12:51:45.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.981">${args} = {u'data': []}</msg>
<status starttime="20161208 12:51:45.980" endtime="20161208 12:51:45.981" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.982">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161208 12:51:45.982" endtime="20161208 12:51:45.982" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.983">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161208 12:51:45.983" endtime="20161208 12:51:45.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.984">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:45.983" endtime="20161208 12:51:45.984" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:45.984" endtime="20161208 12:51:45.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.990">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:45.988" endtime="20161208 12:51:45.990" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.992">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:45.991" endtime="20161208 12:51:45.992" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.990" endtime="20161208 12:51:45.992" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.988" endtime="20161208 12:51:45.992" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.985" endtime="20161208 12:51:45.992" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:45.993">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:45.993" endtime="20161208 12:51:45.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:45.993" endtime="20161208 12:51:45.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.994">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:45.994" endtime="20161208 12:51:45.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:45.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:45.995" endtime="20161208 12:51:45.995" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:46.554">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:46.554">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:45.995" endtime="20161208 12:51:46.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:46.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:46.554" endtime="20161208 12:51:46.555" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:45.992" endtime="20161208 12:51:46.555" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:47.179">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:47.179">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:46.555" endtime="20161208 12:51:47.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:47.186">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:47.185" endtime="20161208 12:51:47.186" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:47.188">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:47.187" endtime="20161208 12:51:47.188" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.186" endtime="20161208 12:51:47.188" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.184" endtime="20161208 12:51:47.188" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.180" endtime="20161208 12:51:47.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:47.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:45.982" endtime="20161208 12:51:47.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:47.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:45.981" endtime="20161208 12:51:47.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:47.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:47.190" endtime="20161208 12:51:47.190" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:47.191">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:47.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:47.191">${content} = {u'data': u'BMC_READY', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:47.191" endtime="20161208 12:51:47.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:47.192">${bmc_state} = BMC_READY</msg>
<status starttime="20161208 12:51:45.980" endtime="20161208 12:51:47.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status starttime="20161208 12:51:47.192" endtime="20161208 12:51:47.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status starttime="20161208 12:51:47.193" endtime="20161208 12:51:47.193" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:43.918" endtime="20161208 12:51:47.194" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Close Connection">
<doc>Closes the current connection.</doc>
<status starttime="20161208 12:51:47.194" endtime="20161208 12:51:47.258" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:39.138" endtime="20161208 12:51:47.258" status="PASS"></status>
</kw>
<kw library="powerons" name="BMC Power On">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:47.260">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status starttime="20161208 12:51:47.259" endtime="20161208 12:51:47.260" status="PASS"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:47.263">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:51:47.262" endtime="20161208 12:51:47.263" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:47.263">${has_host} = False</msg>
<status starttime="20161208 12:51:47.261" endtime="20161208 12:51:47.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:51:47.269" endtime="20161208 12:51:47.269" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.264" endtime="20161208 12:51:47.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:47.275">${port_num} = 22</msg>
<status starttime="20161208 12:51:47.275" endtime="20161208 12:51:47.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:47.276">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:51:47.276" endtime="20161208 12:51:47.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:47.277">${https_num} = 443</msg>
<status starttime="20161208 12:51:47.277" endtime="20161208 12:51:47.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:47.278">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:51:47.278" endtime="20161208 12:51:47.278" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.274" endtime="20161208 12:51:47.278" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.270" endtime="20161208 12:51:47.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:47.279">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:51:47.279" endtime="20161208 12:51:47.279" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:47.279">${has_port} = False</msg>
<status starttime="20161208 12:51:47.279" endtime="20161208 12:51:47.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:51:47.283" endtime="20161208 12:51:47.283" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:51:47.284" endtime="20161208 12:51:47.284" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.283" endtime="20161208 12:51:47.284" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.280" endtime="20161208 12:51:47.284" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:47.285">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:51:49.593">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:51:47.284" endtime="20161208 12:51:49.594" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:47.260" endtime="20161208 12:51:49.594" status="PASS"></status>
</kw>
<kw library="utils" name="Initiate Power On">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.595">@{arglist} = [ ]</msg>
<status starttime="20161208 12:51:49.595" endtime="20161208 12:51:49.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.596">${args} = {u'data': []}</msg>
<status starttime="20161208 12:51:49.596" endtime="20161208 12:51:49.597" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.599">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:51:49.598" endtime="20161208 12:51:49.599" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.601">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status starttime="20161208 12:51:49.601" endtime="20161208 12:51:49.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.602">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:49.602" endtime="20161208 12:51:49.602" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:49.603" endtime="20161208 12:51:49.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.610">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:49.609" endtime="20161208 12:51:49.610" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:49.611">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:49.611" endtime="20161208 12:51:49.612" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:49.611" endtime="20161208 12:51:49.612" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:49.609" endtime="20161208 12:51:49.612" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:49.604" endtime="20161208 12:51:49.612" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:49.613">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:49.612" endtime="20161208 12:51:49.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:49.613" endtime="20161208 12:51:49.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.614">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:49.614" endtime="20161208 12:51:49.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:49.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:49.615" endtime="20161208 12:51:49.615" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.003">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:50.003">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:49.615" endtime="20161208 12:51:50.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:50.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:50.004" endtime="20161208 12:51:50.005" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:49.612" endtime="20161208 12:51:50.005" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.594">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:50.595">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:50.005" endtime="20161208 12:51:50.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.602">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:50.601" endtime="20161208 12:51:50.602" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:50.603">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:50.603" endtime="20161208 12:51:50.603" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:50.602" endtime="20161208 12:51:50.604" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:50.600" endtime="20161208 12:51:50.604" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:50.595" endtime="20161208 12:51:50.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:50.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:49.599" endtime="20161208 12:51:50.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:50.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:49.597" endtime="20161208 12:51:50.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:50.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:50.605" endtime="20161208 12:51:50.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20161208 12:51:50.606" endtime="20161208 12:51:50.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.612">@{arglist} = [ ]</msg>
<status starttime="20161208 12:51:50.612" endtime="20161208 12:51:50.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.613">${args} = {u'data': []}</msg>
<status starttime="20161208 12:51:50.612" endtime="20161208 12:51:50.613" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.614">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:51:50.613" endtime="20161208 12:51:50.614" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.615">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:51:50.615" endtime="20161208 12:51:50.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.616">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:50.615" endtime="20161208 12:51:50.616" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:51:50.616" endtime="20161208 12:51:50.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.620">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:50.620" endtime="20161208 12:51:50.620" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:50.621">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:51:50.621" endtime="20161208 12:51:50.621" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:50.620" endtime="20161208 12:51:50.621" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:50.619" endtime="20161208 12:51:50.621" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:50.616" endtime="20161208 12:51:50.621" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:50.623">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:51:50.622" endtime="20161208 12:51:50.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:51:50.623" endtime="20161208 12:51:50.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.624">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:51:50.624" endtime="20161208 12:51:50.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:50.625">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:51:50.624" endtime="20161208 12:51:50.625" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:53.152">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:53.153">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:50.625" endtime="20161208 12:51:53.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:53.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:53.153" endtime="20161208 12:51:53.154" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:50.622" endtime="20161208 12:51:53.154" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:57.150">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:51:57.150">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:53.154" endtime="20161208 12:51:57.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:57.157">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:57.157" endtime="20161208 12:51:57.158" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:57.159">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:51:57.159" endtime="20161208 12:51:57.159" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:57.158" endtime="20161208 12:51:57.159" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:57.156" endtime="20161208 12:51:57.159" status="PASS"></status>
</kw>
<status starttime="20161208 12:51:57.151" endtime="20161208 12:51:57.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:57.160">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:50.614" endtime="20161208 12:51:57.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:57.160">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:51:50.613" endtime="20161208 12:51:57.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:51:57.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:51:57.161" endtime="20161208 12:51:57.161" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:51:57.162">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:51:57.162">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:51:57.163">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:51:57.162" endtime="20161208 12:51:57.163" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:51:57.163">${state} = 0</msg>
<status starttime="20161208 12:51:50.611" endtime="20161208 12:51:57.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:51:57.164">0 != 1</msg>
<status starttime="20161208 12:51:57.163" endtime="20161208 12:51:57.164" status="FAIL"></status>
</kw>
<status starttime="20161208 12:51:50.611" endtime="20161208 12:51:57.164" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.167">@{arglist} = [ ]</msg>
<status starttime="20161208 12:52:07.166" endtime="20161208 12:52:07.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.168">${args} = {u'data': []}</msg>
<status starttime="20161208 12:52:07.167" endtime="20161208 12:52:07.168" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.171">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:52:07.169" endtime="20161208 12:52:07.171" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.173">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:52:07.172" endtime="20161208 12:52:07.173" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.174">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:07.173" endtime="20161208 12:52:07.174" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:52:07.174" endtime="20161208 12:52:07.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.180">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:07.180" endtime="20161208 12:52:07.180" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:07.181">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:07.181" endtime="20161208 12:52:07.181" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:07.180" endtime="20161208 12:52:07.181" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:07.179" endtime="20161208 12:52:07.181" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:07.175" endtime="20161208 12:52:07.181" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:07.182">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:52:07.182" endtime="20161208 12:52:07.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.183">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:07.183" endtime="20161208 12:52:07.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.184">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:52:07.184" endtime="20161208 12:52:07.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.185">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:52:07.184" endtime="20161208 12:52:07.185" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.577">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:07.577">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:07.185" endtime="20161208 12:52:07.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:07.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:07.578" endtime="20161208 12:52:07.578" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:07.182" endtime="20161208 12:52:07.578" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.849">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:07.849">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:07.578" endtime="20161208 12:52:07.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.853">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:07.852" endtime="20161208 12:52:07.853" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:07.854">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:07.853" endtime="20161208 12:52:07.854" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:07.853" endtime="20161208 12:52:07.854" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:07.852" endtime="20161208 12:52:07.854" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:07.849" endtime="20161208 12:52:07.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:07.854">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:07.171" endtime="20161208 12:52:07.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:07.854">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:07.168" endtime="20161208 12:52:07.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:07.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:07.855" endtime="20161208 12:52:07.855" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:07.855">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:52:07.855">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:52:07.855">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:52:07.855" endtime="20161208 12:52:07.856" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:07.856">${state} = 0</msg>
<status starttime="20161208 12:52:07.166" endtime="20161208 12:52:07.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:52:07.856">0 != 1</msg>
<status starttime="20161208 12:52:07.856" endtime="20161208 12:52:07.856" status="FAIL"></status>
</kw>
<status starttime="20161208 12:52:07.165" endtime="20161208 12:52:07.857" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.859">@{arglist} = [ ]</msg>
<status starttime="20161208 12:52:17.859" endtime="20161208 12:52:17.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.860">${args} = {u'data': []}</msg>
<status starttime="20161208 12:52:17.859" endtime="20161208 12:52:17.860" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.862">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:52:17.862" endtime="20161208 12:52:17.862" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.864">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:52:17.864" endtime="20161208 12:52:17.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:17.865" endtime="20161208 12:52:17.865" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:52:17.866" endtime="20161208 12:52:17.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.871">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:17.871" endtime="20161208 12:52:17.871" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:17.872">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:17.872" endtime="20161208 12:52:17.872" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:17.871" endtime="20161208 12:52:17.872" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:17.870" endtime="20161208 12:52:17.872" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:17.867" endtime="20161208 12:52:17.873" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:17.873">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:52:17.873" endtime="20161208 12:52:17.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.874">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:17.874" endtime="20161208 12:52:17.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.875">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:52:17.875" endtime="20161208 12:52:17.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:17.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:52:17.875" endtime="20161208 12:52:17.876" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:18.203">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:18.203">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:17.876" endtime="20161208 12:52:18.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:18.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:18.203" endtime="20161208 12:52:18.204" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:17.873" endtime="20161208 12:52:18.204" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:18.476">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:18.477">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:18.204" endtime="20161208 12:52:18.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:18.481">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:18.480" endtime="20161208 12:52:18.481" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:18.481">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:18.481" endtime="20161208 12:52:18.482" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:18.481" endtime="20161208 12:52:18.482" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:18.480" endtime="20161208 12:52:18.482" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:18.477" endtime="20161208 12:52:18.482" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:18.482">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:17.863" endtime="20161208 12:52:18.482" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:18.482">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:17.860" endtime="20161208 12:52:18.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:18.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:18.483" endtime="20161208 12:52:18.483" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:18.484">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:52:18.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:52:18.484">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:52:18.483" endtime="20161208 12:52:18.484" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:18.484">${state} = 0</msg>
<status starttime="20161208 12:52:17.858" endtime="20161208 12:52:18.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:52:18.485">0 != 1</msg>
<status starttime="20161208 12:52:18.484" endtime="20161208 12:52:18.485" status="FAIL"></status>
</kw>
<status starttime="20161208 12:52:17.857" endtime="20161208 12:52:18.485" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.487">@{arglist} = [ ]</msg>
<status starttime="20161208 12:52:28.486" endtime="20161208 12:52:28.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.487">${args} = {u'data': []}</msg>
<status starttime="20161208 12:52:28.487" endtime="20161208 12:52:28.487" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.488">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:52:28.488" endtime="20161208 12:52:28.489" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.491">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:52:28.491" endtime="20161208 12:52:28.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:28.491" endtime="20161208 12:52:28.492" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:52:28.492" endtime="20161208 12:52:28.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.500">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:28.499" endtime="20161208 12:52:28.500" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:28.501">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:28.500" endtime="20161208 12:52:28.501" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:28.500" endtime="20161208 12:52:28.501" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:28.499" endtime="20161208 12:52:28.501" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:28.493" endtime="20161208 12:52:28.501" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:28.502">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:52:28.502" endtime="20161208 12:52:28.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:28.502" endtime="20161208 12:52:28.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.503">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:52:28.503" endtime="20161208 12:52:28.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.504">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:52:28.504" endtime="20161208 12:52:28.504" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:28.842">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:28.842">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:28.504" endtime="20161208 12:52:28.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:28.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:28.843" endtime="20161208 12:52:28.844" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:28.501" endtime="20161208 12:52:28.844" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:29.421">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:29.421">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:28.844" endtime="20161208 12:52:29.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:29.427">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:29.426" endtime="20161208 12:52:29.427" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:29.428">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:29.428" endtime="20161208 12:52:29.429" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:29.427" endtime="20161208 12:52:29.429" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:29.426" endtime="20161208 12:52:29.429" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:29.421" endtime="20161208 12:52:29.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:29.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:28.489" endtime="20161208 12:52:29.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:29.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:28.487" endtime="20161208 12:52:29.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:29.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:29.430" endtime="20161208 12:52:29.431" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:29.431">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:52:29.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:52:29.432">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:52:29.431" endtime="20161208 12:52:29.432" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:29.432">${state} = 0</msg>
<status starttime="20161208 12:52:28.486" endtime="20161208 12:52:29.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:52:29.433">0 != 1</msg>
<status starttime="20161208 12:52:29.433" endtime="20161208 12:52:29.433" status="FAIL"></status>
</kw>
<status starttime="20161208 12:52:28.485" endtime="20161208 12:52:29.434" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.436">@{arglist} = [ ]</msg>
<status starttime="20161208 12:52:39.436" endtime="20161208 12:52:39.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.437">${args} = {u'data': []}</msg>
<status starttime="20161208 12:52:39.437" endtime="20161208 12:52:39.437" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.439">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:52:39.439" endtime="20161208 12:52:39.439" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.442">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:52:39.441" endtime="20161208 12:52:39.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.442">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:39.442" endtime="20161208 12:52:39.442" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:52:39.443" endtime="20161208 12:52:39.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.450">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:39.449" endtime="20161208 12:52:39.450" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:39.451">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:39.451" endtime="20161208 12:52:39.451" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:39.450" endtime="20161208 12:52:39.451" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:39.449" endtime="20161208 12:52:39.451" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:39.444" endtime="20161208 12:52:39.451" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:39.452">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:52:39.452" endtime="20161208 12:52:39.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:39.453" endtime="20161208 12:52:39.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:52:39.453" endtime="20161208 12:52:39.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:52:39.454" endtime="20161208 12:52:39.454" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:39.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:39.791">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:39.455" endtime="20161208 12:52:39.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:39.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:39.792" endtime="20161208 12:52:39.792" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:39.451" endtime="20161208 12:52:39.793" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:40.069">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:40.069">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:39.793" endtime="20161208 12:52:40.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:40.076">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:40.075" endtime="20161208 12:52:40.076" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:40.077">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:40.077" endtime="20161208 12:52:40.077" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:40.076" endtime="20161208 12:52:40.077" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:40.074" endtime="20161208 12:52:40.077" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:40.069" endtime="20161208 12:52:40.078" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:40.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:39.440" endtime="20161208 12:52:40.078" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:40.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:39.438" endtime="20161208 12:52:40.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:40.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:40.079" endtime="20161208 12:52:40.079" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:40.080">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:52:40.080">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:52:40.080">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:52:40.079" endtime="20161208 12:52:40.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:40.080">${state} = 0</msg>
<status starttime="20161208 12:52:39.435" endtime="20161208 12:52:40.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:52:40.081">0 != 1</msg>
<status starttime="20161208 12:52:40.080" endtime="20161208 12:52:40.081" status="FAIL"></status>
</kw>
<status starttime="20161208 12:52:39.434" endtime="20161208 12:52:40.081" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.083">@{arglist} = [ ]</msg>
<status starttime="20161208 12:52:50.083" endtime="20161208 12:52:50.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.085">${args} = {u'data': []}</msg>
<status starttime="20161208 12:52:50.084" endtime="20161208 12:52:50.085" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.086">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:52:50.086" endtime="20161208 12:52:50.087" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.089">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:52:50.089" endtime="20161208 12:52:50.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.090">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:50.090" endtime="20161208 12:52:50.090" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:52:50.091" endtime="20161208 12:52:50.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.099">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:50.098" endtime="20161208 12:52:50.099" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:50.100">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:52:50.099" endtime="20161208 12:52:50.100" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:50.099" endtime="20161208 12:52:50.100" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:50.097" endtime="20161208 12:52:50.100" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:50.091" endtime="20161208 12:52:50.100" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:50.101">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:52:50.101" endtime="20161208 12:52:50.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:52:50.101" endtime="20161208 12:52:50.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.102">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:52:50.102" endtime="20161208 12:52:50.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:52:50.103" endtime="20161208 12:52:50.103" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.586">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:50.586">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:50.103" endtime="20161208 12:52:50.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:50.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:50.586" endtime="20161208 12:52:50.586" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:50.100" endtime="20161208 12:52:50.587" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.856">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:52:50.857">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:50.587" endtime="20161208 12:52:50.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.864">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:50.863" endtime="20161208 12:52:50.864" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:50.865">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:52:50.865" endtime="20161208 12:52:50.865" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:50.864" endtime="20161208 12:52:50.866" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:50.862" endtime="20161208 12:52:50.866" status="PASS"></status>
</kw>
<status starttime="20161208 12:52:50.857" endtime="20161208 12:52:50.866" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:50.866">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:50.087" endtime="20161208 12:52:50.866" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:50.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:52:50.085" endtime="20161208 12:52:50.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:52:50.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:52:50.867" endtime="20161208 12:52:50.868" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:52:50.869">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:52:50.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:52:50.869">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:52:50.868" endtime="20161208 12:52:50.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:52:50.869">${state} = 0</msg>
<status starttime="20161208 12:52:50.082" endtime="20161208 12:52:50.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:52:50.870">0 != 1</msg>
<status starttime="20161208 12:52:50.869" endtime="20161208 12:52:50.870" status="FAIL"></status>
</kw>
<status starttime="20161208 12:52:50.081" endtime="20161208 12:52:50.870" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.872">@{arglist} = [ ]</msg>
<status starttime="20161208 12:53:00.872" endtime="20161208 12:53:00.873" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.874">${args} = {u'data': []}</msg>
<status starttime="20161208 12:53:00.873" endtime="20161208 12:53:00.874" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.875">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:53:00.875" endtime="20161208 12:53:00.876" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.878">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:53:00.877" endtime="20161208 12:53:00.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.878">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:00.878" endtime="20161208 12:53:00.878" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:53:00.879" endtime="20161208 12:53:00.879" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.886">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:00.885" endtime="20161208 12:53:00.886" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:00.887">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:00.887" endtime="20161208 12:53:00.888" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:00.886" endtime="20161208 12:53:00.888" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:00.884" endtime="20161208 12:53:00.888" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:00.880" endtime="20161208 12:53:00.888" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:00.889">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:53:00.889" endtime="20161208 12:53:00.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.891">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:00.890" endtime="20161208 12:53:00.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.891">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:53:00.891" endtime="20161208 12:53:00.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:00.892">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:53:00.891" endtime="20161208 12:53:00.892" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:01.220">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:01.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:00.892" endtime="20161208 12:53:01.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:01.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:01.221" endtime="20161208 12:53:01.221" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:00.888" endtime="20161208 12:53:01.221" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:01.493">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:01.494">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:01.221" endtime="20161208 12:53:01.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:01.498">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:01.497" endtime="20161208 12:53:01.498" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:01.498">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:01.498" endtime="20161208 12:53:01.499" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:01.498" endtime="20161208 12:53:01.499" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:01.497" endtime="20161208 12:53:01.499" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:01.494" endtime="20161208 12:53:01.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:01.499">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:00.876" endtime="20161208 12:53:01.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:01.499">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:00.874" endtime="20161208 12:53:01.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:01.500">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:01.499" endtime="20161208 12:53:01.500" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:01.500">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:53:01.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:53:01.500">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:53:01.500" endtime="20161208 12:53:01.500" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:01.501">${state} = 0</msg>
<status starttime="20161208 12:53:00.871" endtime="20161208 12:53:01.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:53:01.501">0 != 1</msg>
<status starttime="20161208 12:53:01.501" endtime="20161208 12:53:01.501" status="FAIL"></status>
</kw>
<status starttime="20161208 12:53:00.871" endtime="20161208 12:53:01.502" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.505">@{arglist} = [ ]</msg>
<status starttime="20161208 12:53:11.504" endtime="20161208 12:53:11.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.506">${args} = {u'data': []}</msg>
<status starttime="20161208 12:53:11.505" endtime="20161208 12:53:11.506" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.508">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:53:11.507" endtime="20161208 12:53:11.508" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.511">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:53:11.510" endtime="20161208 12:53:11.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.512">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:11.511" endtime="20161208 12:53:11.512" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:53:11.513" endtime="20161208 12:53:11.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.520">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:11.520" endtime="20161208 12:53:11.520" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:11.521">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:11.521" endtime="20161208 12:53:11.521" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:11.520" endtime="20161208 12:53:11.521" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:11.519" endtime="20161208 12:53:11.521" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:11.513" endtime="20161208 12:53:11.521" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:11.522">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:53:11.522" endtime="20161208 12:53:11.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.523">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:11.523" endtime="20161208 12:53:11.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.524">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:53:11.523" endtime="20161208 12:53:11.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:11.524">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:53:11.524" endtime="20161208 12:53:11.524" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:12.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:12.128">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:11.524" endtime="20161208 12:53:12.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:12.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:12.128" endtime="20161208 12:53:12.129" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:11.522" endtime="20161208 12:53:12.129" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:12.402">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:12.403">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:12.129" endtime="20161208 12:53:12.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:12.409">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:12.408" endtime="20161208 12:53:12.409" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:12.411">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:12.410" endtime="20161208 12:53:12.411" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:12.409" endtime="20161208 12:53:12.411" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:12.407" endtime="20161208 12:53:12.411" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:12.403" endtime="20161208 12:53:12.411" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:12.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:11.508" endtime="20161208 12:53:12.412" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:12.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:11.506" endtime="20161208 12:53:12.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:12.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:12.412" endtime="20161208 12:53:12.413" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:12.414">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:53:12.414">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:53:12.414">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:53:12.414" endtime="20161208 12:53:12.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:12.415">${state} = 0</msg>
<status starttime="20161208 12:53:11.503" endtime="20161208 12:53:12.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:53:12.417">0 != 1</msg>
<status starttime="20161208 12:53:12.416" endtime="20161208 12:53:12.417" status="FAIL"></status>
</kw>
<status starttime="20161208 12:53:11.502" endtime="20161208 12:53:12.417" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.420">@{arglist} = [ ]</msg>
<status starttime="20161208 12:53:22.419" endtime="20161208 12:53:22.420" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.421">${args} = {u'data': []}</msg>
<status starttime="20161208 12:53:22.420" endtime="20161208 12:53:22.421" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.423">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:53:22.422" endtime="20161208 12:53:22.423" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.425">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:53:22.424" endtime="20161208 12:53:22.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.426">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:22.425" endtime="20161208 12:53:22.426" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:53:22.426" endtime="20161208 12:53:22.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.432">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:22.431" endtime="20161208 12:53:22.432" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:22.433">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:22.433" endtime="20161208 12:53:22.434" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:22.433" endtime="20161208 12:53:22.434" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:22.431" endtime="20161208 12:53:22.434" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:22.427" endtime="20161208 12:53:22.434" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:22.435">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:53:22.435" endtime="20161208 12:53:22.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:22.436" endtime="20161208 12:53:22.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.437">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:53:22.437" endtime="20161208 12:53:22.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:53:22.437" endtime="20161208 12:53:22.438" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:22.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:22.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:22.438" endtime="20161208 12:53:22.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:22.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:22.774" endtime="20161208 12:53:22.775" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:22.434" endtime="20161208 12:53:22.775" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:23.048">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:23.048">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:22.775" endtime="20161208 12:53:23.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:23.054">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:23.053" endtime="20161208 12:53:23.054" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:23.055">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:23.055" endtime="20161208 12:53:23.055" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:23.054" endtime="20161208 12:53:23.055" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:23.052" endtime="20161208 12:53:23.055" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:23.048" endtime="20161208 12:53:23.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:23.056">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:22.423" endtime="20161208 12:53:23.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:23.056">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:22.421" endtime="20161208 12:53:23.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:23.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:23.057" endtime="20161208 12:53:23.057" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:23.058">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:53:23.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:53:23.058">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:53:23.058" endtime="20161208 12:53:23.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:23.059">${state} = 0</msg>
<status starttime="20161208 12:53:22.418" endtime="20161208 12:53:23.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:53:23.060">0 != 1</msg>
<status starttime="20161208 12:53:23.059" endtime="20161208 12:53:23.060" status="FAIL"></status>
</kw>
<status starttime="20161208 12:53:22.418" endtime="20161208 12:53:23.060" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.063">@{arglist} = [ ]</msg>
<status starttime="20161208 12:53:33.062" endtime="20161208 12:53:33.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.064">${args} = {u'data': []}</msg>
<status starttime="20161208 12:53:33.063" endtime="20161208 12:53:33.064" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.066">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:53:33.066" endtime="20161208 12:53:33.066" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.068">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:53:33.068" endtime="20161208 12:53:33.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:33.069" endtime="20161208 12:53:33.070" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:53:33.070" endtime="20161208 12:53:33.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.078">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:33.077" endtime="20161208 12:53:33.078" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:33.080">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:33.079" endtime="20161208 12:53:33.080" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:33.079" endtime="20161208 12:53:33.080" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:33.076" endtime="20161208 12:53:33.080" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:33.071" endtime="20161208 12:53:33.080" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:33.081">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:53:33.081" endtime="20161208 12:53:33.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:33.082" endtime="20161208 12:53:33.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.083">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:53:33.082" endtime="20161208 12:53:33.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.083">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:53:33.083" endtime="20161208 12:53:33.083" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.415">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:33.415">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:33.083" endtime="20161208 12:53:33.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:33.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:33.415" endtime="20161208 12:53:33.416" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:33.080" endtime="20161208 12:53:33.416" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.684">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:33.684">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:33.416" endtime="20161208 12:53:33.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.689">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:33.688" endtime="20161208 12:53:33.689" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:33.690">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:33.689" endtime="20161208 12:53:33.690" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:33.689" endtime="20161208 12:53:33.690" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:33.687" endtime="20161208 12:53:33.691" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:33.685" endtime="20161208 12:53:33.691" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:33.691">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:33.067" endtime="20161208 12:53:33.691" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:33.691">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:33.064" endtime="20161208 12:53:33.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:33.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:33.692" endtime="20161208 12:53:33.692" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:33.693">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:53:33.693">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:53:33.693">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:53:33.693" endtime="20161208 12:53:33.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:33.694">${state} = 0</msg>
<status starttime="20161208 12:53:33.062" endtime="20161208 12:53:33.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:53:33.695">0 != 1</msg>
<status starttime="20161208 12:53:33.694" endtime="20161208 12:53:33.695" status="FAIL"></status>
</kw>
<status starttime="20161208 12:53:33.061" endtime="20161208 12:53:33.695" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.698">@{arglist} = [ ]</msg>
<status starttime="20161208 12:53:43.698" endtime="20161208 12:53:43.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.699">${args} = {u'data': []}</msg>
<status starttime="20161208 12:53:43.698" endtime="20161208 12:53:43.699" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.701">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:53:43.701" endtime="20161208 12:53:43.701" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.703">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:53:43.703" endtime="20161208 12:53:43.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:43.704" endtime="20161208 12:53:43.704" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:53:43.705" endtime="20161208 12:53:43.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.711">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:43.711" endtime="20161208 12:53:43.711" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:43.712">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:43.712" endtime="20161208 12:53:43.712" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:43.711" endtime="20161208 12:53:43.712" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:43.710" endtime="20161208 12:53:43.713" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:43.705" endtime="20161208 12:53:43.713" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:43.713">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:53:43.713" endtime="20161208 12:53:43.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.714">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:43.714" endtime="20161208 12:53:43.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.715">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:53:43.715" endtime="20161208 12:53:43.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:43.716">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:53:43.715" endtime="20161208 12:53:43.716" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:44.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:44.059">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:43.716" endtime="20161208 12:53:44.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:44.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:44.059" endtime="20161208 12:53:44.060" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:43.713" endtime="20161208 12:53:44.060" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:44.326">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:44.326">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:44.060" endtime="20161208 12:53:44.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:44.330">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:44.330" endtime="20161208 12:53:44.330" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:44.331">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:44.331" endtime="20161208 12:53:44.331" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:44.331" endtime="20161208 12:53:44.331" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:44.330" endtime="20161208 12:53:44.332" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:44.327" endtime="20161208 12:53:44.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:44.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:43.701" endtime="20161208 12:53:44.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:44.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:43.699" endtime="20161208 12:53:44.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:44.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:44.332" endtime="20161208 12:53:44.333" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:44.333">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:53:44.333">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:53:44.333">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:53:44.333" endtime="20161208 12:53:44.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:44.333">${state} = 0</msg>
<status starttime="20161208 12:53:43.697" endtime="20161208 12:53:44.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:53:44.334">0 != 1</msg>
<status starttime="20161208 12:53:44.334" endtime="20161208 12:53:44.334" status="FAIL"></status>
</kw>
<status starttime="20161208 12:53:43.696" endtime="20161208 12:53:44.334" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.337">@{arglist} = [ ]</msg>
<status starttime="20161208 12:53:54.337" endtime="20161208 12:53:54.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.338">${args} = {u'data': []}</msg>
<status starttime="20161208 12:53:54.337" endtime="20161208 12:53:54.338" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.340">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:53:54.339" endtime="20161208 12:53:54.340" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.342">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:53:54.342" endtime="20161208 12:53:54.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.343">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:54.342" endtime="20161208 12:53:54.343" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:53:54.344" endtime="20161208 12:53:54.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.351">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:54.350" endtime="20161208 12:53:54.351" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:54.352">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:53:54.351" endtime="20161208 12:53:54.352" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:54.351" endtime="20161208 12:53:54.352" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:54.349" endtime="20161208 12:53:54.352" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:54.345" endtime="20161208 12:53:54.352" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:54.353">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:53:54.352" endtime="20161208 12:53:54.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.354">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:53:54.353" endtime="20161208 12:53:54.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.354">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:53:54.354" endtime="20161208 12:53:54.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.355">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:53:54.354" endtime="20161208 12:53:54.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.681">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:54.681">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:54.355" endtime="20161208 12:53:54.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:54.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:54.682" endtime="20161208 12:53:54.682" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:54.352" endtime="20161208 12:53:54.682" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.950">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:53:54.950">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:54.683" endtime="20161208 12:53:54.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.955">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:54.954" endtime="20161208 12:53:54.955" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:54.956">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:53:54.956" endtime="20161208 12:53:54.956" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:54.955" endtime="20161208 12:53:54.956" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:54.954" endtime="20161208 12:53:54.956" status="PASS"></status>
</kw>
<status starttime="20161208 12:53:54.951" endtime="20161208 12:53:54.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:54.956">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:54.340" endtime="20161208 12:53:54.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:54.957">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:53:54.338" endtime="20161208 12:53:54.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:53:54.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:53:54.957" endtime="20161208 12:53:54.957" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:53:54.958">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:53:54.958">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:53:54.958">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:53:54.957" endtime="20161208 12:53:54.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:53:54.958">${state} = 0</msg>
<status starttime="20161208 12:53:54.336" endtime="20161208 12:53:54.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:53:54.959">0 != 1</msg>
<status starttime="20161208 12:53:54.958" endtime="20161208 12:53:54.959" status="FAIL"></status>
</kw>
<status starttime="20161208 12:53:54.335" endtime="20161208 12:53:54.959" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.962">@{arglist} = [ ]</msg>
<status starttime="20161208 12:54:04.961" endtime="20161208 12:54:04.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.963">${args} = {u'data': []}</msg>
<status starttime="20161208 12:54:04.962" endtime="20161208 12:54:04.963" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.965">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:54:04.964" endtime="20161208 12:54:04.965" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.967">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:54:04.966" endtime="20161208 12:54:04.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:04.967" endtime="20161208 12:54:04.968" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:54:04.968" endtime="20161208 12:54:04.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.974">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:04.973" endtime="20161208 12:54:04.974" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:04.974">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:04.974" endtime="20161208 12:54:04.975" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:04.974" endtime="20161208 12:54:04.975" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:04.972" endtime="20161208 12:54:04.975" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:04.969" endtime="20161208 12:54:04.975" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:04.976">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:54:04.975" endtime="20161208 12:54:04.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:04.977" endtime="20161208 12:54:04.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.978">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:54:04.977" endtime="20161208 12:54:04.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:04.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:54:04.978" endtime="20161208 12:54:04.978" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:05.307">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:05.308">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:04.978" endtime="20161208 12:54:05.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:05.308">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:05.308" endtime="20161208 12:54:05.308" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:04.975" endtime="20161208 12:54:05.308" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:05.764">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:05.764">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:05.309" endtime="20161208 12:54:05.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:05.768">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:05.768" endtime="20161208 12:54:05.768" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:05.769">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:05.769" endtime="20161208 12:54:05.769" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:05.768" endtime="20161208 12:54:05.769" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:05.767" endtime="20161208 12:54:05.769" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:05.765" endtime="20161208 12:54:05.769" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:05.770">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:04.965" endtime="20161208 12:54:05.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:05.770">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:04.963" endtime="20161208 12:54:05.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:05.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:05.770" endtime="20161208 12:54:05.771" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:05.772">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:54:05.772">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:54:05.772">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:54:05.771" endtime="20161208 12:54:05.772" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:05.772">${state} = 0</msg>
<status starttime="20161208 12:54:04.960" endtime="20161208 12:54:05.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:05.773">0 != 1</msg>
<status starttime="20161208 12:54:05.773" endtime="20161208 12:54:05.774" status="FAIL"></status>
</kw>
<status starttime="20161208 12:54:04.960" endtime="20161208 12:54:05.774" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.776">@{arglist} = [ ]</msg>
<status starttime="20161208 12:54:15.776" endtime="20161208 12:54:15.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.777">${args} = {u'data': []}</msg>
<status starttime="20161208 12:54:15.777" endtime="20161208 12:54:15.777" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.779">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:54:15.779" endtime="20161208 12:54:15.779" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.782">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:54:15.781" endtime="20161208 12:54:15.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:15.783" endtime="20161208 12:54:15.783" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:54:15.784" endtime="20161208 12:54:15.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.792">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:15.791" endtime="20161208 12:54:15.792" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:15.792">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:15.792" endtime="20161208 12:54:15.793" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:15.792" endtime="20161208 12:54:15.793" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:15.790" endtime="20161208 12:54:15.793" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:15.784" endtime="20161208 12:54:15.793" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:15.794">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:54:15.793" endtime="20161208 12:54:15.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:15.794" endtime="20161208 12:54:15.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.795">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:54:15.795" endtime="20161208 12:54:15.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:15.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:54:15.795" endtime="20161208 12:54:15.796" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:16.137">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:16.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:15.796" endtime="20161208 12:54:16.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:16.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:16.138" endtime="20161208 12:54:16.138" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:15.793" endtime="20161208 12:54:16.138" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:16.405">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:16.405">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:16.139" endtime="20161208 12:54:16.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:16.411">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:16.411" endtime="20161208 12:54:16.411" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:16.412">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:16.412" endtime="20161208 12:54:16.413" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:16.411" endtime="20161208 12:54:16.413" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:16.409" endtime="20161208 12:54:16.413" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:16.406" endtime="20161208 12:54:16.413" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:16.413">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:15.780" endtime="20161208 12:54:16.413" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:16.413">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:15.778" endtime="20161208 12:54:16.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:16.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:16.414" endtime="20161208 12:54:16.414" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:16.415">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:54:16.415">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:54:16.415">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:54:16.415" endtime="20161208 12:54:16.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:16.415">${state} = 0</msg>
<status starttime="20161208 12:54:15.775" endtime="20161208 12:54:16.416" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:16.416">0 != 1</msg>
<status starttime="20161208 12:54:16.416" endtime="20161208 12:54:16.416" status="FAIL"></status>
</kw>
<status starttime="20161208 12:54:15.774" endtime="20161208 12:54:16.416" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.419">@{arglist} = [ ]</msg>
<status starttime="20161208 12:54:26.419" endtime="20161208 12:54:26.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.420">${args} = {u'data': []}</msg>
<status starttime="20161208 12:54:26.419" endtime="20161208 12:54:26.420" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.422">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:54:26.421" endtime="20161208 12:54:26.422" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.424">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:54:26.423" endtime="20161208 12:54:26.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.425">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:26.424" endtime="20161208 12:54:26.425" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:54:26.425" endtime="20161208 12:54:26.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.434">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:26.433" endtime="20161208 12:54:26.434" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:26.435">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:26.434" endtime="20161208 12:54:26.435" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:26.434" endtime="20161208 12:54:26.435" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:26.432" endtime="20161208 12:54:26.435" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:26.426" endtime="20161208 12:54:26.435" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:26.436">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:54:26.436" endtime="20161208 12:54:26.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:26.437" endtime="20161208 12:54:26.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.462">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:54:26.462" endtime="20161208 12:54:26.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.463">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:54:26.463" endtime="20161208 12:54:26.464" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:26.808">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:26.808">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:26.464" endtime="20161208 12:54:26.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:26.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:26.808" endtime="20161208 12:54:26.809" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:26.435" endtime="20161208 12:54:26.809" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:27.076">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:27.076">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:26.809" endtime="20161208 12:54:27.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:27.084">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:27.083" endtime="20161208 12:54:27.084" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:27.085">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:27.085" endtime="20161208 12:54:27.086" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:27.084" endtime="20161208 12:54:27.086" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:27.082" endtime="20161208 12:54:27.086" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:27.077" endtime="20161208 12:54:27.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:27.086">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:26.422" endtime="20161208 12:54:27.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:27.087">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:26.420" endtime="20161208 12:54:27.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:27.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:27.087" endtime="20161208 12:54:27.088" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:27.089">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:54:27.089">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:54:27.089">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:54:27.089" endtime="20161208 12:54:27.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:27.090">${state} = 0</msg>
<status starttime="20161208 12:54:26.418" endtime="20161208 12:54:27.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:27.091">0 != 1</msg>
<status starttime="20161208 12:54:27.090" endtime="20161208 12:54:27.091" status="FAIL"></status>
</kw>
<status starttime="20161208 12:54:26.417" endtime="20161208 12:54:27.091" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.093">@{arglist} = [ ]</msg>
<status starttime="20161208 12:54:37.093" endtime="20161208 12:54:37.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.095">${args} = {u'data': []}</msg>
<status starttime="20161208 12:54:37.094" endtime="20161208 12:54:37.095" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.097">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:54:37.096" endtime="20161208 12:54:37.097" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.099">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:54:37.098" endtime="20161208 12:54:37.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.100">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:37.099" endtime="20161208 12:54:37.100" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:54:37.100" endtime="20161208 12:54:37.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.108">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:37.107" endtime="20161208 12:54:37.108" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:37.109">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:37.109" endtime="20161208 12:54:37.109" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:37.108" endtime="20161208 12:54:37.110" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:37.106" endtime="20161208 12:54:37.110" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:37.101" endtime="20161208 12:54:37.110" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:37.111">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:54:37.111" endtime="20161208 12:54:37.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.112">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:37.112" endtime="20161208 12:54:37.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.113">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:54:37.113" endtime="20161208 12:54:37.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.113">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:54:37.113" endtime="20161208 12:54:37.114" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:37.501">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:37.501">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:37.114" endtime="20161208 12:54:37.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:37.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:37.501" endtime="20161208 12:54:37.502" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:37.110" endtime="20161208 12:54:37.502" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:38.014">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:38.015">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:37.502" endtime="20161208 12:54:38.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:38.019">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:38.018" endtime="20161208 12:54:38.019" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:38.019">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:38.019" endtime="20161208 12:54:38.019" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:38.019" endtime="20161208 12:54:38.020" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:38.018" endtime="20161208 12:54:38.020" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:38.015" endtime="20161208 12:54:38.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:38.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:37.097" endtime="20161208 12:54:38.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:38.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:37.095" endtime="20161208 12:54:38.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:38.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:38.020" endtime="20161208 12:54:38.021" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:38.022">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:54:38.022">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:54:38.022">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:54:38.021" endtime="20161208 12:54:38.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:38.022">${state} = 0</msg>
<status starttime="20161208 12:54:37.092" endtime="20161208 12:54:38.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:38.023">0 != 1</msg>
<status starttime="20161208 12:54:38.023" endtime="20161208 12:54:38.024" status="FAIL"></status>
</kw>
<status starttime="20161208 12:54:37.091" endtime="20161208 12:54:38.024" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.027">@{arglist} = [ ]</msg>
<status starttime="20161208 12:54:48.026" endtime="20161208 12:54:48.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.028">${args} = {u'data': []}</msg>
<status starttime="20161208 12:54:48.027" endtime="20161208 12:54:48.028" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.030">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:54:48.029" endtime="20161208 12:54:48.030" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.032">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:54:48.032" endtime="20161208 12:54:48.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:48.033" endtime="20161208 12:54:48.033" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:54:48.034" endtime="20161208 12:54:48.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.041">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:48.041" endtime="20161208 12:54:48.041" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:48.042">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:48.042" endtime="20161208 12:54:48.042" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:48.042" endtime="20161208 12:54:48.042" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:48.039" endtime="20161208 12:54:48.043" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:48.035" endtime="20161208 12:54:48.043" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:48.043">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:54:48.043" endtime="20161208 12:54:48.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:48.044" endtime="20161208 12:54:48.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.045">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:54:48.045" endtime="20161208 12:54:48.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:54:48.045" endtime="20161208 12:54:48.045" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.380">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:48.381">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:48.046" endtime="20161208 12:54:48.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:48.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:48.381" endtime="20161208 12:54:48.382" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:48.043" endtime="20161208 12:54:48.382" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.650">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:48.650">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:48.382" endtime="20161208 12:54:48.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.655">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:48.654" endtime="20161208 12:54:48.655" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:48.656">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:48.655" endtime="20161208 12:54:48.656" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:48.655" endtime="20161208 12:54:48.656" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:48.654" endtime="20161208 12:54:48.656" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:48.651" endtime="20161208 12:54:48.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:48.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:48.030" endtime="20161208 12:54:48.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:48.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:48.028" endtime="20161208 12:54:48.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:48.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:48.657" endtime="20161208 12:54:48.657" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:48.657">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:54:48.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:54:48.658">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:54:48.657" endtime="20161208 12:54:48.658" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:48.658">${state} = 0</msg>
<status starttime="20161208 12:54:48.026" endtime="20161208 12:54:48.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:48.659">0 != 1</msg>
<status starttime="20161208 12:54:48.658" endtime="20161208 12:54:48.659" status="FAIL"></status>
</kw>
<status starttime="20161208 12:54:48.025" endtime="20161208 12:54:48.659" status="FAIL"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.661">@{arglist} = [ ]</msg>
<status starttime="20161208 12:54:58.661" endtime="20161208 12:54:58.662" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.662">${args} = {u'data': []}</msg>
<status starttime="20161208 12:54:58.662" endtime="20161208 12:54:58.663" status="PASS"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.664">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 12:54:58.664" endtime="20161208 12:54:58.665" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.667">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 12:54:58.666" endtime="20161208 12:54:58.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:58.667" endtime="20161208 12:54:58.668" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:54:58.668" endtime="20161208 12:54:58.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.674">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:58.673" endtime="20161208 12:54:58.674" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:58.675">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:54:58.674" endtime="20161208 12:54:58.675" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:58.674" endtime="20161208 12:54:58.675" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:58.673" endtime="20161208 12:54:58.675" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:58.669" endtime="20161208 12:54:58.675" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:58.676">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:54:58.676" endtime="20161208 12:54:58.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.677">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:54:58.677" endtime="20161208 12:54:58.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.678">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:54:58.677" endtime="20161208 12:54:58.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:58.678">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:54:58.678" endtime="20161208 12:54:58.678" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.008">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:59.008">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:58.678" endtime="20161208 12:54:59.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:59.009" endtime="20161208 12:54:59.009" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:58.675" endtime="20161208 12:54:59.010" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.509">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:54:59.509">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:59.010" endtime="20161208 12:54:59.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.518">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:59.517" endtime="20161208 12:54:59.518" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.520">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:54:59.520" endtime="20161208 12:54:59.521" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.519" endtime="20161208 12:54:59.521" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.516" endtime="20161208 12:54:59.521" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.510" endtime="20161208 12:54:59.521" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:59.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:58.665" endtime="20161208 12:54:59.521" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:59.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:54:58.663" endtime="20161208 12:54:59.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:54:59.522" endtime="20161208 12:54:59.522" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.523">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:54:59.523">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:54:59.523">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:54:59.522" endtime="20161208 12:54:59.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:59.523">${state} = 0</msg>
<status starttime="20161208 12:54:58.660" endtime="20161208 12:54:59.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:59.524">0 != 1</msg>
<status starttime="20161208 12:54:59.523" endtime="20161208 12:54:59.524" status="FAIL"></status>
</kw>
<status starttime="20161208 12:54:58.659" endtime="20161208 12:54:59.524" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20161208 12:54:59.524">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</msg>
<status starttime="20161208 12:51:50.610" endtime="20161208 12:54:59.524" status="FAIL"></status>
</kw>
<status starttime="20161208 12:51:49.594" endtime="20161208 12:54:59.525" status="FAIL"></status>
</kw>
<status starttime="20161208 12:51:47.259" endtime="20161208 12:54:59.525" status="FAIL"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="FFDC">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.529">${cur_time} = 2016-12-08 12:54:59:529228</msg>
<status starttime="20161208 12:54:59.529" endtime="20161208 12:54:59.529" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.530">${cur_time} = 20161208125459529228</msg>
<status starttime="20161208 12:54:59.530" endtime="20161208 12:54:59.530" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:59.530">${cur_time} = 20161208125459529228</msg>
<status starttime="20161208 12:54:59.529" endtime="20161208 12:54:59.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.533">${FFDC_TIME} = 20161208125459529228</msg>
<status starttime="20161208 12:54:59.530" endtime="20161208 12:54:59.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status starttime="20161208 12:54:59.534" endtime="20161208 12:54:59.534" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.535">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20161208 12:54:59.535" endtime="20161208 12:54:59.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.535">${suite_name} = 20161208125459529228_TestsTestBasicPoweron</msg>
<status starttime="20161208 12:54:59.535" endtime="20161208 12:54:59.535" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.536">${test_name} = powerontest</msg>
<status starttime="20161208 12:54:59.536" endtime="20161208 12:54:59.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.536">${test_name} = 20161208125459529228_powerontest</msg>
<status starttime="20161208 12:54:59.536" endtime="20161208 12:54:59.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:59.537">${suitename} = 20161208125459529228_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161208 12:54:59.537">${testname} = 20161208125459529228_powerontest</msg>
<status starttime="20161208 12:54:59.534" endtime="20161208 12:54:59.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.540">${FFDC_DIR_PATH} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest</msg>
<status starttime="20161208 12:54:59.537" endtime="20161208 12:54:59.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.540">${prefix} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_</msg>
<status starttime="20161208 12:54:59.540" endtime="20161208 12:54:59.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.543">${LOG_PREFIX} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_</msg>
<status starttime="20161208 12:54:59.541" endtime="20161208 12:54:59.544" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.545">Created directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.544" endtime="20161208 12:54:59.545" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.548">${FFDC_FILE_PATH} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt</msg>
<status starttime="20161208 12:54:59.545" endtime="20161208 12:54:59.548" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.549">Created file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.549" endtime="20161208 12:54:59.549" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.545" endtime="20161208 12:54:59.549" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.544" endtime="20161208 12:54:59.549" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.551">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.550" endtime="20161208 12:54:59.551" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.550" endtime="20161208 12:54:59.551" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.552">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.551" endtime="20161208 12:54:59.552" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.551" endtime="20161208 12:54:59.552" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.553">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.553" endtime="20161208 12:54:59.553" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.552" endtime="20161208 12:54:59.553" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.554">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.554" endtime="20161208 12:54:59.554" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.553" endtime="20161208 12:54:59.554" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.556">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.555" endtime="20161208 12:54:59.556" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.555" endtime="20161208 12:54:59.556" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.557">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.557" endtime="20161208 12:54:59.557" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.556" endtime="20161208 12:54:59.557" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.558">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.558" endtime="20161208 12:54:59.558" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.558" endtime="20161208 12:54:59.559" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.560">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.559" endtime="20161208 12:54:59.560" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.559" endtime="20161208 12:54:59.560" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.561">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.560" endtime="20161208 12:54:59.561" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.560" endtime="20161208 12:54:59.561" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.562">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.562" endtime="20161208 12:54:59.562" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.561" endtime="20161208 12:54:59.563" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.563">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.563" endtime="20161208 12:54:59.564" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.563" endtime="20161208 12:54:59.564" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.565">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.564" endtime="20161208 12:54:59.565" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.564" endtime="20161208 12:54:59.565" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.566">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.565" endtime="20161208 12:54:59.566" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.565" endtime="20161208 12:54:59.566" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.567">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.567" endtime="20161208 12:54:59.567" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.566" endtime="20161208 12:54:59.567" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.561" endtime="20161208 12:54:59.568" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.569">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.568" endtime="20161208 12:54:59.569" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.568" endtime="20161208 12:54:59.569" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.569">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status starttime="20161208 12:54:59.569" endtime="20161208 12:54:59.569" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.571">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.571" endtime="20161208 12:54:59.571" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.570" endtime="20161208 12:54:59.571" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.572">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.572" endtime="20161208 12:54:59.572" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.571" endtime="20161208 12:54:59.572" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.570" endtime="20161208 12:54:59.572" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.573">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.573" endtime="20161208 12:54:59.573" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.573" endtime="20161208 12:54:59.574" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.575">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.574" endtime="20161208 12:54:59.575" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.574" endtime="20161208 12:54:59.575" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.572" endtime="20161208 12:54:59.575" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.576">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.576" endtime="20161208 12:54:59.576" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.575" endtime="20161208 12:54:59.576" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.577">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.577" endtime="20161208 12:54:59.577" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.576" endtime="20161208 12:54:59.577" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.575" endtime="20161208 12:54:59.577" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.569" endtime="20161208 12:54:59.577" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:54:59.578">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:54:59.578" endtime="20161208 12:54:59.578" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.577" endtime="20161208 12:54:59.578" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.549" endtime="20161208 12:54:59.579" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.579">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20161208 12:54:59.579" endtime="20161208 12:54:59.579" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.580">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') ]</msg>
<status starttime="20161208 12:54:59.580" endtime="20161208 12:54:59.580" status="PASS"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.586">Returning from the enclosing user keyword.</msg>
<status starttime="20161208 12:54:59.582" endtime="20161208 12:54:59.587" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.582" endtime="20161208 12:54:59.587" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.581" endtime="20161208 12:54:59.587" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.581" endtime="20161208 12:54:59.587" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.581" endtime="20161208 12:54:59.587" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:59.591">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:54:59.591" endtime="20161208 12:54:59.591" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:59.591">${has_host} = False</msg>
<status starttime="20161208 12:54:59.590" endtime="20161208 12:54:59.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:54:59.596" endtime="20161208 12:54:59.597" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.592" endtime="20161208 12:54:59.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.602">${port_num} = 22</msg>
<status starttime="20161208 12:54:59.602" endtime="20161208 12:54:59.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.603">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:54:59.602" endtime="20161208 12:54:59.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:54:59.603">${https_num} = 443</msg>
<status starttime="20161208 12:54:59.603" endtime="20161208 12:54:59.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.604">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:54:59.604" endtime="20161208 12:54:59.605" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.601" endtime="20161208 12:54:59.605" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.597" endtime="20161208 12:54:59.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:54:59.606">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:54:59.606" endtime="20161208 12:54:59.606" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:54:59.606">${has_port} = False</msg>
<status starttime="20161208 12:54:59.605" endtime="20161208 12:54:59.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:54:59.611" endtime="20161208 12:54:59.612" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:54:59.612" endtime="20161208 12:54:59.612" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.611" endtime="20161208 12:54:59.612" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.607" endtime="20161208 12:54:59.612" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:54:59.613">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:55:02.058">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:54:59.613" endtime="20161208 12:55:02.059" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.590" endtime="20161208 12:55:02.059" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:02.059">@{entries} = [ BMC FILES ]</msg>
<status starttime="20161208 12:55:02.059" endtime="20161208 12:55:02.059" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:02.060">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status starttime="20161208 12:55:02.060" endtime="20161208 12:55:02.060" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:02.061">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_journalctl.txt</msg>
<status starttime="20161208 12:55:02.061" endtime="20161208 12:55:02.062" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 12:55:02.063" endtime="20161208 12:55:02.068" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:02.069">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161208 12:55:03.825">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:03.827">${stdout} = -- Logs begin at Mon 2016-11-21 06:08:11 UTC, end at Mon 2016-11-21 06:16:10 UTC. --
Nov 21 06:08:11 barreleye systemd-journald[400]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161208 12:55:03.827">${stderr} = </msg>
<status starttime="20161208 12:55:02.069" endtime="20161208 12:55:03.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:03.840">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_journalctl.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:03.839" endtime="20161208 12:55:03.841" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.836" endtime="20161208 12:55:03.841" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.828" endtime="20161208 12:55:03.841" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:02.062" endtime="20161208 12:55:03.841" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:02.061" endtime="20161208 12:55:03.841" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:03.842">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_meminfo.txt</msg>
<status starttime="20161208 12:55:03.842" endtime="20161208 12:55:03.842" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 12:55:03.843" endtime="20161208 12:55:03.846" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:03.846">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161208 12:55:03.914">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:03.914">${stdout} = MemTotal:         499020 kB
MemFree:          366808 kB
MemAvailable:     405928 kB
Buffers:           10392 kB
Cached:            43152 kB
SwapCached:            0 kB
Active:            92688 kB
Inac...</msg>
<msg level="INFO" timestamp="20161208 12:55:03.914">${stderr} = </msg>
<status starttime="20161208 12:55:03.846" endtime="20161208 12:55:03.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:03.919">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_meminfo.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:03.919" endtime="20161208 12:55:03.920" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.918" endtime="20161208 12:55:03.920" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.915" endtime="20161208 12:55:03.920" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.842" endtime="20161208 12:55:03.920" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.841" endtime="20161208 12:55:03.920" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:03.921">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_procinfo.txt</msg>
<status starttime="20161208 12:55:03.920" endtime="20161208 12:55:03.921" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 12:55:03.921" endtime="20161208 12:55:03.924" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:03.925">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161208 12:55:04.021">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:04.021">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161208 12:55:04.021">${stderr} = </msg>
<status starttime="20161208 12:55:03.925" endtime="20161208 12:55:04.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:04.025">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_procinfo.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:04.025" endtime="20161208 12:55:04.026" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.024" endtime="20161208 12:55:04.026" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.021" endtime="20161208 12:55:04.026" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.921" endtime="20161208 12:55:04.026" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:03.920" endtime="20161208 12:55:04.026" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:04.027">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_dmesg.txt</msg>
<status starttime="20161208 12:55:04.026" endtime="20161208 12:55:04.027" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 12:55:04.027" endtime="20161208 12:55:04.030" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:04.031">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161208 12:55:04.137">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:04.137">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Mon Nov 28 09:47:45 UTC 2016
CPU: ARM926EJ-S [41069265] r...</msg>
<msg level="INFO" timestamp="20161208 12:55:04.137">${stderr} = </msg>
<status starttime="20161208 12:55:04.030" endtime="20161208 12:55:04.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:04.142">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_dmesg.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:04.141" endtime="20161208 12:55:04.142" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.140" endtime="20161208 12:55:04.142" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.137" endtime="20161208 12:55:04.142" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.027" endtime="20161208 12:55:04.142" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.026" endtime="20161208 12:55:04.142" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:04.143">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_proc_list.txt</msg>
<status starttime="20161208 12:55:04.143" endtime="20161208 12:55:04.143" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 12:55:04.144" endtime="20161208 12:55:04.147" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:04.147">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161208 12:55:04.499">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:04.499">${stdout} = Mem: 132188K used, 366832K free, 9148K shrd, 10392K buff, 43156K cached
CPU:   0% usr   7% sys   0% nic  92% idle   0% io   0% irq   0% sirq
Load average: 0.66 1.56 1.14 1/112 976
  PID  PPID USER    ...</msg>
<msg level="INFO" timestamp="20161208 12:55:04.499">${stderr} = </msg>
<status starttime="20161208 12:55:04.147" endtime="20161208 12:55:04.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:04.504">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_proc_list.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:04.503" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.503" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.500" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.143" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.142" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:02.061" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:02.060" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:02.059" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:02.059" endtime="20161208 12:55:04.504" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.589" endtime="20161208 12:55:04.505" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.589" endtime="20161208 12:55:04.505" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.588" endtime="20161208 12:55:04.505" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.587" endtime="20161208 12:55:04.505" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:04.509">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:55:04.507" endtime="20161208 12:55:04.509" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:04.509">${has_host} = False</msg>
<status starttime="20161208 12:55:04.507" endtime="20161208 12:55:04.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:55:04.512" endtime="20161208 12:55:04.512" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.509" endtime="20161208 12:55:04.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:04.516">${port_num} = 22</msg>
<status starttime="20161208 12:55:04.516" endtime="20161208 12:55:04.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:04.517">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:55:04.517" endtime="20161208 12:55:04.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:04.517">${https_num} = 443</msg>
<status starttime="20161208 12:55:04.517" endtime="20161208 12:55:04.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:04.518">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:55:04.518" endtime="20161208 12:55:04.518" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.516" endtime="20161208 12:55:04.518" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.513" endtime="20161208 12:55:04.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:04.519">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:55:04.519" endtime="20161208 12:55:04.519" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:04.519">${has_port} = False</msg>
<status starttime="20161208 12:55:04.519" endtime="20161208 12:55:04.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:55:04.525" endtime="20161208 12:55:04.525" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:55:04.525" endtime="20161208 12:55:04.526" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.524" endtime="20161208 12:55:04.526" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.520" endtime="20161208 12:55:04.526" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:04.527">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:55:06.710">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:55:04.526" endtime="20161208 12:55:06.710" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.506" endtime="20161208 12:55:06.711" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:06.712">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20161208 12:55:06.711" endtime="20161208 12:55:06.712" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:06.714">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '...</msg>
<status starttime="20161208 12:55:06.713" endtime="20161208 12:55:06.714" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:06.715">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_record_log.txt</msg>
<status starttime="20161208 12:55:06.714" endtime="20161208 12:55:06.716" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:06.718">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20161208 12:55:06.717" endtime="20161208 12:55:06.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 12:55:06.718" endtime="20161208 12:55:06.722" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:06.723">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:06.723" endtime="20161208 12:55:06.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:06.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:06.724" endtime="20161208 12:55:06.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:06.724">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:06.724" endtime="20161208 12:55:06.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:06.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:06.725" endtime="20161208 12:55:06.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:07.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:06.725" endtime="20161208 12:55:07.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:07.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:07.061" endtime="20161208 12:55:07.062" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:06.722" endtime="20161208 12:55:07.062" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.262">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:55:07.262">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:07.062" endtime="20161208 12:55:07.262" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 12:55:07.263" endtime="20161208 12:55:07.265" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:07.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:06.716" endtime="20161208 12:55:07.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:07.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:07.266" endtime="20161208 12:55:07.267" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:07.267">${status} = True</msg>
<status starttime="20161208 12:55:07.266" endtime="20161208 12:55:07.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 12:55:07.267" endtime="20161208 12:55:07.270" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.270">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:55:07.270">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 12:55:07.271">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status starttime="20161208 12:55:07.270" endtime="20161208 12:55:07.271" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:07.272">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_record_log.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_record_log.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:07.272" endtime="20161208 12:55:07.272" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:07.271" endtime="20161208 12:55:07.273" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:06.714" endtime="20161208 12:55:07.273" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.273">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_inventory.txt</msg>
<status starttime="20161208 12:55:07.273" endtime="20161208 12:55:07.274" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.275">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status starttime="20161208 12:55:07.274" endtime="20161208 12:55:07.275" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 12:55:07.275" endtime="20161208 12:55:07.278" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:07.278">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:07.278" endtime="20161208 12:55:07.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.279">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:07.279" endtime="20161208 12:55:07.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.280">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:07.280" endtime="20161208 12:55:07.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.280">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:07.280" endtime="20161208 12:55:07.280" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:07.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:07.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:07.281" endtime="20161208 12:55:07.804" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:07.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:07.804" endtime="20161208 12:55:07.805" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:07.278" endtime="20161208 12:55:07.805" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:11.610">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:55:11.611">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:07.806" endtime="20161208 12:55:11.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 12:55:11.611" endtime="20161208 12:55:11.615" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:11.615">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:07.274" endtime="20161208 12:55:11.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:11.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:11.616" endtime="20161208 12:55:11.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:11.616">${status} = True</msg>
<status starttime="20161208 12:55:11.615" endtime="20161208 12:55:11.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 12:55:11.616" endtime="20161208 12:55:11.619" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:11.624">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-312-g5145547-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/227"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/229"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/229"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:55:11.625">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 12:55:11.626">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-fda20bd",
            "Custom Field 2": "\tskiboot-5.2.0-opdirty...</msg>
<status starttime="20161208 12:55:11.620" endtime="20161208 12:55:11.626" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:11.628">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_inventory.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:11.627" endtime="20161208 12:55:11.628" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:11.626" endtime="20161208 12:55:11.628" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:07.273" endtime="20161208 12:55:11.628" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:11.629">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_led.txt</msg>
<status starttime="20161208 12:55:11.628" endtime="20161208 12:55:11.629" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:11.630">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20161208 12:55:11.629" endtime="20161208 12:55:11.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 12:55:11.630" endtime="20161208 12:55:11.633" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:11.634">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:11.633" endtime="20161208 12:55:11.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:11.634">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:11.634" endtime="20161208 12:55:11.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:11.635">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:11.635" endtime="20161208 12:55:11.635" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:11.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:11.635" endtime="20161208 12:55:11.636" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:12.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:11.636" endtime="20161208 12:55:12.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:12.064">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:12.063" endtime="20161208 12:55:12.064" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:11.633" endtime="20161208 12:55:12.064" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.466">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:55:12.467">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:12.064" endtime="20161208 12:55:12.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 12:55:12.467" endtime="20161208 12:55:12.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:12.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:11.629" endtime="20161208 12:55:12.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:12.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:12.473" endtime="20161208 12:55:12.474" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:12.474">${status} = True</msg>
<status starttime="20161208 12:55:12.472" endtime="20161208 12:55:12.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 12:55:12.474" endtime="20161208 12:55:12.479" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.481">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/227": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:11:21 06:12:40"
    }, 
    "/org/openbmc/records/events/227/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/229": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:11:21 06:12:43"
    }, 
    "/org/openbmc/records/events/229/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:55:12.482">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 12:55:12.482">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/227": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status starttime="20161208 12:55:12.480" endtime="20161208 12:55:12.482" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:12.484">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_led.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:12.483" endtime="20161208 12:55:12.484" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:12.482" endtime="20161208 12:55:12.484" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:11.628" endtime="20161208 12:55:12.484" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.485">${logpath} = /tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_sensor_list.txt</msg>
<status starttime="20161208 12:55:12.484" endtime="20161208 12:55:12.485" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.486">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20161208 12:55:12.486" endtime="20161208 12:55:12.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 12:55:12.486" endtime="20161208 12:55:12.490" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:12.491">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:12.490" endtime="20161208 12:55:12.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:12.491" endtime="20161208 12:55:12.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.492">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:12.492" endtime="20161208 12:55:12.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.493">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:12.492" endtime="20161208 12:55:12.493" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:12.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:12.825">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:12.493" endtime="20161208 12:55:12.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:12.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:12.826" endtime="20161208 12:55:12.826" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:12.490" endtime="20161208 12:55:12.826" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:14.690">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:55:14.690">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:12.827" endtime="20161208 12:55:14.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 12:55:14.691" endtime="20161208 12:55:14.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:14.695">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:12.485" endtime="20161208 12:55:14.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:14.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:14.696" endtime="20161208 12:55:14.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:14.697">${status} = True</msg>
<status starttime="20161208 12:55:14.695" endtime="20161208 12:55:14.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 12:55:14.697" endtime="20161208 12:55:14.701" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:14.705">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": -24, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 5, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 224, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 10, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 25500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 27000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:55:14.706">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 12:55:14.706">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status starttime="20161208 12:55:14.701" endtime="20161208 12:55:14.706" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:14.708">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_sensor_list.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:14.708" endtime="20161208 12:55:14.708" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.707" endtime="20161208 12:55:14.708" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:12.484" endtime="20161208 12:55:14.708" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:06.714" endtime="20161208 12:55:14.708" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:06.712" endtime="20161208 12:55:14.708" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:06.712" endtime="20161208 12:55:14.708" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:06.712" endtime="20161208 12:55:14.709" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.506" endtime="20161208 12:55:14.709" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.505" endtime="20161208 12:55:14.709" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.505" endtime="20161208 12:55:14.709" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:04.505" endtime="20161208 12:55:14.709" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:14.711">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:55:14.711" endtime="20161208 12:55:14.712" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:14.712">${has_host} = False</msg>
<status starttime="20161208 12:55:14.711" endtime="20161208 12:55:14.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:55:14.715" endtime="20161208 12:55:14.715" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.712" endtime="20161208 12:55:14.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:14.719">${port_num} = 22</msg>
<status starttime="20161208 12:55:14.719" endtime="20161208 12:55:14.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:14.720">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:55:14.719" endtime="20161208 12:55:14.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:14.720">${https_num} = 443</msg>
<status starttime="20161208 12:55:14.720" endtime="20161208 12:55:14.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:14.721">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:55:14.720" endtime="20161208 12:55:14.721" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.719" endtime="20161208 12:55:14.721" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.716" endtime="20161208 12:55:14.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:14.722">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:55:14.722" endtime="20161208 12:55:14.722" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:14.722">${has_port} = False</msg>
<status starttime="20161208 12:55:14.721" endtime="20161208 12:55:14.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:55:14.726" endtime="20161208 12:55:14.726" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:55:14.727" endtime="20161208 12:55:14.727" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.726" endtime="20161208 12:55:14.727" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.722" endtime="20161208 12:55:14.727" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:14.727">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:55:17.011">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:55:14.727" endtime="20161208 12:55:17.011" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.710" endtime="20161208 12:55:17.011" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:17.012">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status starttime="20161208 12:55:17.012" endtime="20161208 12:55:17.012" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:17.014">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status starttime="20161208 12:55:17.014" endtime="20161208 12:55:17.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:17.020">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20161208 12:55:17.015" endtime="20161208 12:55:17.020" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.026">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.026" endtime="20161208 12:55:17.026" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.025" endtime="20161208 12:55:17.026" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.027">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.027" endtime="20161208 12:55:17.027" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.026" endtime="20161208 12:55:17.027" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.028">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.028" endtime="20161208 12:55:17.028" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.028" endtime="20161208 12:55:17.029" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.030">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.029" endtime="20161208 12:55:17.030" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.029" endtime="20161208 12:55:17.030" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.025" endtime="20161208 12:55:17.030" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.022" endtime="20161208 12:55:17.030" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:17.030">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161208 12:55:17.099">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:17.100">${stdout} = Linux barreleye 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff #1 Mon Nov 28 09:47:45 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161208 12:55:17.100">${stderr} = </msg>
<status starttime="20161208 12:55:17.030" endtime="20161208 12:55:17.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.104">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.104" endtime="20161208 12:55:17.104" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.103" endtime="20161208 12:55:17.104" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.100" endtime="20161208 12:55:17.104" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.021" endtime="20161208 12:55:17.105" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.020" endtime="20161208 12:55:17.105" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.110">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.109" endtime="20161208 12:55:17.110" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.109" endtime="20161208 12:55:17.110" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.111">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.111" endtime="20161208 12:55:17.111" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.110" endtime="20161208 12:55:17.111" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.112">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.112" endtime="20161208 12:55:17.112" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.112" endtime="20161208 12:55:17.113" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.114">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.113" endtime="20161208 12:55:17.114" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.113" endtime="20161208 12:55:17.114" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.108" endtime="20161208 12:55:17.114" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.106" endtime="20161208 12:55:17.114" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:17.114">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161208 12:55:17.210">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:17.211">${stdout} =  06:16:26 up 8 min,  load average: 1.09, 1.62, 1.16</msg>
<msg level="INFO" timestamp="20161208 12:55:17.211">${stderr} = </msg>
<status starttime="20161208 12:55:17.114" endtime="20161208 12:55:17.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.215">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.215" endtime="20161208 12:55:17.215" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.214" endtime="20161208 12:55:17.215" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.211" endtime="20161208 12:55:17.215" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.105" endtime="20161208 12:55:17.215" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.105" endtime="20161208 12:55:17.215" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.220">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.220" endtime="20161208 12:55:17.221" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.220" endtime="20161208 12:55:17.221" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.222">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.221" endtime="20161208 12:55:17.222" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.221" endtime="20161208 12:55:17.222" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.223">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.223" endtime="20161208 12:55:17.223" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.222" endtime="20161208 12:55:17.223" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.224">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.224" endtime="20161208 12:55:17.224" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.224" endtime="20161208 12:55:17.225" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.219" endtime="20161208 12:55:17.225" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.216" endtime="20161208 12:55:17.225" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:17.225">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161208 12:55:17.322">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:17.322">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M      8.9...</msg>
<msg level="INFO" timestamp="20161208 12:55:17.322">${stderr} = </msg>
<status starttime="20161208 12:55:17.225" endtime="20161208 12:55:17.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.326">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.326" endtime="20161208 12:55:17.326" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.325" endtime="20161208 12:55:17.327" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.322" endtime="20161208 12:55:17.327" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.216" endtime="20161208 12:55:17.327" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.216" endtime="20161208 12:55:17.327" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.020" endtime="20161208 12:55:17.327" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.013" endtime="20161208 12:55:17.327" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.013" endtime="20161208 12:55:17.327" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:17.328">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20161208 12:55:17.328" endtime="20161208 12:55:17.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:17.329">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20161208 12:55:17.328" endtime="20161208 12:55:17.329" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.334">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.333" endtime="20161208 12:55:17.334" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.333" endtime="20161208 12:55:17.334" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.335">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.335" endtime="20161208 12:55:17.335" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.334" endtime="20161208 12:55:17.335" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.336">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.336" endtime="20161208 12:55:17.336" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.335" endtime="20161208 12:55:17.336" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:17.337">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:17.337" endtime="20161208 12:55:17.337" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.337" endtime="20161208 12:55:17.338" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.333" endtime="20161208 12:55:17.338" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.330" endtime="20161208 12:55:17.338" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:17.338">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161208 12:55:19.416">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:19.416">${stdout} =  = HOST_POWERING_ON</msg>
<msg level="INFO" timestamp="20161208 12:55:19.417">${stderr} = </msg>
<status starttime="20161208 12:55:17.338" endtime="20161208 12:55:19.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.425">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.424" endtime="20161208 12:55:19.425" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.423" endtime="20161208 12:55:19.425" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.417" endtime="20161208 12:55:19.425" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.329" endtime="20161208 12:55:19.426" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.329" endtime="20161208 12:55:19.426" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.329" endtime="20161208 12:55:19.426" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.327" endtime="20161208 12:55:19.426" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.327" endtime="20161208 12:55:19.426" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.428">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20161208 12:55:19.427" endtime="20161208 12:55:19.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:19.429">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20161208 12:55:19.428" endtime="20161208 12:55:19.429" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.436">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.435" endtime="20161208 12:55:19.436" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.435" endtime="20161208 12:55:19.436" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.437">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.437" endtime="20161208 12:55:19.437" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.436" endtime="20161208 12:55:19.437" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.438">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.438" endtime="20161208 12:55:19.438" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.437" endtime="20161208 12:55:19.438" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.439">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.439" endtime="20161208 12:55:19.439" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.439" endtime="20161208 12:55:19.440" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.434" endtime="20161208 12:55:19.440" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.431" endtime="20161208 12:55:19.440" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.440">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161208 12:55:19.586">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:19.586">${stdout} = 20161208033619</msg>
<msg level="INFO" timestamp="20161208 12:55:19.586">${stderr} = </msg>
<status starttime="20161208 12:55:19.440" endtime="20161208 12:55:19.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.590">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.590" endtime="20161208 12:55:19.590" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.589" endtime="20161208 12:55:19.591" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.586" endtime="20161208 12:55:19.591" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.430" endtime="20161208 12:55:19.591" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.429" endtime="20161208 12:55:19.591" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.596">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.596" endtime="20161208 12:55:19.596" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.595" endtime="20161208 12:55:19.596" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.597">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.597" endtime="20161208 12:55:19.597" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.596" endtime="20161208 12:55:19.598" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.599">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.598" endtime="20161208 12:55:19.599" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.598" endtime="20161208 12:55:19.599" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.600">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.599" endtime="20161208 12:55:19.600" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.599" endtime="20161208 12:55:19.600" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.595" endtime="20161208 12:55:19.600" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.592" endtime="20161208 12:55:19.600" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.600">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161208 12:55:19.729">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:19.729">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-312"
VERSION_ID="v1.99.0-312-g5145547-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161208 12:55:19.729">${stderr} = </msg>
<status starttime="20161208 12:55:19.600" endtime="20161208 12:55:19.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.735">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt"&gt;/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest/20161208125459529228_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.734" endtime="20161208 12:55:19.735" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.733" endtime="20161208 12:55:19.735" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.730" endtime="20161208 12:55:19.735" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.591" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.591" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.429" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.426" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.426" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:17.013" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.710" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.710" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.709" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:14.709" endtime="20161208 12:55:19.736" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.581" endtime="20161208 12:55:19.737" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.580" endtime="20161208 12:55:19.737" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.580" endtime="20161208 12:55:19.737" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.579" endtime="20161208 12:55:19.737" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.579" endtime="20161208 12:55:19.737" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.738">${cur_time} = 2016-12-08 12:55:19:738116</msg>
<status starttime="20161208 12:55:19.738" endtime="20161208 12:55:19.738" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.739">${cur_time} = 20161208125519738116</msg>
<status starttime="20161208 12:55:19.739" endtime="20161208 12:55:19.739" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:19.740">${cur_time} = 20161208125519738116</msg>
<status starttime="20161208 12:55:19.737" endtime="20161208 12:55:19.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status starttime="20161208 12:55:19.740" endtime="20161208 12:55:19.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:19.741">
/tmp/root/16718/obmc-robot/logs/20161208125459529228_TestsTestBasicPoweron/20161208125459529228_powerontest</msg>
<status starttime="20161208 12:55:19.741" endtime="20161208 12:55:19.741" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.528" endtime="20161208 12:55:19.741" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.526" endtime="20161208 12:55:19.741" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.742">Directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs"&gt;/tmp/root/16718/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 12:55:19.742" endtime="20161208 12:55:19.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.743">File '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 12:55:19.743" endtime="20161208 12:55:19.743" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:19.743">${exist} = True</msg>
<status starttime="20161208 12:55:19.743" endtime="20161208 12:55:19.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 12:55:19.744" endtime="20161208 12:55:19.746" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.747">${cur_time} = 2016-12-08 12:55:19:746979</msg>
<status starttime="20161208 12:55:19.747" endtime="20161208 12:55:19.747" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.748">${cur_time} = 20161208125519746979</msg>
<status starttime="20161208 12:55:19.747" endtime="20161208 12:55:19.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:19.748">${cur_time} = 20161208125519746979</msg>
<status starttime="20161208 12:55:19.746" endtime="20161208 12:55:19.748" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:19.749">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:19.748" endtime="20161208 12:55:19.749" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.742" endtime="20161208 12:55:19.749" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.525" endtime="20161208 12:55:19.749" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:19.751">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:55:19.751" endtime="20161208 12:55:19.751" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:19.751">${has_host} = False</msg>
<status starttime="20161208 12:55:19.750" endtime="20161208 12:55:19.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:55:19.757" endtime="20161208 12:55:19.758" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.751" endtime="20161208 12:55:19.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.763">${port_num} = 22</msg>
<status starttime="20161208 12:55:19.763" endtime="20161208 12:55:19.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.764">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:55:19.764" endtime="20161208 12:55:19.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:19.764">${https_num} = 443</msg>
<status starttime="20161208 12:55:19.764" endtime="20161208 12:55:19.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:19.765">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:55:19.765" endtime="20161208 12:55:19.765" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.763" endtime="20161208 12:55:19.765" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.758" endtime="20161208 12:55:19.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:19.767">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:55:19.766" endtime="20161208 12:55:19.767" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:19.767">${has_port} = False</msg>
<status starttime="20161208 12:55:19.766" endtime="20161208 12:55:19.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:55:19.771" endtime="20161208 12:55:19.771" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:55:19.771" endtime="20161208 12:55:19.772" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.770" endtime="20161208 12:55:19.772" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.767" endtime="20161208 12:55:19.772" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:19.772">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:55:22.154">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:55:19.772" endtime="20161208 12:55:22.155" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:19.749" endtime="20161208 12:55:22.155" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:22.156">Executing command 'ls /tmp/obmc-console.log-20161208125139122991_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161208 12:55:22.265">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:22.265">${pid} = 923</msg>
<msg level="INFO" timestamp="20161208 12:55:22.265">${stderr} = </msg>
<status starttime="20161208 12:55:22.155" endtime="20161208 12:55:22.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:22.267">Length is 0</msg>
<status starttime="20161208 12:55:22.266" endtime="20161208 12:55:22.267" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:22.268">Executing command 'ps ax | grep 923 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161208 12:55:22.851">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:22.852">${rc} = 0</msg>
<status starttime="20161208 12:55:22.267" endtime="20161208 12:55:22.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status starttime="20161208 12:55:22.852" endtime="20161208 12:55:22.857" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:22.858">Executing command 'kill -s KILL 923'.</msg>
<msg level="INFO" timestamp="20161208 12:55:22.944">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:22.944">${console} = </msg>
<msg level="INFO" timestamp="20161208 12:55:22.945">${stderr} = </msg>
<status starttime="20161208 12:55:22.857" endtime="20161208 12:55:22.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:22.945">Length is 0</msg>
<status starttime="20161208 12:55:22.945" endtime="20161208 12:55:22.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:22.946">Current Client PID:923</msg>
<status starttime="20161208 12:55:22.946" endtime="20161208 12:55:22.946" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:22.947">Executing command 'cat /tmp/obmc-console.log-20161208125139122991_923'.</msg>
<msg level="INFO" timestamp="20161208 12:55:23.076">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 12:55:23.076">${console} = </msg>
<msg level="INFO" timestamp="20161208 12:55:23.076">${stderr} = </msg>
<status starttime="20161208 12:55:22.947" endtime="20161208 12:55:23.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:23.077">Length is 0</msg>
<status starttime="20161208 12:55:23.077" endtime="20161208 12:55:23.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:23.077">${sol_log} = </msg>
<status starttime="20161208 12:55:19.749" endtime="20161208 12:55:23.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:23.078"></msg>
<status starttime="20161208 12:55:23.078" endtime="20161208 12:55:23.078" status="PASS"></status>
</kw>
<status starttime="20161208 12:54:59.525" endtime="20161208 12:55:23.078" status="PASS"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status starttime="20161208 12:51:36.515" endtime="20161208 12:55:23.079" status="FAIL" critical="yes">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status starttime="20161208 12:51:36.490" endtime="20161208 12:55:23.080" status="FAIL"></status>
</suite>
<suite id="s1-s4" name="Test Eventlog" source="/tmp/root/16718/obmc-robot/tests/test_eventlog.robot">
<kw library="connection_client" type="setup" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:23.115">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 12:55:23.114" endtime="20161208 12:55:23.115" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:23.115">${has_host} = False</msg>
<status starttime="20161208 12:55:23.114" endtime="20161208 12:55:23.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 12:55:23.118" endtime="20161208 12:55:23.119" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:23.115" endtime="20161208 12:55:23.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:23.125">${port_num} = 22</msg>
<status starttime="20161208 12:55:23.124" endtime="20161208 12:55:23.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:23.125">${SSH_PORT} = 22</msg>
<status starttime="20161208 12:55:23.125" endtime="20161208 12:55:23.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:23.126">${https_num} = 443</msg>
<status starttime="20161208 12:55:23.126" endtime="20161208 12:55:23.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:23.127">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 12:55:23.127" endtime="20161208 12:55:23.127" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:23.124" endtime="20161208 12:55:23.127" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:23.119" endtime="20161208 12:55:23.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 12:55:23.128">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 12:55:23.128" endtime="20161208 12:55:23.128" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:23.129">${has_port} = False</msg>
<status starttime="20161208 12:55:23.128" endtime="20161208 12:55:23.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 12:55:23.133" endtime="20161208 12:55:23.133" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 12:55:23.134" endtime="20161208 12:55:23.134" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:23.133" endtime="20161208 12:55:23.134" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:23.129" endtime="20161208 12:55:23.134" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:23.135">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 12:55:25.317">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 12:55:23.135" endtime="20161208 12:55:25.317" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:23.114" endtime="20161208 12:55:25.317" status="PASS"></status>
</kw>
<test id="s1-s4-t1" name="clear any logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:25.320">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161208 12:55:25.320" endtime="20161208 12:55:25.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:25.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:25.321" endtime="20161208 12:55:25.321" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:55:25.322" endtime="20161208 12:55:25.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:25.330">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:55:25.329" endtime="20161208 12:55:25.330" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:25.331">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:55:25.331" endtime="20161208 12:55:25.332" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:25.330" endtime="20161208 12:55:25.332" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:25.328" endtime="20161208 12:55:25.332" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:25.322" endtime="20161208 12:55:25.332" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:25.333">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:25.332" endtime="20161208 12:55:25.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:25.334">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:25.334" endtime="20161208 12:55:25.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:25.334">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:25.334" endtime="20161208 12:55:25.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:25.335">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:25.335" endtime="20161208 12:55:25.335" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:25.665">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:25.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:25.335" endtime="20161208 12:55:25.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:25.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:25.665" endtime="20161208 12:55:25.666" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:25.332" endtime="20161208 12:55:25.666" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.085">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:26.085">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:25.666" endtime="20161208 12:55:26.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.093">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:26.092" endtime="20161208 12:55:26.093" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.094">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:26.094" endtime="20161208 12:55:26.095" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.093" endtime="20161208 12:55:26.095" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.091" endtime="20161208 12:55:26.095" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.086" endtime="20161208 12:55:26.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:26.095">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:25.318" endtime="20161208 12:55:26.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:26.096" endtime="20161208 12:55:26.096" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.098">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 12:55:26.098" endtime="20161208 12:55:26.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.104">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:55:26.103" endtime="20161208 12:55:26.104" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.105">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 12:55:26.104" endtime="20161208 12:55:26.105" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.104" endtime="20161208 12:55:26.105" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.103" endtime="20161208 12:55:26.105" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.098" endtime="20161208 12:55:26.105" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.106">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:26.106" endtime="20161208 12:55:26.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:26.107" endtime="20161208 12:55:26.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.108">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:26.108" endtime="20161208 12:55:26.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.109">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:26.108" endtime="20161208 12:55:26.109" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.653">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:26.653">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:26.109" endtime="20161208 12:55:26.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:26.653" endtime="20161208 12:55:26.654" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.105" endtime="20161208 12:55:26.654" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.714">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:55:26.714">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:26.654" endtime="20161208 12:55:26.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.718">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:26.718" endtime="20161208 12:55:26.718" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.719">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:26.719" endtime="20161208 12:55:26.720" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.719" endtime="20161208 12:55:26.720" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.717" endtime="20161208 12:55:26.720" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.715" endtime="20161208 12:55:26.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:26.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:26.097" endtime="20161208 12:55:26.720" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.721">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:55:26.721">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:55:26.721">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:55:26.720" endtime="20161208 12:55:26.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.721">Length is 0</msg>
<status starttime="20161208 12:55:26.721" endtime="20161208 12:55:26.721" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 12:55:26.722" endtime="20161208 12:55:26.727" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:26.728">Directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs"&gt;/tmp/root/16718/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 12:55:26.728" endtime="20161208 12:55:26.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:26.730">File '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 12:55:26.730" endtime="20161208 12:55:26.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:26.730">${exist} = True</msg>
<status starttime="20161208 12:55:26.729" endtime="20161208 12:55:26.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 12:55:26.731" endtime="20161208 12:55:26.734" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.735">${cur_time} = 2016-12-08 12:55:26:735014</msg>
<status starttime="20161208 12:55:26.735" endtime="20161208 12:55:26.735" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.736">${cur_time} = 20161208125526735014</msg>
<status starttime="20161208 12:55:26.735" endtime="20161208 12:55:26.736" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:26.736">${cur_time} = 20161208125526735014</msg>
<status starttime="20161208 12:55:26.734" endtime="20161208 12:55:26.736" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:26.737">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:26.736" endtime="20161208 12:55:26.737" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.727" endtime="20161208 12:55:26.737" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.722" endtime="20161208 12:55:26.737" status="PASS"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status starttime="20161208 12:55:25.317" endtime="20161208 12:55:26.737" status="PASS" critical="yes"></status>
</test>
<test id="s1-s4-t2" name="write a log">
<kw name="create a test log">
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.738">${data} = {u'data': []}</msg>
<status starttime="20161208 12:55:26.738" endtime="20161208 12:55:26.738" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.739">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161208 12:55:26.739" endtime="20161208 12:55:26.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:26.740" endtime="20161208 12:55:26.740" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 12:55:26.740" endtime="20161208 12:55:26.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.750">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:55:26.749" endtime="20161208 12:55:26.750" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.752">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 12:55:26.752" endtime="20161208 12:55:26.753" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.751" endtime="20161208 12:55:26.753" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.747" endtime="20161208 12:55:26.753" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.741" endtime="20161208 12:55:26.753" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:26.755">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:26.754" endtime="20161208 12:55:26.755" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.756">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:26.756" endtime="20161208 12:55:26.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.757">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:26.756" endtime="20161208 12:55:26.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:26.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:26.757" endtime="20161208 12:55:26.758" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.091">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:27.091">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:26.758" endtime="20161208 12:55:27.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:27.092">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:27.091" endtime="20161208 12:55:27.092" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.753" endtime="20161208 12:55:27.092" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.385">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:27.385">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:27.092" endtime="20161208 12:55:27.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.389">${msg} = Response code:200, Content:{
  "data": 230, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:27.389" endtime="20161208 12:55:27.389" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:27.390">Response code:200, Content:{
  "data": 230, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:27.390" endtime="20161208 12:55:27.390" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.389" endtime="20161208 12:55:27.390" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.388" endtime="20161208 12:55:27.390" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.385" endtime="20161208 12:55:27.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:27.390">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:26.739" endtime="20161208 12:55:27.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:27.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:27.391" endtime="20161208 12:55:27.391" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.391">To JSON using : content={
  "data": 230, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:55:27.392">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:55:27.392">${json} = {u'data': 230, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:55:27.391" endtime="20161208 12:55:27.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.392">${LOGID} = 230</msg>
<status starttime="20161208 12:55:27.392" endtime="20161208 12:55:27.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.393">${uri} = /org/openbmc/records/events/230</msg>
<status starttime="20161208 12:55:27.392" endtime="20161208 12:55:27.393" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:26.738" endtime="20161208 12:55:27.393" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 12:55:27.394" endtime="20161208 12:55:27.396" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:27.397">Directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs"&gt;/tmp/root/16718/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 12:55:27.397" endtime="20161208 12:55:27.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:27.398">File '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 12:55:27.398" endtime="20161208 12:55:27.398" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:27.398">${exist} = True</msg>
<status starttime="20161208 12:55:27.397" endtime="20161208 12:55:27.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 12:55:27.398" endtime="20161208 12:55:27.401" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.402">${cur_time} = 2016-12-08 12:55:27:401753</msg>
<status starttime="20161208 12:55:27.402" endtime="20161208 12:55:27.402" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.402">${cur_time} = 20161208125527401753</msg>
<status starttime="20161208 12:55:27.402" endtime="20161208 12:55:27.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:27.403">${cur_time} = 20161208125527401753</msg>
<status starttime="20161208 12:55:27.401" endtime="20161208 12:55:27.403" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:27.403">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:27.403" endtime="20161208 12:55:27.403" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.396" endtime="20161208 12:55:27.404" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.393" endtime="20161208 12:55:27.404" status="PASS"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status starttime="20161208 12:55:26.737" endtime="20161208 12:55:27.404" status="PASS" critical="yes"></status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20161208 12:55:27.405" endtime="20161208 12:55:27.666" status="PASS"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status starttime="20161208 12:55:23.083" endtime="20161208 12:55:27.666" status="PASS"></status>
</suite>
<suite id="s1-s5" name="Test Obmcrest" source="/tmp/root/16718/obmc-robot/tests/test_obmcrest.robot">
<test id="s1-s5-t1" name="Get a Property">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>/org/openbmc/inventory/system/chassis/motherboard/cpu0</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.695">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status starttime="20161208 12:55:27.695" endtime="20161208 12:55:27.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.702">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161208 12:55:27.701" endtime="20161208 12:55:27.702" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:27.703">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161208 12:55:27.703" endtime="20161208 12:55:27.703" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.702" endtime="20161208 12:55:27.703" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.700" endtime="20161208 12:55:27.703" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.696" endtime="20161208 12:55:27.703" status="PASS"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:27.704">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 12:55:27.704" endtime="20161208 12:55:27.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 12:55:27.705" endtime="20161208 12:55:27.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.706">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 12:55:27.705" endtime="20161208 12:55:27.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:27.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 12:55:27.706" endtime="20161208 12:55:27.706" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:29.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 12:55:29.072">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:27.707" endtime="20161208 12:55:29.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:29.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 12:55:29.073" endtime="20161208 12:55:29.074" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:27.703" endtime="20161208 12:55:29.074" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:29.188">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg level="INFO" timestamp="20161208 12:55:29.188">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:29.074" endtime="20161208 12:55:29.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:29.195">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:29.194" endtime="20161208 12:55:29.195" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 12:55:29.196">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 12:55:29.196" endtime="20161208 12:55:29.196" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:29.195" endtime="20161208 12:55:29.197" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:29.194" endtime="20161208 12:55:29.197" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:29.189" endtime="20161208 12:55:29.197" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:29.197">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 12:55:27.694" endtime="20161208 12:55:29.197" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:29.198">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 12:55:29.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 12:55:29.198">${content} = {u'data': 1, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 12:55:29.198" endtime="20161208 12:55:29.198" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:29.199">${resp} = 1</msg>
<status starttime="20161208 12:55:27.693" endtime="20161208 12:55:29.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status starttime="20161208 12:55:29.199" endtime="20161208 12:55:29.200" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 12:55:29.201" endtime="20161208 12:55:29.204" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:29.204">Directory '&lt;a href="file:///tmp/root/16718/obmc-robot/logs"&gt;/tmp/root/16718/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 12:55:29.204" endtime="20161208 12:55:29.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:29.205">File '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 12:55:29.205" endtime="20161208 12:55:29.205" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:29.205">${exist} = True</msg>
<status starttime="20161208 12:55:29.205" endtime="20161208 12:55:29.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 12:55:29.206" endtime="20161208 12:55:29.208" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:29.209">${cur_time} = 2016-12-08 12:55:29:208960</msg>
<status starttime="20161208 12:55:29.209" endtime="20161208 12:55:29.209" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 12:55:29.210">${cur_time} = 20161208125529208960</msg>
<status starttime="20161208 12:55:29.209" endtime="20161208 12:55:29.210" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161208 12:55:29.210">${cur_time} = 20161208125529208960</msg>
<status starttime="20161208 12:55:29.208" endtime="20161208 12:55:29.210" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161208 12:55:29.211">Appended to file '&lt;a href="file:///tmp/root/16718/obmc-robot/logs/test_history.txt"&gt;/tmp/root/16718/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 12:55:29.210" endtime="20161208 12:55:29.211" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:29.204" endtime="20161208 12:55:29.211" status="PASS"></status>
</kw>
<status starttime="20161208 12:55:29.200" endtime="20161208 12:55:29.211" status="PASS"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status starttime="20161208 12:55:27.692" endtime="20161208 12:55:29.211" status="PASS" critical="yes"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status starttime="20161208 12:55:27.669" endtime="20161208 12:55:29.212" status="PASS"></status>
</suite>
<status starttime="20161208 12:51:24.600" endtime="20161208 12:55:29.216" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="6" fail="1">Critical Tests</stat>
<stat pass="6" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="2" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">Get_a_Property</stat>
<stat pass="0" fail="1">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat pass="6" id="s1" name="Tests" fail="1">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="2" id="s1-s2" name="Test Association" fail="0">Tests.Test Association</stat>
<stat pass="0" id="s1-s3" name="Test Basic Poweron" fail="1">Tests.Test Basic Poweron</stat>
<stat pass="2" id="s1-s4" name="Test Eventlog" fail="0">Tests.Test Eventlog</stat>
<stat pass="1" id="s1-s5" name="Test Obmcrest" fail="0">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
