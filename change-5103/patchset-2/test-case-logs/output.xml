<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170705 18:00:07.131">
<suite name="Tests" id="s1" source="/tmp/fspcibld/25540/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:07.761">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:00:07.761" starttime="20170705 18:00:07.760" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:07.761">${has_host} = False</msg>
<status endtime="20170705 18:00:07.761" starttime="20170705 18:00:07.760" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:00:07.762" starttime="20170705 18:00:07.762" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:07.762" starttime="20170705 18:00:07.761" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:07.763">${port_num} = 22</msg>
<status endtime="20170705 18:00:07.763" starttime="20170705 18:00:07.763" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:07.764">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:00:07.764" starttime="20170705 18:00:07.764" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:07.764">${https_num} = 443</msg>
<status endtime="20170705 18:00:07.764" starttime="20170705 18:00:07.764" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:07.765">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:00:07.765" starttime="20170705 18:00:07.765" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:07.765" starttime="20170705 18:00:07.763" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:07.765" starttime="20170705 18:00:07.762" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:07.766">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:00:07.766" starttime="20170705 18:00:07.766" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:07.767">${has_port} = False</msg>
<status endtime="20170705 18:00:07.767" starttime="20170705 18:00:07.766" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:00:07.769" starttime="20170705 18:00:07.768" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:00:07.769" starttime="20170705 18:00:07.769" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:07.769" starttime="20170705 18:00:07.767" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:07.769" starttime="20170705 18:00:07.767" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:07.770">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:00:09.527">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:00:09.527" starttime="20170705 18:00:07.770" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.528" starttime="20170705 18:00:07.759" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:09.529">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170705 18:00:09.607">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:00:09.607">${output} = VERSION_ID="v1.99.7-79-g92a0af4"</msg>
<msg level="INFO" timestamp="20170705 18:00:09.607">${stderr} = </msg>
<status endtime="20170705 18:00:09.607" starttime="20170705 18:00:09.529" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:09.607">Length is 0</msg>
<status endtime="20170705 18:00:09.608" starttime="20170705 18:00:09.607" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:09.608">VERSION_ID="v1.99.7-79-g92a0af4"</msg>
<status endtime="20170705 18:00:09.608" starttime="20170705 18:00:09.608" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.608" starttime="20170705 18:00:09.528" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.608" starttime="20170705 18:00:09.528" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:09.610">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170705 18:00:09.777">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:00:09.777">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg level="INFO" timestamp="20170705 18:00:09.777">${stderr} = </msg>
<status endtime="20170705 18:00:09.778" starttime="20170705 18:00:09.609" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:09.778">Length is 0</msg>
<status endtime="20170705 18:00:09.778" starttime="20170705 18:00:09.778" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:09.778">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status endtime="20170705 18:00:09.778" starttime="20170705 18:00:09.609" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:09.779">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.46
	op-build-v1.17-101-g1c57f18-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-0ffbb55
	linux-4.11.6-openpower1-p57dd16e
	petitboot-v1.4.3-pfac92ff
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-0df81aa
</msg>
<status endtime="20170705 18:00:09.780" starttime="20170705 18:00:09.779" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.780" starttime="20170705 18:00:09.609" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.780" starttime="20170705 18:00:09.609" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:09.782">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:00:09.782" starttime="20170705 18:00:09.782" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:09.783">${has_host} = False</msg>
<status endtime="20170705 18:00:09.783" starttime="20170705 18:00:09.782" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:00:09.784" starttime="20170705 18:00:09.783" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.784" starttime="20170705 18:00:09.783" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:09.785">${port_num} = 22</msg>
<status endtime="20170705 18:00:09.785" starttime="20170705 18:00:09.785" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:09.786">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:00:09.786" starttime="20170705 18:00:09.785" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:09.786">${https_num} = 443</msg>
<status endtime="20170705 18:00:09.786" starttime="20170705 18:00:09.786" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:09.787">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:00:09.787" starttime="20170705 18:00:09.786" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.787" starttime="20170705 18:00:09.784" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.787" starttime="20170705 18:00:09.784" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:09.788">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:00:09.788" starttime="20170705 18:00:09.788" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:09.789">${has_port} = False</msg>
<status endtime="20170705 18:00:09.789" starttime="20170705 18:00:09.788" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:00:09.790" starttime="20170705 18:00:09.790" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:00:09.791" starttime="20170705 18:00:09.790" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.791" starttime="20170705 18:00:09.790" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:09.791" starttime="20170705 18:00:09.789" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:09.791">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:00:11.573">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:00:11.574" starttime="20170705 18:00:09.791" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.574" starttime="20170705 18:00:09.781" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:11.574">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170705 18:00:11.691">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:00:11.691">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170705 18:00:11.691">${stderr} = </msg>
<status endtime="20170705 18:00:11.692" starttime="20170705 18:00:11.574" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:11.692">Length is 0</msg>
<status endtime="20170705 18:00:11.692" starttime="20170705 18:00:11.692" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:11.692">Length is 11</msg>
<status endtime="20170705 18:00:11.693" starttime="20170705 18:00:11.692" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:11.693">${bmc_model} = Witherspoon</msg>
<status endtime="20170705 18:00:11.693" starttime="20170705 18:00:09.781" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:11.693">BMC Model=Witherspoon</msg>
<status endtime="20170705 18:00:11.693" starttime="20170705 18:00:11.693" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.693" starttime="20170705 18:00:09.780" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.693" starttime="20170705 18:00:09.780" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:11.695">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:00:11.696" starttime="20170705 18:00:11.695" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:11.696">${has_host} = False</msg>
<status endtime="20170705 18:00:11.696" starttime="20170705 18:00:11.695" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:00:11.697" starttime="20170705 18:00:11.696" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.697" starttime="20170705 18:00:11.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:11.698">${port_num} = 22</msg>
<status endtime="20170705 18:00:11.698" starttime="20170705 18:00:11.698" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:11.699">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:00:11.699" starttime="20170705 18:00:11.699" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:11.700">${https_num} = 443</msg>
<status endtime="20170705 18:00:11.700" starttime="20170705 18:00:11.699" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:11.700">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:00:11.700" starttime="20170705 18:00:11.700" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.700" starttime="20170705 18:00:11.697" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.701" starttime="20170705 18:00:11.697" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:11.701">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:00:11.701" starttime="20170705 18:00:11.701" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:11.702">${has_port} = False</msg>
<status endtime="20170705 18:00:11.702" starttime="20170705 18:00:11.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:00:11.703" starttime="20170705 18:00:11.703" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:00:11.704" starttime="20170705 18:00:11.703" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.704" starttime="20170705 18:00:11.702" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:11.704" starttime="20170705 18:00:11.702" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:11.704">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:00:13.555">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:00:13.555" starttime="20170705 18:00:11.704" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:13.556" starttime="20170705 18:00:11.694" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:13.557">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170705 18:00:13.633">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:00:13.634">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170705 18:00:13.634">${stderr} = </msg>
<status endtime="20170705 18:00:13.634" starttime="20170705 18:00:13.556" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:13.634">Length is 0</msg>
<status endtime="20170705 18:00:13.634" starttime="20170705 18:00:13.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:13.635">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170705 18:00:13.635" starttime="20170705 18:00:13.556" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170705 18:00:13.635" starttime="20170705 18:00:13.635" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:13.635" starttime="20170705 18:00:11.694" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:13.635" starttime="20170705 18:00:11.694" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170705 18:00:13.636" starttime="20170705 18:00:13.636" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:13.636" starttime="20170705 18:00:07.759" status="PASS"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/fspcibld/25540/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/fspcibld/25540/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:13.724">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:00:13.724" starttime="20170705 18:00:13.723" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:13.725">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:13.725" starttime="20170705 18:00:13.724" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:13.726">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:00:13.726" starttime="20170705 18:00:13.725" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:13.726">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:00:13.726" starttime="20170705 18:00:13.726" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:13.927">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:00:13.927" starttime="20170705 18:00:13.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:13.927">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:00:13.927">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:13.927" starttime="20170705 18:00:13.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:13.928">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:13.928" starttime="20170705 18:00:13.927" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:13.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:13.928" starttime="20170705 18:00:13.928" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:13.929" starttime="20170705 18:00:13.723" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:13.929" starttime="20170705 18:00:13.722" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:13.929" starttime="20170705 18:00:13.722" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:13.934">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:00:13.935" starttime="20170705 18:00:13.934" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:13.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:13.936" starttime="20170705 18:00:13.935" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:13.937">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:00:13.937" starttime="20170705 18:00:13.936" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:13.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:00:13.937" starttime="20170705 18:00:13.937" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.152">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:00:14.152" starttime="20170705 18:00:13.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.152">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:00:14.153">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:14.153" starttime="20170705 18:00:13.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.153">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:14.153" starttime="20170705 18:00:14.153" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:14.154" starttime="20170705 18:00:14.154" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.154" starttime="20170705 18:00:13.933" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.154" starttime="20170705 18:00:13.933" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.154" starttime="20170705 18:00:13.932" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.155">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:00:14.155" starttime="20170705 18:00:14.154" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.157">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:14.157" starttime="20170705 18:00:14.156" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.158">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:14.158" starttime="20170705 18:00:14.158" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.158" starttime="20170705 18:00:14.157" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.158" starttime="20170705 18:00:14.156" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.158" starttime="20170705 18:00:14.155" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.258">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:00:14.258">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:14.258" starttime="20170705 18:00:14.159" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.260">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:14.260" starttime="20170705 18:00:14.259" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.261">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:14.261" starttime="20170705 18:00:14.260" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.261" starttime="20170705 18:00:14.260" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.261" starttime="20170705 18:00:14.259" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.261" starttime="20170705 18:00:14.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.262">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:14.262" starttime="20170705 18:00:13.931" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:14.262" starttime="20170705 18:00:14.262" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.263">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:00:14.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:00:14.263">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:00:14.263" starttime="20170705 18:00:14.262" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.263">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:00:14.263" starttime="20170705 18:00:13.930" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.263">${host_state} = Running</msg>
<status endtime="20170705 18:00:14.264" starttime="20170705 18:00:13.930" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:14.265">Running != Quiesced</msg>
<status endtime="20170705 18:00:14.265" starttime="20170705 18:00:14.264" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.265">${status} = False</msg>
<status endtime="20170705 18:00:14.265" starttime="20170705 18:00:14.264" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.265">${status} = False</msg>
<status endtime="20170705 18:00:14.265" starttime="20170705 18:00:13.930" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170705 18:00:14.266" starttime="20170705 18:00:14.265" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170705 18:00:14.266" starttime="20170705 18:00:14.266" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.275">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170705 18:00:14.275" starttime="20170705 18:00:14.267" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.284">${FFDC_DIR_PATH} = </msg>
<status endtime="20170705 18:00:14.284" starttime="20170705 18:00:14.275" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.287">${cur_time} = 2017-07-05 18:00:14:286452</msg>
<status endtime="20170705 18:00:14.287" starttime="20170705 18:00:14.286" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.288">${cur_time} = 20170705180014286452</msg>
<status endtime="20170705 18:00:14.288" starttime="20170705 18:00:14.287" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.288" starttime="20170705 18:00:14.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.294">${FFDC_TIME} = 20170705180014286452</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.295">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170705 18:00:14.295" starttime="20170705 18:00:14.295" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.296">${suite_name} = 20170705180014286452_TestsSecurityTestSsl</msg>
<status endtime="20170705 18:00:14.296" starttime="20170705 18:00:14.296" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.297">${test_name} = TestSSLConnection</msg>
<status endtime="20170705 18:00:14.297" starttime="20170705 18:00:14.296" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.297">${test_name} = 20170705180014286452_TestSSLConnection</msg>
<status endtime="20170705 18:00:14.297" starttime="20170705 18:00:14.297" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.297" starttime="20170705 18:00:14.295" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.298">${FFDC_DIR_PATH} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180014286452_TestsSecurityTestSsl/20170705180014286452_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170705 18:00:14.302">${FFDC_PREFIX} = 20170705180014286452_</msg>
<status endtime="20170705 18:00:14.302" starttime="20170705 18:00:14.285" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.302" starttime="20170705 18:00:14.284" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170705 18:00:14.303" starttime="20170705 18:00:14.302" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.303" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs"&gt;/tmp/fspcibld/25540/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170705 18:00:14.303" starttime="20170705 18:00:14.303" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:14.304">File '/tmp/fspcibld/25540/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170705 18:00:14.305" starttime="20170705 18:00:14.304" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.305">${exist} = False</msg>
<status endtime="20170705 18:00:14.305" starttime="20170705 18:00:14.304" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.306" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:00:14.306" starttime="20170705 18:00:14.305" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.306" starttime="20170705 18:00:14.305" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170705 18:00:14.307" starttime="20170705 18:00:14.306" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.307">${cur_time} = 2017-07-05 18:00:14:307328</msg>
<status endtime="20170705 18:00:14.308" starttime="20170705 18:00:14.307" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.308">${cur_time} = 20170705180014307328</msg>
<status endtime="20170705 18:00:14.308" starttime="20170705 18:00:14.308" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.308">${cur_time} = 20170705180014307328</msg>
<status endtime="20170705 18:00:14.308" starttime="20170705 18:00:14.307" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.309" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:00:14.309" starttime="20170705 18:00:14.309" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.310" starttime="20170705 18:00:14.266" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.310" starttime="20170705 18:00:13.929" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170705 18:00:14.310" starttime="20170705 18:00:13.721" status="PASS" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170705 18:00:14.311">Delete All Sessions</msg>
<status endtime="20170705 18:00:14.311" starttime="20170705 18:00:14.311" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170705 18:00:14.311" starttime="20170705 18:00:13.640" status="PASS"></status>
</suite>
<status endtime="20170705 18:00:14.313" starttime="20170705 18:00:13.636" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/fspcibld/25540/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.350">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:00:14.350" starttime="20170705 18:00:14.350" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.351">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:00:14.351" starttime="20170705 18:00:14.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.351">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:00:14.351" starttime="20170705 18:00:14.350" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.354">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:00:14.354" starttime="20170705 18:00:14.353" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.354">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:00:14.354" starttime="20170705 18:00:14.354" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.355">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:00:14.355" starttime="20170705 18:00:14.353" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.355">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170705 18:00:14.355" starttime="20170705 18:00:14.355" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:00:14.356" starttime="20170705 18:00:14.356" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.360">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170705 18:00:14.365">${rc} = 0</msg>
<msg level="INFO" timestamp="20170705 18:00:14.365">${output} = /tmp/fspcibld/25540/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170705 18:00:14.365" starttime="20170705 18:00:14.356" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170705 18:00:14.368" starttime="20170705 18:00:14.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170705 18:00:14.369" starttime="20170705 18:00:14.369" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.370">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170705 18:00:14.370" starttime="20170705 18:00:14.369" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.370">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170705 18:00:14.370" starttime="20170705 18:00:14.355" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.371">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170705 18:00:14.371" starttime="20170705 18:00:14.371" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:00:14.372" starttime="20170705 18:00:14.371" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.375">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170705 18:00:14.383">${rc} = 0</msg>
<msg level="INFO" timestamp="20170705 18:00:14.384">${os_con_pid} = </msg>
<status endtime="20170705 18:00:14.384" starttime="20170705 18:00:14.372" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170705 18:00:14.387" starttime="20170705 18:00:14.386" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.387">${cmd_buf} = kill -9 </msg>
<status endtime="20170705 18:00:14.387" starttime="20170705 18:00:14.387" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:00:14.388" starttime="20170705 18:00:14.388" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.389">${rc} = None</msg>
<msg level="INFO" timestamp="20170705 18:00:14.389">${output} = None</msg>
<status endtime="20170705 18:00:14.389" starttime="20170705 18:00:14.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170705 18:00:14.390" starttime="20170705 18:00:14.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:14.392">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170705 18:00:14.392" starttime="20170705 18:00:14.391" status="FAIL"></status>
</kw>
<status endtime="20170705 18:00:14.392" starttime="20170705 18:00:14.391" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.392" starttime="20170705 18:00:14.390" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.393">${output} = </msg>
<status endtime="20170705 18:00:14.393" starttime="20170705 18:00:14.393" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.394">${loc_quiet} = 1</msg>
<status endtime="20170705 18:00:14.394" starttime="20170705 18:00:14.393" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170705 18:00:14.848" starttime="20170705 18:00:14.394" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.849">${rc} = 1</msg>
<msg level="INFO" timestamp="20170705 18:00:14.849">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170705 18:00:14.849" starttime="20170705 18:00:14.394" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.850">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170705 18:00:14.850" starttime="20170705 18:00:14.352" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.852" html="yes">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170705 18:00:14.852" starttime="20170705 18:00:14.851" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.853">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170705 18:00:14.853" starttime="20170705 18:00:14.853" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:00:14.853" starttime="20170705 18:00:14.853" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.857">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170705 18:00:14.859">${rc} = 0</msg>
<msg level="INFO" timestamp="20170705 18:00:14.859">${output} = /tmp/fspcibld/25540/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170705 18:00:14.860" starttime="20170705 18:00:14.854" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170705 18:00:14.863" starttime="20170705 18:00:14.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170705 18:00:14.865" starttime="20170705 18:00:14.864" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.865">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170705 18:00:14.865" starttime="20170705 18:00:14.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:14.866">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170705 18:00:14.866" starttime="20170705 18:00:14.852" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.866">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170705 18:00:14.866" starttime="20170705 18:00:14.866" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:00:14.867" starttime="20170705 18:00:14.867" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.870">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170705 18:00:14.874">${rc} = 0</msg>
<msg level="INFO" timestamp="20170705 18:00:14.874">${output} = </msg>
<status endtime="20170705 18:00:14.874" starttime="20170705 18:00:14.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170705 18:00:14.877" starttime="20170705 18:00:14.876" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:14.877" starttime="20170705 18:00:14.349" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.878">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.880">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170705 18:00:14.880" starttime="20170705 18:00:14.879" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.881">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170705 18:00:14.881" starttime="20170705 18:00:14.881" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:14.885">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:00:14.886" starttime="20170705 18:00:14.885" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.887">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:14.887" starttime="20170705 18:00:14.887" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.888">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:00:14.888" starttime="20170705 18:00:14.888" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:14.889">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:00:14.889" starttime="20170705 18:00:14.889" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:15.360">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:00:15.360" starttime="20170705 18:00:14.890" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:15.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:00:15.360">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:15.360" starttime="20170705 18:00:14.889" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:15.361">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:15.361" starttime="20170705 18:00:15.361" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:15.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:15.362" starttime="20170705 18:00:15.361" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.362" starttime="20170705 18:00:14.884" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.362" starttime="20170705 18:00:14.883" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.362" starttime="20170705 18:00:14.882" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.363">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170705 18:00:15.363" starttime="20170705 18:00:15.362" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:15.364" starttime="20170705 18:00:15.363" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170705 18:00:15.364" starttime="20170705 18:00:15.364" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.366">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170705 18:00:15.366" starttime="20170705 18:00:15.365" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:15.366">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170705 18:00:15.367" starttime="20170705 18:00:15.366" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.367" starttime="20170705 18:00:15.366" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.367" starttime="20170705 18:00:15.364" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.976">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170705 18:00:15.977">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:15.977" starttime="20170705 18:00:15.367" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.980">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:15.980" starttime="20170705 18:00:15.977" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:15.981">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:15.982" starttime="20170705 18:00:15.981" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.982" starttime="20170705 18:00:15.981" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.982" starttime="20170705 18:00:15.977" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:15.982">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:15.982" starttime="20170705 18:00:14.881" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:15.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:15.983" starttime="20170705 18:00:15.982" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.983">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:00:15.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:00:15.983">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170705 18:00:15.983" starttime="20170705 18:00:15.983" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:15.984" starttime="20170705 18:00:14.880" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170705 18:00:15.984" starttime="20170705 18:00:15.984" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:15.988">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:00:15.989" starttime="20170705 18:00:15.988" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.989">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:15.989" starttime="20170705 18:00:15.989" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.990">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:00:15.990" starttime="20170705 18:00:15.990" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:15.991">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:00:15.991" starttime="20170705 18:00:15.990" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:17.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:00:17.433" starttime="20170705 18:00:15.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:17.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:00:17.434">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:17.434" starttime="20170705 18:00:15.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:17.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:17.434" starttime="20170705 18:00:17.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:17.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:17.435" starttime="20170705 18:00:17.435" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:17.435" starttime="20170705 18:00:15.987" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:17.435" starttime="20170705 18:00:15.987" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:17.435" starttime="20170705 18:00:15.987" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:17.436">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:00:17.436" starttime="20170705 18:00:17.436" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:17.438">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:17.438" starttime="20170705 18:00:17.437" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:17.439">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:17.439" starttime="20170705 18:00:17.439" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:17.439" starttime="20170705 18:00:17.438" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:17.439" starttime="20170705 18:00:17.437" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:17.440" starttime="20170705 18:00:17.436" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:20.315">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:00:20.315">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:20.316" starttime="20170705 18:00:17.440" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:20.317">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:20.318" starttime="20170705 18:00:20.317" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:20.318">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:20.319" starttime="20170705 18:00:20.318" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:20.319" starttime="20170705 18:00:20.318" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:20.319" starttime="20170705 18:00:20.316" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:20.319" starttime="20170705 18:00:20.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:20.319">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:20.319" starttime="20170705 18:00:15.986" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:20.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:20.320" starttime="20170705 18:00:20.319" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:20.320">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:00:20.320">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:00:20.320">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:00:20.321" starttime="20170705 18:00:20.320" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:20.321">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:00:20.321" starttime="20170705 18:00:15.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:20.321">${host_state} = Running</msg>
<status endtime="20170705 18:00:20.321" starttime="20170705 18:00:15.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:20.322">Off != Running</msg>
<status endtime="20170705 18:00:20.322" starttime="20170705 18:00:20.321" status="FAIL"></status>
</kw>
<status endtime="20170705 18:00:20.322" starttime="20170705 18:00:15.985" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:30.327">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:00:30.328" starttime="20170705 18:00:30.327" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:30.328" starttime="20170705 18:00:30.328" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.329">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:00:30.329" starttime="20170705 18:00:30.329" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.330">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:00:30.330" starttime="20170705 18:00:30.329" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:30.618">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:00:30.618" starttime="20170705 18:00:30.330" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:30.618">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:00:30.618">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:30.618" starttime="20170705 18:00:30.330" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:30.619">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:30.619" starttime="20170705 18:00:30.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:30.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:30.620" starttime="20170705 18:00:30.619" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.620" starttime="20170705 18:00:30.326" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.620" starttime="20170705 18:00:30.325" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.620" starttime="20170705 18:00:30.325" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.621">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:00:30.621" starttime="20170705 18:00:30.620" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.623">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:30.623" starttime="20170705 18:00:30.622" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:30.624">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:30.624" starttime="20170705 18:00:30.623" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.624" starttime="20170705 18:00:30.623" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.624" starttime="20170705 18:00:30.621" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.624" starttime="20170705 18:00:30.621" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.749">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:00:30.749">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:30.749" starttime="20170705 18:00:30.624" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.751">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:30.751" starttime="20170705 18:00:30.750" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:30.752">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:30.752" starttime="20170705 18:00:30.752" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.753" starttime="20170705 18:00:30.751" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.753" starttime="20170705 18:00:30.750" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:30.753" starttime="20170705 18:00:30.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:30.753">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:30.753" starttime="20170705 18:00:30.324" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:30.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:30.754" starttime="20170705 18:00:30.753" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:30.754">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:00:30.754">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:00:30.754">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:00:30.754" starttime="20170705 18:00:30.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:30.755">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:00:30.755" starttime="20170705 18:00:30.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:30.755">${host_state} = Running</msg>
<status endtime="20170705 18:00:30.755" starttime="20170705 18:00:30.323" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:30.756">Off != Running</msg>
<status endtime="20170705 18:00:30.756" starttime="20170705 18:00:30.755" status="FAIL"></status>
</kw>
<status endtime="20170705 18:00:30.756" starttime="20170705 18:00:30.322" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:40.761">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:00:40.761" starttime="20170705 18:00:40.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:40.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:40.762" starttime="20170705 18:00:40.762" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:40.763">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:00:40.763" starttime="20170705 18:00:40.762" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:40.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:00:40.763" starttime="20170705 18:00:40.763" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:41.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:00:41.311" starttime="20170705 18:00:40.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:41.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:00:41.311">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:41.311" starttime="20170705 18:00:40.764" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:41.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:41.312" starttime="20170705 18:00:41.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:41.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:41.313" starttime="20170705 18:00:41.312" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.313" starttime="20170705 18:00:40.760" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.313" starttime="20170705 18:00:40.760" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.313" starttime="20170705 18:00:40.759" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:41.314">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:00:41.314" starttime="20170705 18:00:41.314" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:41.316">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:41.316" starttime="20170705 18:00:41.316" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:41.317">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:41.317" starttime="20170705 18:00:41.317" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.317" starttime="20170705 18:00:41.316" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.318" starttime="20170705 18:00:41.315" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.318" starttime="20170705 18:00:41.314" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:41.384">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:00:41.384">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:41.384" starttime="20170705 18:00:41.318" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:41.386">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:41.386" starttime="20170705 18:00:41.385" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:41.387">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:41.387" starttime="20170705 18:00:41.387" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.387" starttime="20170705 18:00:41.386" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.387" starttime="20170705 18:00:41.385" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:41.387" starttime="20170705 18:00:41.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:41.387">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:41.387" starttime="20170705 18:00:40.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:41.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:41.388" starttime="20170705 18:00:41.388" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:41.389">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:00:41.389">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:00:41.389">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:00:41.389" starttime="20170705 18:00:41.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:41.389">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:00:41.389" starttime="20170705 18:00:40.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:41.389">${host_state} = Running</msg>
<status endtime="20170705 18:00:41.389" starttime="20170705 18:00:40.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:41.390">Off != Running</msg>
<status endtime="20170705 18:00:41.390" starttime="20170705 18:00:41.390" status="FAIL"></status>
</kw>
<status endtime="20170705 18:00:41.390" starttime="20170705 18:00:40.756" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:51.396">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:00:51.397" starttime="20170705 18:00:51.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.397">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:00:51.397" starttime="20170705 18:00:51.397" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.398">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:00:51.398" starttime="20170705 18:00:51.398" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:00:51.399" starttime="20170705 18:00:51.398" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:51.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:00:51.628" starttime="20170705 18:00:51.399" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:51.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:00:51.628">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:51.628" starttime="20170705 18:00:51.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:51.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:51.629" starttime="20170705 18:00:51.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:51.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:51.630" starttime="20170705 18:00:51.629" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.630" starttime="20170705 18:00:51.395" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.630" starttime="20170705 18:00:51.395" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.630" starttime="20170705 18:00:51.394" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.631">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:00:51.631" starttime="20170705 18:00:51.630" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.633">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:51.633" starttime="20170705 18:00:51.632" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:51.634">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:00:51.634" starttime="20170705 18:00:51.634" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.634" starttime="20170705 18:00:51.633" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.634" starttime="20170705 18:00:51.631" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.634" starttime="20170705 18:00:51.631" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.700">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:00:51.700">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:51.700" starttime="20170705 18:00:51.634" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.702">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:51.702" starttime="20170705 18:00:51.701" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:51.703">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:00:51.703" starttime="20170705 18:00:51.702" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.703" starttime="20170705 18:00:51.702" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.703" starttime="20170705 18:00:51.701" status="PASS"></status>
</kw>
<status endtime="20170705 18:00:51.703" starttime="20170705 18:00:51.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:51.704">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:00:51.704" starttime="20170705 18:00:51.393" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:00:51.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:00:51.704" starttime="20170705 18:00:51.704" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:00:51.705">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:00:51.705">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:00:51.705">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:00:51.705" starttime="20170705 18:00:51.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:51.705">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:00:51.705" starttime="20170705 18:00:51.393" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:00:51.706">${host_state} = Running</msg>
<status endtime="20170705 18:00:51.706" starttime="20170705 18:00:51.393" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:00:51.706">Off != Running</msg>
<status endtime="20170705 18:00:51.706" starttime="20170705 18:00:51.706" status="FAIL"></status>
</kw>
<status endtime="20170705 18:00:51.706" starttime="20170705 18:00:51.391" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:01.711">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:01:01.711" starttime="20170705 18:01:01.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:01.712">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:01:01.712" starttime="20170705 18:01:01.711" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:01.712">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:01:01.712" starttime="20170705 18:01:01.712" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:01.713">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:01:01.713" starttime="20170705 18:01:01.713" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:01.938">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:01:01.938" starttime="20170705 18:01:01.714" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:01.938">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:01:01.938">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:01.938" starttime="20170705 18:01:01.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:01.939">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:01.939" starttime="20170705 18:01:01.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:01.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:01.940" starttime="20170705 18:01:01.939" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:01.940" starttime="20170705 18:01:01.710" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:01.940" starttime="20170705 18:01:01.710" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:01.940" starttime="20170705 18:01:01.709" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:01.941">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:01:01.941" starttime="20170705 18:01:01.940" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:01.943">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:01.943" starttime="20170705 18:01:01.942" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:01.944">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:01.944" starttime="20170705 18:01:01.943" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:01.944" starttime="20170705 18:01:01.943" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:01.944" starttime="20170705 18:01:01.941" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:01.944" starttime="20170705 18:01:01.941" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:02.015">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:01:02.015">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:02.015" starttime="20170705 18:01:01.944" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:02.017">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:02.017" starttime="20170705 18:01:02.016" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:02.018">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:02.018" starttime="20170705 18:01:02.017" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:02.018" starttime="20170705 18:01:02.017" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:02.018" starttime="20170705 18:01:02.016" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:02.018" starttime="20170705 18:01:02.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:02.018">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:02.018" starttime="20170705 18:01:01.708" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:02.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:02.019" starttime="20170705 18:01:02.019" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:02.020">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:01:02.020">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:01:02.020">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:01:02.020" starttime="20170705 18:01:02.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:02.020">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:01:02.020" starttime="20170705 18:01:01.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:02.020">${host_state} = Running</msg>
<status endtime="20170705 18:01:02.020" starttime="20170705 18:01:01.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:01:02.021">Off != Running</msg>
<status endtime="20170705 18:01:02.021" starttime="20170705 18:01:02.021" status="FAIL"></status>
</kw>
<status endtime="20170705 18:01:02.021" starttime="20170705 18:01:01.707" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:12.026">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:01:12.027" starttime="20170705 18:01:12.026" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:01:12.027" starttime="20170705 18:01:12.027" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.028">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:01:12.028" starttime="20170705 18:01:12.027" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:01:12.029" starttime="20170705 18:01:12.028" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:12.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:01:12.325" starttime="20170705 18:01:12.029" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:12.325">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:01:12.325">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:12.325" starttime="20170705 18:01:12.029" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:12.326">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:12.326" starttime="20170705 18:01:12.325" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:12.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:12.327" starttime="20170705 18:01:12.326" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.327" starttime="20170705 18:01:12.025" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.327" starttime="20170705 18:01:12.024" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.327" starttime="20170705 18:01:12.024" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.327">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:01:12.327" starttime="20170705 18:01:12.327" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.330">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:12.330" starttime="20170705 18:01:12.329" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:12.330">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:12.331" starttime="20170705 18:01:12.330" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.331" starttime="20170705 18:01:12.330" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.331" starttime="20170705 18:01:12.328" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.331" starttime="20170705 18:01:12.328" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.397">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:01:12.397">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:12.397" starttime="20170705 18:01:12.331" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.399">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:12.399" starttime="20170705 18:01:12.398" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:12.400">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:12.400" starttime="20170705 18:01:12.399" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.400" starttime="20170705 18:01:12.399" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.400" starttime="20170705 18:01:12.398" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:12.400" starttime="20170705 18:01:12.397" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:12.401">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:12.401" starttime="20170705 18:01:12.023" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:12.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:12.401" starttime="20170705 18:01:12.401" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:12.402">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:01:12.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:01:12.402">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:01:12.402" starttime="20170705 18:01:12.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:12.402">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:01:12.402" starttime="20170705 18:01:12.023" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:12.403">${host_state} = Running</msg>
<status endtime="20170705 18:01:12.403" starttime="20170705 18:01:12.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:01:12.403">Off != Running</msg>
<status endtime="20170705 18:01:12.403" starttime="20170705 18:01:12.403" status="FAIL"></status>
</kw>
<status endtime="20170705 18:01:12.403" starttime="20170705 18:01:12.022" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:22.408">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:01:22.408" starttime="20170705 18:01:22.408" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.409">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:01:22.409" starttime="20170705 18:01:22.409" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.410">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:01:22.410" starttime="20170705 18:01:22.409" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.410">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:01:22.410" starttime="20170705 18:01:22.410" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:22.697">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:01:22.697" starttime="20170705 18:01:22.411" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:22.697">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:01:22.697">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:22.697" starttime="20170705 18:01:22.410" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:22.698">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:22.698" starttime="20170705 18:01:22.697" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:22.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:22.699" starttime="20170705 18:01:22.698" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.699" starttime="20170705 18:01:22.407" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.699" starttime="20170705 18:01:22.407" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.699" starttime="20170705 18:01:22.406" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.700">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:01:22.700" starttime="20170705 18:01:22.699" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.702">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:22.702" starttime="20170705 18:01:22.701" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:22.703">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:22.703" starttime="20170705 18:01:22.702" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.703" starttime="20170705 18:01:22.702" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.703" starttime="20170705 18:01:22.700" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.703" starttime="20170705 18:01:22.700" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.770">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:01:22.770">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:22.770" starttime="20170705 18:01:22.703" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.771">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:22.771" starttime="20170705 18:01:22.771" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:22.772">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:22.772" starttime="20170705 18:01:22.772" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.773" starttime="20170705 18:01:22.772" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.773" starttime="20170705 18:01:22.770" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:22.773" starttime="20170705 18:01:22.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:22.773">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:22.773" starttime="20170705 18:01:22.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:22.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:22.774" starttime="20170705 18:01:22.773" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:22.774">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:01:22.774">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:01:22.774">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:01:22.775" starttime="20170705 18:01:22.774" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:22.775">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:01:22.775" starttime="20170705 18:01:22.405" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:22.775">${host_state} = Running</msg>
<status endtime="20170705 18:01:22.775" starttime="20170705 18:01:22.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:01:22.776">Off != Running</msg>
<status endtime="20170705 18:01:22.776" starttime="20170705 18:01:22.775" status="FAIL"></status>
</kw>
<status endtime="20170705 18:01:22.776" starttime="20170705 18:01:22.404" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:32.781">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:01:32.782" starttime="20170705 18:01:32.781" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:32.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:01:32.782" starttime="20170705 18:01:32.782" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:32.783">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:01:32.783" starttime="20170705 18:01:32.783" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:32.784">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:01:32.784" starttime="20170705 18:01:32.783" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:33.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:01:33.072" starttime="20170705 18:01:32.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:33.072">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:01:33.072">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:33.072" starttime="20170705 18:01:32.784" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:33.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:33.073" starttime="20170705 18:01:33.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:33.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:33.074" starttime="20170705 18:01:33.073" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.074" starttime="20170705 18:01:32.780" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.074" starttime="20170705 18:01:32.780" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.074" starttime="20170705 18:01:32.779" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:33.074">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:01:33.074" starttime="20170705 18:01:33.074" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:33.076">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:33.077" starttime="20170705 18:01:33.076" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:33.077">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:33.077" starttime="20170705 18:01:33.077" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.078" starttime="20170705 18:01:33.077" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.078" starttime="20170705 18:01:33.075" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.078" starttime="20170705 18:01:33.075" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:33.146">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:01:33.146">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:33.146" starttime="20170705 18:01:33.078" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:33.148">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:33.148" starttime="20170705 18:01:33.147" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:33.150">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:33.151" starttime="20170705 18:01:33.148" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.151" starttime="20170705 18:01:33.148" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.151" starttime="20170705 18:01:33.147" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:33.151" starttime="20170705 18:01:33.146" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:33.151">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:33.151" starttime="20170705 18:01:32.778" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:33.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:33.152" starttime="20170705 18:01:33.151" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:33.152">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:01:33.152">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:01:33.152">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:01:33.153" starttime="20170705 18:01:33.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:33.153">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:01:33.153" starttime="20170705 18:01:32.778" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:33.153">${host_state} = Running</msg>
<status endtime="20170705 18:01:33.153" starttime="20170705 18:01:32.777" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:01:33.154">Off != Running</msg>
<status endtime="20170705 18:01:33.154" starttime="20170705 18:01:33.153" status="FAIL"></status>
</kw>
<status endtime="20170705 18:01:33.154" starttime="20170705 18:01:32.776" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:43.158">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:01:43.159" starttime="20170705 18:01:43.158" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.159">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:01:43.160" starttime="20170705 18:01:43.159" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.160">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:01:43.160" starttime="20170705 18:01:43.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:01:43.161" starttime="20170705 18:01:43.160" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:43.499">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:01:43.499" starttime="20170705 18:01:43.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:43.499">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:01:43.499">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:43.499" starttime="20170705 18:01:43.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:43.500">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:43.500" starttime="20170705 18:01:43.500" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:43.501">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:43.501" starttime="20170705 18:01:43.500" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.501" starttime="20170705 18:01:43.158" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.501" starttime="20170705 18:01:43.157" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.501" starttime="20170705 18:01:43.157" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.502">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:01:43.502" starttime="20170705 18:01:43.501" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.504">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:43.504" starttime="20170705 18:01:43.503" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:43.505">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:43.505" starttime="20170705 18:01:43.505" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.505" starttime="20170705 18:01:43.504" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.505" starttime="20170705 18:01:43.502" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.505" starttime="20170705 18:01:43.502" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.571">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:01:43.571">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:43.571" starttime="20170705 18:01:43.506" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.573">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:43.573" starttime="20170705 18:01:43.573" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:43.574">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:43.574" starttime="20170705 18:01:43.574" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.574" starttime="20170705 18:01:43.573" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.574" starttime="20170705 18:01:43.572" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:43.575" starttime="20170705 18:01:43.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:43.575">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:43.575" starttime="20170705 18:01:43.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:43.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:43.575" starttime="20170705 18:01:43.575" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:43.576">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:01:43.576">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:01:43.576">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:01:43.576" starttime="20170705 18:01:43.576" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:43.576">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:01:43.576" starttime="20170705 18:01:43.155" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:43.577">${host_state} = Running</msg>
<status endtime="20170705 18:01:43.577" starttime="20170705 18:01:43.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:01:43.577">Off != Running</msg>
<status endtime="20170705 18:01:43.577" starttime="20170705 18:01:43.577" status="FAIL"></status>
</kw>
<status endtime="20170705 18:01:43.578" starttime="20170705 18:01:43.154" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:53.582">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:01:53.583" starttime="20170705 18:01:53.582" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.584">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:01:53.584" starttime="20170705 18:01:53.583" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.584">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:01:53.584" starttime="20170705 18:01:53.584" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:01:53.585" starttime="20170705 18:01:53.585" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:53.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:01:53.874" starttime="20170705 18:01:53.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:53.874">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:01:53.874">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:53.875" starttime="20170705 18:01:53.585" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:53.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:53.875" starttime="20170705 18:01:53.875" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:53.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:53.876" starttime="20170705 18:01:53.875" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.876" starttime="20170705 18:01:53.582" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.876" starttime="20170705 18:01:53.581" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.876" starttime="20170705 18:01:53.581" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.877">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:01:53.877" starttime="20170705 18:01:53.876" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.879">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:53.879" starttime="20170705 18:01:53.878" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:53.880">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:01:53.880" starttime="20170705 18:01:53.880" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.880" starttime="20170705 18:01:53.879" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.880" starttime="20170705 18:01:53.878" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.880" starttime="20170705 18:01:53.877" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.956">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:01:53.956">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:53.956" starttime="20170705 18:01:53.880" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.958">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:53.958" starttime="20170705 18:01:53.957" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:53.959">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:01:53.959" starttime="20170705 18:01:53.959" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.959" starttime="20170705 18:01:53.958" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.959" starttime="20170705 18:01:53.957" status="PASS"></status>
</kw>
<status endtime="20170705 18:01:53.959" starttime="20170705 18:01:53.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:53.959">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:01:53.960" starttime="20170705 18:01:53.580" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:01:53.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:01:53.960" starttime="20170705 18:01:53.960" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:01:53.961">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:01:53.961">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:01:53.961">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:01:53.961" starttime="20170705 18:01:53.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:53.961">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:01:53.961" starttime="20170705 18:01:53.579" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:01:53.961">${host_state} = Running</msg>
<status endtime="20170705 18:01:53.962" starttime="20170705 18:01:53.579" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:01:53.962">Off != Running</msg>
<status endtime="20170705 18:01:53.962" starttime="20170705 18:01:53.962" status="FAIL"></status>
</kw>
<status endtime="20170705 18:01:53.962" starttime="20170705 18:01:53.578" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:03.967">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:02:03.968" starttime="20170705 18:02:03.967" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:03.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:02:03.968" starttime="20170705 18:02:03.968" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:03.969">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:02:03.969" starttime="20170705 18:02:03.969" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:03.970">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:02:03.970" starttime="20170705 18:02:03.969" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:04.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:02:04.256" starttime="20170705 18:02:03.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:04.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:02:04.256">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:04.256" starttime="20170705 18:02:03.970" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:04.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:04.257" starttime="20170705 18:02:04.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:04.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:04.258" starttime="20170705 18:02:04.257" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.258" starttime="20170705 18:02:03.966" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.258" starttime="20170705 18:02:03.966" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.258" starttime="20170705 18:02:03.965" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:04.259">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:02:04.259" starttime="20170705 18:02:04.258" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:04.261">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:04.261" starttime="20170705 18:02:04.260" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:04.262">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:04.262" starttime="20170705 18:02:04.261" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.262" starttime="20170705 18:02:04.261" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.262" starttime="20170705 18:02:04.259" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.262" starttime="20170705 18:02:04.259" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:04.329">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:02:04.329">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:04.329" starttime="20170705 18:02:04.263" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:04.331">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:04.331" starttime="20170705 18:02:04.330" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:04.332">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:04.332" starttime="20170705 18:02:04.332" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.332" starttime="20170705 18:02:04.331" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.332" starttime="20170705 18:02:04.330" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:04.332" starttime="20170705 18:02:04.329" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:04.332">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:04.332" starttime="20170705 18:02:03.965" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:04.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:04.333" starttime="20170705 18:02:04.333" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:04.334">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:02:04.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:02:04.334">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:02:04.334" starttime="20170705 18:02:04.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:04.334">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:02:04.334" starttime="20170705 18:02:03.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:04.334">${host_state} = Running</msg>
<status endtime="20170705 18:02:04.334" starttime="20170705 18:02:03.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:02:04.335">Off != Running</msg>
<status endtime="20170705 18:02:04.335" starttime="20170705 18:02:04.335" status="FAIL"></status>
</kw>
<status endtime="20170705 18:02:04.335" starttime="20170705 18:02:03.963" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:14.340">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:02:14.340" starttime="20170705 18:02:14.339" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.341">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:02:14.341" starttime="20170705 18:02:14.340" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.341">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:02:14.341" starttime="20170705 18:02:14.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:02:14.342" starttime="20170705 18:02:14.342" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:14.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:02:14.585" starttime="20170705 18:02:14.343" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:14.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:02:14.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:14.585" starttime="20170705 18:02:14.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:14.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:14.586" starttime="20170705 18:02:14.585" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:14.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:14.586" starttime="20170705 18:02:14.586" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.586" starttime="20170705 18:02:14.339" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.587" starttime="20170705 18:02:14.338" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.587" starttime="20170705 18:02:14.338" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.587">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:02:14.587" starttime="20170705 18:02:14.587" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.591">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:14.591" starttime="20170705 18:02:14.590" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:14.591">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:14.592" starttime="20170705 18:02:14.591" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.592" starttime="20170705 18:02:14.591" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.592" starttime="20170705 18:02:14.589" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.592" starttime="20170705 18:02:14.587" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.724">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:02:14.725">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:14.725" starttime="20170705 18:02:14.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.726">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:14.726" starttime="20170705 18:02:14.726" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:14.727">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:14.727" starttime="20170705 18:02:14.727" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.727" starttime="20170705 18:02:14.727" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.728" starttime="20170705 18:02:14.725" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:14.728" starttime="20170705 18:02:14.725" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:14.728">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:14.728" starttime="20170705 18:02:14.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:14.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:14.729" starttime="20170705 18:02:14.728" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:14.729">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:02:14.729">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:02:14.729">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:02:14.729" starttime="20170705 18:02:14.729" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:14.730">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:02:14.730" starttime="20170705 18:02:14.337" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:14.730">${host_state} = Running</msg>
<status endtime="20170705 18:02:14.730" starttime="20170705 18:02:14.336" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:02:14.731">Off != Running</msg>
<status endtime="20170705 18:02:14.731" starttime="20170705 18:02:14.730" status="FAIL"></status>
</kw>
<status endtime="20170705 18:02:14.731" starttime="20170705 18:02:14.336" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:24.736">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:02:24.736" starttime="20170705 18:02:24.735" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:24.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:02:24.737" starttime="20170705 18:02:24.736" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:24.737">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:02:24.737" starttime="20170705 18:02:24.737" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:24.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:02:24.738" starttime="20170705 18:02:24.737" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:24.946">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:02:24.946" starttime="20170705 18:02:24.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:24.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:02:24.946">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:24.947" starttime="20170705 18:02:24.738" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:24.947">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:24.947" starttime="20170705 18:02:24.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:24.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:24.948" starttime="20170705 18:02:24.947" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:24.948" starttime="20170705 18:02:24.734" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:24.948" starttime="20170705 18:02:24.734" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:24.948" starttime="20170705 18:02:24.733" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:24.949">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:02:24.949" starttime="20170705 18:02:24.948" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:24.951">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:24.951" starttime="20170705 18:02:24.950" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:24.952">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:24.952" starttime="20170705 18:02:24.951" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:24.952" starttime="20170705 18:02:24.951" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:24.952" starttime="20170705 18:02:24.950" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:24.952" starttime="20170705 18:02:24.949" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:25.118">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:02:25.118">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:25.118" starttime="20170705 18:02:24.952" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:25.120">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:25.120" starttime="20170705 18:02:25.120" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:25.121">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:25.122" starttime="20170705 18:02:25.121" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:25.122" starttime="20170705 18:02:25.120" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:25.122" starttime="20170705 18:02:25.119" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:25.122" starttime="20170705 18:02:25.119" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:25.122">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:25.122" starttime="20170705 18:02:24.733" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:25.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:25.123" starttime="20170705 18:02:25.122" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:25.123">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:02:25.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:02:25.123">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:02:25.123" starttime="20170705 18:02:25.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:25.124">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:02:25.124" starttime="20170705 18:02:24.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:25.124">${host_state} = Running</msg>
<status endtime="20170705 18:02:25.124" starttime="20170705 18:02:24.732" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:02:25.125">Off != Running</msg>
<status endtime="20170705 18:02:25.125" starttime="20170705 18:02:25.124" status="FAIL"></status>
</kw>
<status endtime="20170705 18:02:25.125" starttime="20170705 18:02:24.731" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:35.130">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:02:35.130" starttime="20170705 18:02:35.129" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.131">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:02:35.131" starttime="20170705 18:02:35.130" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.131">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:02:35.131" starttime="20170705 18:02:35.131" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:02:35.132" starttime="20170705 18:02:35.131" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:35.345">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:02:35.345" starttime="20170705 18:02:35.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:35.345">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:02:35.345">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:35.345" starttime="20170705 18:02:35.132" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:35.346">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:35.346" starttime="20170705 18:02:35.345" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:35.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:35.346" starttime="20170705 18:02:35.346" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.347" starttime="20170705 18:02:35.129" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.347" starttime="20170705 18:02:35.128" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.347" starttime="20170705 18:02:35.128" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.347">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:02:35.347" starttime="20170705 18:02:35.347" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.350">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:35.350" starttime="20170705 18:02:35.349" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:35.351">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:35.351" starttime="20170705 18:02:35.350" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.351" starttime="20170705 18:02:35.350" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.351" starttime="20170705 18:02:35.348" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.351" starttime="20170705 18:02:35.348" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:02:35.443">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:35.443" starttime="20170705 18:02:35.351" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:35.444" starttime="20170705 18:02:35.444" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:35.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:35.445" starttime="20170705 18:02:35.445" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.445" starttime="20170705 18:02:35.444" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.446" starttime="20170705 18:02:35.443" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:35.446" starttime="20170705 18:02:35.443" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:35.446">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:35.446" starttime="20170705 18:02:35.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:35.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:35.446" starttime="20170705 18:02:35.446" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:35.447">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:02:35.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:02:35.447">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:02:35.447" starttime="20170705 18:02:35.447" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:35.447">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:02:35.447" starttime="20170705 18:02:35.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:35.448">${host_state} = Running</msg>
<status endtime="20170705 18:02:35.448" starttime="20170705 18:02:35.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:02:35.448">Off != Running</msg>
<status endtime="20170705 18:02:35.448" starttime="20170705 18:02:35.448" status="FAIL"></status>
</kw>
<status endtime="20170705 18:02:35.449" starttime="20170705 18:02:35.125" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:45.454">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:02:45.454" starttime="20170705 18:02:45.453" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:02:45.455" starttime="20170705 18:02:45.455" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.456">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:02:45.456" starttime="20170705 18:02:45.455" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:02:45.456" starttime="20170705 18:02:45.456" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:45.636">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:02:45.637" starttime="20170705 18:02:45.457" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:45.637">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:02:45.637">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:45.637" starttime="20170705 18:02:45.456" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:45.637">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:45.638" starttime="20170705 18:02:45.637" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:45.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:45.638" starttime="20170705 18:02:45.638" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.638" starttime="20170705 18:02:45.453" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.638" starttime="20170705 18:02:45.452" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.639" starttime="20170705 18:02:45.452" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.639">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:02:45.639" starttime="20170705 18:02:45.639" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.641">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:45.641" starttime="20170705 18:02:45.641" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:45.642">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:45.642" starttime="20170705 18:02:45.642" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.642" starttime="20170705 18:02:45.641" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.643" starttime="20170705 18:02:45.640" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.643" starttime="20170705 18:02:45.639" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.718">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:02:45.718">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:45.718" starttime="20170705 18:02:45.643" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.720">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:45.720" starttime="20170705 18:02:45.720" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:45.721">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:45.721" starttime="20170705 18:02:45.721" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.721" starttime="20170705 18:02:45.720" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.721" starttime="20170705 18:02:45.719" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:45.721" starttime="20170705 18:02:45.719" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:45.722">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:45.722" starttime="20170705 18:02:45.451" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:45.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:45.722" starttime="20170705 18:02:45.722" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:45.723">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:02:45.723">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:02:45.723">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:02:45.723" starttime="20170705 18:02:45.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:45.723">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:02:45.723" starttime="20170705 18:02:45.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:45.724">${host_state} = Running</msg>
<status endtime="20170705 18:02:45.724" starttime="20170705 18:02:45.450" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:02:45.724">Off != Running</msg>
<status endtime="20170705 18:02:45.724" starttime="20170705 18:02:45.724" status="FAIL"></status>
</kw>
<status endtime="20170705 18:02:45.725" starttime="20170705 18:02:45.449" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:55.730">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:02:55.730" starttime="20170705 18:02:55.729" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:02:55.731" starttime="20170705 18:02:55.730" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.731">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:02:55.731" starttime="20170705 18:02:55.731" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.732">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:02:55.732" starttime="20170705 18:02:55.731" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:55.912">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:02:55.912" starttime="20170705 18:02:55.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:55.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:02:55.913">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:55.913" starttime="20170705 18:02:55.732" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:55.913">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:55.913" starttime="20170705 18:02:55.913" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:55.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:55.914" starttime="20170705 18:02:55.914" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.914" starttime="20170705 18:02:55.729" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.914" starttime="20170705 18:02:55.728" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.914" starttime="20170705 18:02:55.728" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.915">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:02:55.915" starttime="20170705 18:02:55.915" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.917">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:55.917" starttime="20170705 18:02:55.916" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:55.918">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:02:55.918" starttime="20170705 18:02:55.918" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.918" starttime="20170705 18:02:55.917" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.918" starttime="20170705 18:02:55.916" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.918" starttime="20170705 18:02:55.915" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.993">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:02:55.993">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:55.993" starttime="20170705 18:02:55.919" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.995">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:55.995" starttime="20170705 18:02:55.994" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:55.996">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:02:55.996" starttime="20170705 18:02:55.995" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.996" starttime="20170705 18:02:55.995" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.996" starttime="20170705 18:02:55.994" status="PASS"></status>
</kw>
<status endtime="20170705 18:02:55.996" starttime="20170705 18:02:55.993" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:55.996">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:02:55.996" starttime="20170705 18:02:55.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:02:55.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:02:55.997" starttime="20170705 18:02:55.996" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:02:55.997">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:02:55.998">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:02:55.998">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:02:55.998" starttime="20170705 18:02:55.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:55.998">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:02:55.998" starttime="20170705 18:02:55.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:02:55.998">${host_state} = Running</msg>
<status endtime="20170705 18:02:55.998" starttime="20170705 18:02:55.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:02:55.999">Off != Running</msg>
<status endtime="20170705 18:02:55.999" starttime="20170705 18:02:55.999" status="FAIL"></status>
</kw>
<status endtime="20170705 18:02:55.999" starttime="20170705 18:02:55.725" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:06.004">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:06.005" starttime="20170705 18:03:06.004" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:06.005" starttime="20170705 18:03:06.005" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.006">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:06.006" starttime="20170705 18:03:06.006" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.007">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:06.007" starttime="20170705 18:03:06.006" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:06.191">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:06.191" starttime="20170705 18:03:06.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:06.191">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:06.191">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:06.191" starttime="20170705 18:03:06.007" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:06.192">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:06.192" starttime="20170705 18:03:06.192" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:06.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:06.193" starttime="20170705 18:03:06.192" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.193" starttime="20170705 18:03:06.003" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.193" starttime="20170705 18:03:06.003" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.193" starttime="20170705 18:03:06.002" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.194">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:03:06.194" starttime="20170705 18:03:06.193" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.196">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:03:06.196" starttime="20170705 18:03:06.195" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:06.197">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:03:06.197" starttime="20170705 18:03:06.196" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.197" starttime="20170705 18:03:06.196" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.197" starttime="20170705 18:03:06.194" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.197" starttime="20170705 18:03:06.194" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.263">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:06.263">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:06.263" starttime="20170705 18:03:06.197" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.264">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:03:06.265" starttime="20170705 18:03:06.264" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:06.265">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:03:06.265" starttime="20170705 18:03:06.265" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.266" starttime="20170705 18:03:06.265" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.266" starttime="20170705 18:03:06.264" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:06.266" starttime="20170705 18:03:06.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:06.266">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:06.266" starttime="20170705 18:03:06.001" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:06.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:06.267" starttime="20170705 18:03:06.266" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:06.267">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:03:06.267">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:03:06.267">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:03:06.267" starttime="20170705 18:03:06.267" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:06.268">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:03:06.268" starttime="20170705 18:03:06.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:06.268">${host_state} = Running</msg>
<status endtime="20170705 18:03:06.268" starttime="20170705 18:03:06.000" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:06.269">Off != Running</msg>
<status endtime="20170705 18:03:06.269" starttime="20170705 18:03:06.268" status="FAIL"></status>
</kw>
<status endtime="20170705 18:03:06.269" starttime="20170705 18:03:06.000" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.275">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:16.275" starttime="20170705 18:03:16.274" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.276">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:16.276" starttime="20170705 18:03:16.276" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.277">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:16.277" starttime="20170705 18:03:16.276" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.278">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:16.278" starttime="20170705 18:03:16.277" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.458">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:16.458" starttime="20170705 18:03:16.279" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.459">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:16.459">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:16.459" starttime="20170705 18:03:16.278" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.459">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:16.459" starttime="20170705 18:03:16.459" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:16.460" starttime="20170705 18:03:16.460" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.460" starttime="20170705 18:03:16.273" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.460" starttime="20170705 18:03:16.272" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.460" starttime="20170705 18:03:16.272" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.461">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:03:16.461" starttime="20170705 18:03:16.461" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.463">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:03:16.463" starttime="20170705 18:03:16.462" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.464">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:03:16.464" starttime="20170705 18:03:16.464" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.464" starttime="20170705 18:03:16.463" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.464" starttime="20170705 18:03:16.462" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.464" starttime="20170705 18:03:16.461" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.531">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:16.531">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:16.531" starttime="20170705 18:03:16.465" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.533">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:03:16.533" starttime="20170705 18:03:16.532" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.534">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:03:16.534" starttime="20170705 18:03:16.534" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.534" starttime="20170705 18:03:16.533" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.534" starttime="20170705 18:03:16.532" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.535" starttime="20170705 18:03:16.532" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.535">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:16.535" starttime="20170705 18:03:16.271" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:16.536" starttime="20170705 18:03:16.535" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.536">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:03:16.537">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:03:16.537">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:03:16.537" starttime="20170705 18:03:16.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.537">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:03:16.537" starttime="20170705 18:03:16.270" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.538">${host_state} = Running</msg>
<status endtime="20170705 18:03:16.538" starttime="20170705 18:03:16.270" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:16.538">Off != Running</msg>
<status endtime="20170705 18:03:16.539" starttime="20170705 18:03:16.538" status="FAIL"></status>
</kw>
<status endtime="20170705 18:03:16.539" starttime="20170705 18:03:16.269" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170705 18:03:16.539">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status endtime="20170705 18:03:16.539" starttime="20170705 18:00:15.984" status="FAIL"></status>
</kw>
<status endtime="20170705 18:03:16.539" starttime="20170705 18:00:14.879" status="FAIL"></status>
</kw>
<status endtime="20170705 18:03:16.540" starttime="20170705 18:00:14.878" status="FAIL"></status>
</kw>
<status endtime="20170705 18:03:16.540" starttime="20170705 18:00:14.877" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.547">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:16.547" starttime="20170705 18:03:16.546" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.548">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:16.548" starttime="20170705 18:03:16.547" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.548">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:16.548" starttime="20170705 18:03:16.548" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.549">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:16.549" starttime="20170705 18:03:16.549" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.765">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:16.765" starttime="20170705 18:03:16.550" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.765">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:16.765">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:16.765" starttime="20170705 18:03:16.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.766">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:16.766" starttime="20170705 18:03:16.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:16.766" starttime="20170705 18:03:16.766" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.766" starttime="20170705 18:03:16.546" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.767" starttime="20170705 18:03:16.545" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.767" starttime="20170705 18:03:16.544" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.767">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170705 18:03:16.767" starttime="20170705 18:03:16.767" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.769">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:03:16.769" starttime="20170705 18:03:16.769" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.770">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170705 18:03:16.770" starttime="20170705 18:03:16.770" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.770" starttime="20170705 18:03:16.770" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.771" starttime="20170705 18:03:16.768" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.771" starttime="20170705 18:03:16.767" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.837">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:16.837">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:16.837" starttime="20170705 18:03:16.771" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.838">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:03:16.838" starttime="20170705 18:03:16.838" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.839">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170705 18:03:16.840" starttime="20170705 18:03:16.839" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.840" starttime="20170705 18:03:16.839" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.840" starttime="20170705 18:03:16.837" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:16.840" starttime="20170705 18:03:16.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.840">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:16.840" starttime="20170705 18:03:16.543" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.841">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:16.841" starttime="20170705 18:03:16.840" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.841">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:03:16.841">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170705 18:03:16.841">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170705 18:03:16.841" starttime="20170705 18:03:16.841" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.842">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170705 18:03:16.842" starttime="20170705 18:03:16.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.842">${host_state} = Running</msg>
<status endtime="20170705 18:03:16.842" starttime="20170705 18:03:16.542" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:16.843">Running != Quiesced</msg>
<status endtime="20170705 18:03:16.843" starttime="20170705 18:03:16.843" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.843">${status} = False</msg>
<status endtime="20170705 18:03:16.843" starttime="20170705 18:03:16.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:16.843">${status} = False</msg>
<status endtime="20170705 18:03:16.844" starttime="20170705 18:03:16.541" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:16.872">Length is 9</msg>
<status endtime="20170705 18:03:16.872" starttime="20170705 18:03:16.871" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:16.878">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170705 18:03:19.879">${RC} = 0</msg>
<msg level="INFO" timestamp="20170705 18:03:19.879">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.674 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.580 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status endtime="20170705 18:03:19.879" starttime="20170705 18:03:16.872" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.882">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.674 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.580 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.604 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.615 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.580/0.618/0.674/0.038 ms</msg>
<status endtime="20170705 18:03:19.882" starttime="20170705 18:03:19.881" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170705 18:03:19.883" starttime="20170705 18:03:19.882" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.883" starttime="20170705 18:03:16.871" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:19.900">${cur_time} = 2017-07-05 18:03:19:899817</msg>
<status endtime="20170705 18:03:19.900" starttime="20170705 18:03:19.900" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:19.901">${cur_time} = 20170705180319899817</msg>
<status endtime="20170705 18:03:19.901" starttime="20170705 18:03:19.900" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.901" starttime="20170705 18:03:19.899" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:19.901">${FFDC_TIME} = 20170705180319899817</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:19.911">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170705 18:03:19.911" starttime="20170705 18:03:19.910" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:19.911">${suite_name} = 20170705180319899817_TestsTestBasicPoweron</msg>
<status endtime="20170705 18:03:19.911" starttime="20170705 18:03:19.911" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:19.912">${test_name} = PowerOnTest</msg>
<status endtime="20170705 18:03:19.912" starttime="20170705 18:03:19.912" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:19.913">${test_name} = 20170705180319899817_PowerOnTest</msg>
<status endtime="20170705 18:03:19.913" starttime="20170705 18:03:19.913" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.914" starttime="20170705 18:03:19.910" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:19.914">${FFDC_DIR_PATH} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170705 18:03:19.914">${FFDC_PREFIX} = 20170705180319899817_</msg>
<msg level="INFO" timestamp="20170705 18:03:19.942">${LOG_PREFIX} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.943" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.943" starttime="20170705 18:03:19.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:19.947">${FFDC_FILE_PATH} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.975" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.975" starttime="20170705 18:03:19.975" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.976" starttime="20170705 18:03:19.971" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.977" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.977" starttime="20170705 18:03:19.976" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.977" starttime="20170705 18:03:19.976" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.978" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.978" starttime="20170705 18:03:19.978" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.978" starttime="20170705 18:03:19.977" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.980" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.980" starttime="20170705 18:03:19.979" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.980" starttime="20170705 18:03:19.978" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.981" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.981" starttime="20170705 18:03:19.981" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.981" starttime="20170705 18:03:19.980" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.983" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.983" starttime="20170705 18:03:19.982" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.983" starttime="20170705 18:03:19.982" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.984" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.984" starttime="20170705 18:03:19.984" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.984" starttime="20170705 18:03:19.983" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.985" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.985" starttime="20170705 18:03:19.985" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.986" starttime="20170705 18:03:19.984" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.987" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.987" starttime="20170705 18:03:19.986" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.987" starttime="20170705 18:03:19.986" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.988" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.988" starttime="20170705 18:03:19.988" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.989" starttime="20170705 18:03:19.987" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.991" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.992" starttime="20170705 18:03:19.991" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.992" starttime="20170705 18:03:19.989" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.993" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.993" starttime="20170705 18:03:19.992" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.993" starttime="20170705 18:03:19.992" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:19.994" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:19.994" starttime="20170705 18:03:19.994" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.994" starttime="20170705 18:03:19.993" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:19.997">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:03:19.997" starttime="20170705 18:03:19.996" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:19.997">${has_host} = False</msg>
<status endtime="20170705 18:03:19.997" starttime="20170705 18:03:19.995" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:03:19.998" starttime="20170705 18:03:19.998" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:19.998" starttime="20170705 18:03:19.997" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:20.000">${port_num} = 22</msg>
<status endtime="20170705 18:03:20.000" starttime="20170705 18:03:20.000" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:20.001">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:03:20.001" starttime="20170705 18:03:20.000" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:20.001">${https_num} = 443</msg>
<status endtime="20170705 18:03:20.001" starttime="20170705 18:03:20.001" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:20.002">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:03:20.002" starttime="20170705 18:03:20.002" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:20.002" starttime="20170705 18:03:19.999" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:20.002" starttime="20170705 18:03:19.998" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:20.003">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:03:20.003" starttime="20170705 18:03:20.003" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:20.003">${has_port} = False</msg>
<status endtime="20170705 18:03:20.003" starttime="20170705 18:03:20.003" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:03:20.005" starttime="20170705 18:03:20.005" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:03:20.006" starttime="20170705 18:03:20.005" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:20.006" starttime="20170705 18:03:20.005" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:20.006" starttime="20170705 18:03:20.004" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:20.007">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:03:21.753">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:03:21.753" starttime="20170705 18:03:20.006" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.754" starttime="20170705 18:03:19.995" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:21.755">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170705 18:03:21.832">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:21.832">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170705 18:03:21.833">${stderr} = </msg>
<status endtime="20170705 18:03:21.833" starttime="20170705 18:03:21.754" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.833">Length is 0</msg>
<status endtime="20170705 18:03:21.833" starttime="20170705 18:03:21.833" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.834">Length is 11</msg>
<status endtime="20170705 18:03:21.834" starttime="20170705 18:03:21.833" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:21.834">${model_name} = Witherspoon</msg>
<status endtime="20170705 18:03:21.834" starttime="20170705 18:03:19.995" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.836" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.836" starttime="20170705 18:03:21.835" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.836" starttime="20170705 18:03:21.834" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.836" starttime="20170705 18:03:19.987" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.837" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.837" starttime="20170705 18:03:21.837" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.837" starttime="20170705 18:03:21.836" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:21.838">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170705 18:03:21.838" starttime="20170705 18:03:21.838" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.839" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.839" starttime="20170705 18:03:21.839" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.839" starttime="20170705 18:03:21.838" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.841" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.841" starttime="20170705 18:03:21.840" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.841" starttime="20170705 18:03:21.840" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.841" starttime="20170705 18:03:21.838" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.842" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.842" starttime="20170705 18:03:21.842" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.842" starttime="20170705 18:03:21.841" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.843" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.843" starttime="20170705 18:03:21.843" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.843" starttime="20170705 18:03:21.842" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.844" starttime="20170705 18:03:21.841" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.845" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.845" starttime="20170705 18:03:21.844" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.845" starttime="20170705 18:03:21.844" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.846" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.846" starttime="20170705 18:03:21.846" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.846" starttime="20170705 18:03:21.845" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.846" starttime="20170705 18:03:21.844" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.846" starttime="20170705 18:03:21.838" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.847" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:21.847" starttime="20170705 18:03:21.847" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.848" starttime="20170705 18:03:21.846" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.848" starttime="20170705 18:03:19.971" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:21.857">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170705 18:03:21.857" starttime="20170705 18:03:21.857" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:21.858">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FF...</msg>
<status endtime="20170705 18:03:21.858" starttime="20170705 18:03:21.858" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170705 18:03:21.860" starttime="20170705 18:03:21.860" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:21.860">@{ffdc_function_list} = [ Core Files | Get Request FFDC | SEL Log | FFDC Generic Report | BMC Specific Files | OS FFDC ]</msg>
<status endtime="20170705 18:03:21.860" starttime="20170705 18:03:21.859" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170705 18:03:21.862" starttime="20170705 18:03:21.862" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:21.862">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:21.862">${ret_values} = None</msg>
<status endtime="20170705 18:03:21.862" starttime="20170705 18:03:21.861" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170705 18:03:21.863" starttime="20170705 18:03:21.862" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:21.907">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:03:21.907" starttime="20170705 18:03:21.906" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:21.907">${has_host} = False</msg>
<status endtime="20170705 18:03:21.907" starttime="20170705 18:03:21.906" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:03:21.908" starttime="20170705 18:03:21.908" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.908" starttime="20170705 18:03:21.907" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:21.910">${port_num} = 22</msg>
<status endtime="20170705 18:03:21.910" starttime="20170705 18:03:21.909" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:21.910">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:03:21.910" starttime="20170705 18:03:21.910" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:21.911">${https_num} = 443</msg>
<status endtime="20170705 18:03:21.911" starttime="20170705 18:03:21.911" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.912">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:03:21.912" starttime="20170705 18:03:21.911" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.912" starttime="20170705 18:03:21.909" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.912" starttime="20170705 18:03:21.908" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:21.913">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:03:21.913" starttime="20170705 18:03:21.913" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:21.913">${has_port} = False</msg>
<status endtime="20170705 18:03:21.913" starttime="20170705 18:03:21.912" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:03:21.915" starttime="20170705 18:03:21.915" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:03:21.916" starttime="20170705 18:03:21.916" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.916" starttime="20170705 18:03:21.914" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:21.916" starttime="20170705 18:03:21.914" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:21.917">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:03:23.601">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:03:23.602" starttime="20170705 18:03:21.916" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:23.602" starttime="20170705 18:03:21.905" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:23.603">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170705 18:03:23.660">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170705 18:03:23.660">${core_files} = </msg>
<status endtime="20170705 18:03:23.660" starttime="20170705 18:03:23.602" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:23.661">@{core_list} = [ ]</msg>
<status endtime="20170705 18:03:23.661" starttime="20170705 18:03:23.660" status="PASS"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170705 18:03:23.671" starttime="20170705 18:03:23.662" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170705 18:03:24.409" starttime="20170705 18:03:23.673" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.409" starttime="20170705 18:03:23.673" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.410" starttime="20170705 18:03:23.672" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.410" starttime="20170705 18:03:23.661" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170705 18:03:24.411" starttime="20170705 18:03:24.410" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.411" starttime="20170705 18:03:21.905" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.411" starttime="20170705 18:03:21.863" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.411" starttime="20170705 18:03:21.860" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.411" starttime="20170705 18:03:21.860" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170705 18:03:24.413" starttime="20170705 18:03:24.413" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:24.413">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:24.414">${ret_values} = None</msg>
<status endtime="20170705 18:03:24.414" starttime="20170705 18:03:24.413" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170705 18:03:24.414" starttime="20170705 18:03:24.414" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:24.450">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:03:24.450" starttime="20170705 18:03:24.450" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:24.450">${has_host} = False</msg>
<status endtime="20170705 18:03:24.450" starttime="20170705 18:03:24.449" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:03:24.452" starttime="20170705 18:03:24.451" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.452" starttime="20170705 18:03:24.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:24.456">${port_num} = 22</msg>
<status endtime="20170705 18:03:24.456" starttime="20170705 18:03:24.455" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:24.456">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:03:24.456" starttime="20170705 18:03:24.456" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:24.457">${https_num} = 443</msg>
<status endtime="20170705 18:03:24.457" starttime="20170705 18:03:24.457" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:24.458">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:03:24.458" starttime="20170705 18:03:24.457" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.458" starttime="20170705 18:03:24.455" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.458" starttime="20170705 18:03:24.452" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:24.459">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:03:24.459" starttime="20170705 18:03:24.459" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:24.459">${has_port} = False</msg>
<status endtime="20170705 18:03:24.459" starttime="20170705 18:03:24.458" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:03:24.462" starttime="20170705 18:03:24.461" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:03:24.462" starttime="20170705 18:03:24.462" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.462" starttime="20170705 18:03:24.460" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:24.462" starttime="20170705 18:03:24.460" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:24.463">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:03:26.148">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:03:26.148" starttime="20170705 18:03:24.463" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:26.149" starttime="20170705 18:03:24.449" status="PASS"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:26.149">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170705 18:03:26.150" starttime="20170705 18:03:26.149" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:26.151">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_elog', '/xyz/open...</msg>
<status endtime="20170705 18:03:26.151" starttime="20170705 18:03:26.151" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:26.152">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_inventory.txt</msg>
<status endtime="20170705 18:03:26.152" starttime="20170705 18:03:26.151" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:26.155">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:26.158" starttime="20170705 18:03:26.154" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:26.159">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:26.159" starttime="20170705 18:03:26.158" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:26.160">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:26.160" starttime="20170705 18:03:26.159" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:26.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:26.161" starttime="20170705 18:03:26.160" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:26.396">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:26.396" starttime="20170705 18:03:26.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:26.396">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:26.396">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:26.396" starttime="20170705 18:03:26.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:26.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:26.397" starttime="20170705 18:03:26.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:26.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:26.397" starttime="20170705 18:03:26.397" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:26.397" starttime="20170705 18:03:26.154" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:26.398" starttime="20170705 18:03:26.153" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:26.398" starttime="20170705 18:03:26.153" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:26.398">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170705 18:03:26.398" starttime="20170705 18:03:26.398" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170705 18:03:26.399" starttime="20170705 18:03:26.398" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.311">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:28.311">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:28.311" starttime="20170705 18:03:26.399" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170705 18:03:28.312" starttime="20170705 18:03:28.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:28.313">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:28.313" starttime="20170705 18:03:26.152" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:28.315" starttime="20170705 18:03:28.314" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:28.315">${status} = True</msg>
<status endtime="20170705 18:03:28.315" starttime="20170705 18:03:28.313" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170705 18:03:28.316" starttime="20170705 18:03:28.315" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.320">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:03:28.321">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170705 18:03:28.321">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170705 18:03:28.321" starttime="20170705 18:03:28.316" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.323" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_inventory.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:28.323" starttime="20170705 18:03:28.322" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.323" starttime="20170705 18:03:28.321" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.323" starttime="20170705 18:03:26.151" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.324">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_led.txt</msg>
<status endtime="20170705 18:03:28.324" starttime="20170705 18:03:28.324" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.352">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:28.352" starttime="20170705 18:03:28.326" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.353">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:28.353" starttime="20170705 18:03:28.353" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.354">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:28.354" starttime="20170705 18:03:28.353" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.354">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:28.354" starttime="20170705 18:03:28.354" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.551">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:28.551" starttime="20170705 18:03:28.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:28.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:28.552">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:28.552" starttime="20170705 18:03:28.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.552">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:28.553" starttime="20170705 18:03:28.552" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.553">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:28.554" starttime="20170705 18:03:28.553" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.554" starttime="20170705 18:03:28.326" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.554" starttime="20170705 18:03:28.325" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.554" starttime="20170705 18:03:28.325" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.555">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170705 18:03:28.555" starttime="20170705 18:03:28.554" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170705 18:03:28.556" starttime="20170705 18:03:28.555" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.615">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:28.615">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:28.616" starttime="20170705 18:03:28.556" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170705 18:03:28.616" starttime="20170705 18:03:28.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:28.616">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:28.616" starttime="20170705 18:03:28.324" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170705 18:03:28.618">404 != 200</msg>
<status endtime="20170705 18:03:28.618" starttime="20170705 18:03:28.617" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:28.618">${status} = False</msg>
<status endtime="20170705 18:03:28.618" starttime="20170705 18:03:28.617" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170705 18:03:28.619">Continuing for loop from the next iteration.</msg>
<status endtime="20170705 18:03:28.619" starttime="20170705 18:03:28.619" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.619" starttime="20170705 18:03:28.618" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.619" starttime="20170705 18:03:28.323" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.620">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_sensor_list.txt</msg>
<status endtime="20170705 18:03:28.620" starttime="20170705 18:03:28.619" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.623">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:28.623" starttime="20170705 18:03:28.622" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:28.624" starttime="20170705 18:03:28.623" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.624">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:28.624" starttime="20170705 18:03:28.624" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.625">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:28.625" starttime="20170705 18:03:28.625" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.805">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:28.806" starttime="20170705 18:03:28.626" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:28.806">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:28.806">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:28.806" starttime="20170705 18:03:28.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.806">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:28.807" starttime="20170705 18:03:28.806" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:28.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:28.807" starttime="20170705 18:03:28.807" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.807" starttime="20170705 18:03:28.622" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.807" starttime="20170705 18:03:28.621" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:28.808" starttime="20170705 18:03:28.621" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:28.808">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170705 18:03:28.808" starttime="20170705 18:03:28.808" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170705 18:03:28.809" starttime="20170705 18:03:28.808" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.039">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:29.039">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:29.040" starttime="20170705 18:03:28.809" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170705 18:03:29.040" starttime="20170705 18:03:29.040" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.041">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:29.041" starttime="20170705 18:03:28.620" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:29.042" starttime="20170705 18:03:29.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.042">${status} = True</msg>
<status endtime="20170705 18:03:29.042" starttime="20170705 18:03:29.041" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170705 18:03:29.042" starttime="20170705 18:03:29.042" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.043">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170705 18:03:29.043">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170705 18:03:29.043">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170705 18:03:29.043" starttime="20170705 18:03:29.043" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.045" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_sensor_list.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:29.045" starttime="20170705 18:03:29.044" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.045" starttime="20170705 18:03:29.044" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.045" starttime="20170705 18:03:28.619" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.046">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_elog.txt</msg>
<status endtime="20170705 18:03:29.046" starttime="20170705 18:03:29.045" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.049">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:29.050" starttime="20170705 18:03:29.049" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.050">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:29.050" starttime="20170705 18:03:29.050" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.051">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:29.051" starttime="20170705 18:03:29.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.051">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:29.051" starttime="20170705 18:03:29.051" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:29.318" starttime="20170705 18:03:29.052" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:29.318">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:29.318" starttime="20170705 18:03:29.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:29.319" starttime="20170705 18:03:29.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:29.320" starttime="20170705 18:03:29.319" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.320" starttime="20170705 18:03:29.048" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.320" starttime="20170705 18:03:29.048" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.320" starttime="20170705 18:03:29.047" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.321">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170705 18:03:29.321" starttime="20170705 18:03:29.320" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170705 18:03:29.321" starttime="20170705 18:03:29.321" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.366">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:29.366">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:29.366" starttime="20170705 18:03:29.322" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170705 18:03:29.367" starttime="20170705 18:03:29.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.367">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:29.367" starttime="20170705 18:03:29.046" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170705 18:03:29.369">404 != 200</msg>
<status endtime="20170705 18:03:29.369" starttime="20170705 18:03:29.368" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.369">${status} = False</msg>
<status endtime="20170705 18:03:29.369" starttime="20170705 18:03:29.368" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170705 18:03:29.370">Continuing for loop from the next iteration.</msg>
<status endtime="20170705 18:03:29.370" starttime="20170705 18:03:29.370" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.370" starttime="20170705 18:03:29.369" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.370" starttime="20170705 18:03:29.045" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.371">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_record_log.txt</msg>
<status endtime="20170705 18:03:29.371" starttime="20170705 18:03:29.371" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.374">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:29.374" starttime="20170705 18:03:29.373" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:29.375" starttime="20170705 18:03:29.374" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.375">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:29.375" starttime="20170705 18:03:29.375" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:29.376" starttime="20170705 18:03:29.376" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.560">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:29.560" starttime="20170705 18:03:29.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.561">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:29.561">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:29.561" starttime="20170705 18:03:29.376" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.562">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:29.562" starttime="20170705 18:03:29.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:29.562" starttime="20170705 18:03:29.562" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.562" starttime="20170705 18:03:29.373" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.563" starttime="20170705 18:03:29.372" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.563" starttime="20170705 18:03:29.372" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.563">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170705 18:03:29.563" starttime="20170705 18:03:29.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170705 18:03:29.564" starttime="20170705 18:03:29.564" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.631">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:29.631">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:29.631" starttime="20170705 18:03:29.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170705 18:03:29.631" starttime="20170705 18:03:29.631" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.632">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:29.632" starttime="20170705 18:03:29.371" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170705 18:03:29.633">404 != 200</msg>
<status endtime="20170705 18:03:29.633" starttime="20170705 18:03:29.632" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.633">${status} = False</msg>
<status endtime="20170705 18:03:29.633" starttime="20170705 18:03:29.632" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170705 18:03:29.634">Continuing for loop from the next iteration.</msg>
<status endtime="20170705 18:03:29.634" starttime="20170705 18:03:29.634" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:29.634" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:29.370" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:26.151" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:26.150" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:26.150" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:26.150" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:24.448" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:24.414" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:24.412" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.635" starttime="20170705 18:03:24.411" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170705 18:03:29.637" starttime="20170705 18:03:29.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.637">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:29.637">${ret_values} = None</msg>
<status endtime="20170705 18:03:29.637" starttime="20170705 18:03:29.636" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170705 18:03:29.638" starttime="20170705 18:03:29.637" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.690">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170705 18:03:29.691" starttime="20170705 18:03:29.690" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170705 18:03:29.691" starttime="20170705 18:03:29.691" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.692">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170705 18:03:29.692" starttime="20170705 18:03:29.692" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.693">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170705 18:03:29.693" starttime="20170705 18:03:29.692" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.875">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170705 18:03:29.875" starttime="20170705 18:03:29.693" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:29.875">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170705 18:03:29.875" starttime="20170705 18:03:29.693" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.876">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:29.876" starttime="20170705 18:03:29.875" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170705 18:03:29.876" starttime="20170705 18:03:29.876" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.877" starttime="20170705 18:03:29.689" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.877" starttime="20170705 18:03:29.689" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.877" starttime="20170705 18:03:29.688" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.877">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170705 18:03:29.877" starttime="20170705 18:03:29.877" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170705 18:03:29.878" starttime="20170705 18:03:29.878" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.932">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170705 18:03:29.932">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:29.932" starttime="20170705 18:03:29.878" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170705 18:03:29.933" starttime="20170705 18:03:29.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.933">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170705 18:03:29.933" starttime="20170705 18:03:29.688" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170705 18:03:29.934">404 != 200</msg>
<status endtime="20170705 18:03:29.934" starttime="20170705 18:03:29.933" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.934">${status} = False</msg>
<status endtime="20170705 18:03:29.934" starttime="20170705 18:03:29.933" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.935">Returning from the enclosing user keyword.</msg>
<status endtime="20170705 18:03:29.935" starttime="20170705 18:03:29.934" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.935" starttime="20170705 18:03:29.687" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.935" starttime="20170705 18:03:29.638" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.935" starttime="20170705 18:03:29.635" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.935" starttime="20170705 18:03:29.635" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170705 18:03:29.937" starttime="20170705 18:03:29.937" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.937">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:29.937">${ret_values} = None</msg>
<status endtime="20170705 18:03:29.937" starttime="20170705 18:03:29.936" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170705 18:03:29.938" starttime="20170705 18:03:29.937" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:29.980">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:03:29.980" starttime="20170705 18:03:29.980" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.984">${has_host} = False</msg>
<status endtime="20170705 18:03:29.984" starttime="20170705 18:03:29.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:03:29.985" starttime="20170705 18:03:29.985" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.986" starttime="20170705 18:03:29.984" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.987">${port_num} = 22</msg>
<status endtime="20170705 18:03:29.987" starttime="20170705 18:03:29.987" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.988">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:03:29.988" starttime="20170705 18:03:29.988" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:29.989">${https_num} = 443</msg>
<status endtime="20170705 18:03:29.989" starttime="20170705 18:03:29.988" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.990">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:03:29.990" starttime="20170705 18:03:29.989" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.990" starttime="20170705 18:03:29.987" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.990" starttime="20170705 18:03:29.986" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:29.991">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:03:29.991" starttime="20170705 18:03:29.991" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:29.991">${has_port} = False</msg>
<status endtime="20170705 18:03:29.992" starttime="20170705 18:03:29.991" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:03:29.993" starttime="20170705 18:03:29.993" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:03:29.994" starttime="20170705 18:03:29.993" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.994" starttime="20170705 18:03:29.993" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:29.994" starttime="20170705 18:03:29.992" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:29.994">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:03:31.740">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:03:31.740" starttime="20170705 18:03:29.994" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.741" starttime="20170705 18:03:29.978" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:31.741">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170705 18:03:31.741" starttime="20170705 18:03:31.741" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:31.743">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170705 18:03:31.743" starttime="20170705 18:03:31.742" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.747">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170705 18:03:31.747" starttime="20170705 18:03:31.743" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.751" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.751" starttime="20170705 18:03:31.750" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.751" starttime="20170705 18:03:31.750" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.752" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.753" starttime="20170705 18:03:31.752" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.753" starttime="20170705 18:03:31.751" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.754" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.754" starttime="20170705 18:03:31.753" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.754" starttime="20170705 18:03:31.753" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.755" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.755" starttime="20170705 18:03:31.755" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.755" starttime="20170705 18:03:31.754" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.755" starttime="20170705 18:03:31.749" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.755" starttime="20170705 18:03:31.749" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:31.756">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170705 18:03:31.812">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:31.813">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Wed Jul 5 17:36:56 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170705 18:03:31.813">${stderr} = </msg>
<status endtime="20170705 18:03:31.813" starttime="20170705 18:03:31.756" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.821" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.821" starttime="20170705 18:03:31.820" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.821" starttime="20170705 18:03:31.819" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.821" starttime="20170705 18:03:31.813" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.821" starttime="20170705 18:03:31.748" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.821" starttime="20170705 18:03:31.748" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.825" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.825" starttime="20170705 18:03:31.824" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.825" starttime="20170705 18:03:31.823" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.826" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.826" starttime="20170705 18:03:31.826" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.826" starttime="20170705 18:03:31.825" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.827" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.827" starttime="20170705 18:03:31.827" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.828" starttime="20170705 18:03:31.826" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.829" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.829" starttime="20170705 18:03:31.828" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.829" starttime="20170705 18:03:31.828" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.829" starttime="20170705 18:03:31.823" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.829" starttime="20170705 18:03:31.822" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:31.830">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170705 18:03:31.899">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:31.900">${stdout} =  18:03:32 up 12 min,  load average: 0.60, 0.94, 0.82</msg>
<msg level="INFO" timestamp="20170705 18:03:31.900">${stderr} = </msg>
<status endtime="20170705 18:03:31.900" starttime="20170705 18:03:31.830" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.906" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.906" starttime="20170705 18:03:31.905" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.906" starttime="20170705 18:03:31.905" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.906" starttime="20170705 18:03:31.900" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.906" starttime="20170705 18:03:31.822" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.906" starttime="20170705 18:03:31.822" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.909" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.909" starttime="20170705 18:03:31.909" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.909" starttime="20170705 18:03:31.908" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.911" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.911" starttime="20170705 18:03:31.910" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.911" starttime="20170705 18:03:31.909" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.912" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.912" starttime="20170705 18:03:31.911" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.912" starttime="20170705 18:03:31.911" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:31.913" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:31.913" starttime="20170705 18:03:31.913" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.913" starttime="20170705 18:03:31.912" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.913" starttime="20170705 18:03:31.908" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:31.914" starttime="20170705 18:03:31.907" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:31.914">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170705 18:03:31.999">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:31.999">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170705 18:03:31.999">${stderr} = </msg>
<status endtime="20170705 18:03:31.999" starttime="20170705 18:03:31.914" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:32.005" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:32.005" starttime="20170705 18:03:32.005" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.006" starttime="20170705 18:03:32.004" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.006" starttime="20170705 18:03:31.999" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.006" starttime="20170705 18:03:31.906" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.006" starttime="20170705 18:03:31.906" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.006" starttime="20170705 18:03:31.747" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.006" starttime="20170705 18:03:31.742" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.006" starttime="20170705 18:03:31.742" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:32.007">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170705 18:03:32.007" starttime="20170705 18:03:32.007" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:32.008">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170705 18:03:32.008" starttime="20170705 18:03:32.007" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:32.011" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:32.011" starttime="20170705 18:03:32.010" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.011" starttime="20170705 18:03:32.010" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:32.012" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:32.012" starttime="20170705 18:03:32.012" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.012" starttime="20170705 18:03:32.011" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:32.013" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:32.014" starttime="20170705 18:03:32.013" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.014" starttime="20170705 18:03:32.013" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:32.015" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:32.015" starttime="20170705 18:03:32.014" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.015" starttime="20170705 18:03:32.014" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.015" starttime="20170705 18:03:32.009" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:32.015" starttime="20170705 18:03:32.009" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:32.016">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170705 18:03:33.460">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:33.460">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170705 18:03:33.460">${stderr} = </msg>
<status endtime="20170705 18:03:33.460" starttime="20170705 18:03:32.015" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.468" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.468" starttime="20170705 18:03:33.468" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.469" starttime="20170705 18:03:33.467" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.469" starttime="20170705 18:03:33.461" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.469" starttime="20170705 18:03:32.008" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.469" starttime="20170705 18:03:32.008" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.469" starttime="20170705 18:03:32.008" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.469" starttime="20170705 18:03:32.006" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.469" starttime="20170705 18:03:32.006" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:33.470">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170705 18:03:33.470" starttime="20170705 18:03:33.470" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.471">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170705 18:03:33.471" starttime="20170705 18:03:33.470" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.474" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.474" starttime="20170705 18:03:33.474" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.474" starttime="20170705 18:03:33.473" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.476" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.476" starttime="20170705 18:03:33.475" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.476" starttime="20170705 18:03:33.475" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.477" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.477" starttime="20170705 18:03:33.477" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.477" starttime="20170705 18:03:33.476" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.478" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.478" starttime="20170705 18:03:33.478" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.478" starttime="20170705 18:03:33.477" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.479" starttime="20170705 18:03:33.473" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.479" starttime="20170705 18:03:33.472" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:33.479">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170705 18:03:33.564">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170705 18:03:33.564">${stdout} = </msg>
<msg level="INFO" timestamp="20170705 18:03:33.564">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170705 18:03:33.564" starttime="20170705 18:03:33.479" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.571" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.571" starttime="20170705 18:03:33.570" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.571" starttime="20170705 18:03:33.569" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.571" starttime="20170705 18:03:33.564" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.571" starttime="20170705 18:03:33.471" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.571" starttime="20170705 18:03:33.471" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.574" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.574" starttime="20170705 18:03:33.574" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.574" starttime="20170705 18:03:33.573" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.575" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.576" starttime="20170705 18:03:33.575" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.576" starttime="20170705 18:03:33.574" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.577" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.577" starttime="20170705 18:03:33.576" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.577" starttime="20170705 18:03:33.576" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.578" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.579" starttime="20170705 18:03:33.578" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.579" starttime="20170705 18:03:33.577" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.579" starttime="20170705 18:03:33.573" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.579" starttime="20170705 18:03:33.572" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:33.579">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170705 18:03:33.648">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:33.648">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-79"
VERSION_ID="v1.99.7-79-g92a0af4"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170705 18:03:33.648">${stderr} = </msg>
<status endtime="20170705 18:03:33.648" starttime="20170705 18:03:33.579" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.654" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:33.654" starttime="20170705 18:03:33.654" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.654" starttime="20170705 18:03:33.653" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.654" starttime="20170705 18:03:33.648" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:33.571" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:33.571" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:33.471" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:33.469" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:33.469" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:31.741" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:29.978" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:29.938" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:29.935" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.655" starttime="20170705 18:03:29.935" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170705 18:03:33.657" starttime="20170705 18:03:33.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:33.657">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:33.657">${ret_values} = None</msg>
<status endtime="20170705 18:03:33.657" starttime="20170705 18:03:33.656" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170705 18:03:33.658" starttime="20170705 18:03:33.657" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:33.701">Dictionary does not contain key 'host'.</msg>
<status endtime="20170705 18:03:33.701" starttime="20170705 18:03:33.701" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:33.702">${has_host} = False</msg>
<status endtime="20170705 18:03:33.702" starttime="20170705 18:03:33.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170705 18:03:33.703" starttime="20170705 18:03:33.702" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.703" starttime="20170705 18:03:33.702" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:33.705">${port_num} = 22</msg>
<status endtime="20170705 18:03:33.705" starttime="20170705 18:03:33.704" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:33.705">${SSH_PORT} = 22</msg>
<status endtime="20170705 18:03:33.705" starttime="20170705 18:03:33.705" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:33.706">${https_num} = 443</msg>
<status endtime="20170705 18:03:33.706" starttime="20170705 18:03:33.706" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.707">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170705 18:03:33.707" starttime="20170705 18:03:33.706" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.707" starttime="20170705 18:03:33.704" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.707" starttime="20170705 18:03:33.703" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170705 18:03:33.708">Dictionary does not contain key 'port'.</msg>
<status endtime="20170705 18:03:33.708" starttime="20170705 18:03:33.708" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:33.708">${has_port} = False</msg>
<status endtime="20170705 18:03:33.708" starttime="20170705 18:03:33.707" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170705 18:03:33.710" starttime="20170705 18:03:33.710" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170705 18:03:33.711" starttime="20170705 18:03:33.710" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.711" starttime="20170705 18:03:33.709" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:33.711" starttime="20170705 18:03:33.708" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:33.711">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170705 18:03:35.459">Read output: root@witherspoon:~#</msg>
<status endtime="20170705 18:03:35.459" starttime="20170705 18:03:33.711" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.459" starttime="20170705 18:03:33.700" status="PASS"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.460">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170705 18:03:35.460" starttime="20170705 18:03:35.459" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.461">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status endtime="20170705 18:03:35.461" starttime="20170705 18:03:35.461" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.462">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_meminfo.txt</msg>
<status endtime="20170705 18:03:35.462" starttime="20170705 18:03:35.462" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170705 18:03:35.463" starttime="20170705 18:03:35.463" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.464">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170705 18:03:35.520">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:35.520">${stdout} = MemTotal:         432332 kB
MemFree:          274632 kB
MemAvailable:     319276 kB
Buffers:           10920 kB
Cached:            51092 kB
SwapCached:            0 kB
Active:           105464 kB
Inac...</msg>
<msg level="INFO" timestamp="20170705 18:03:35.521">${stderr} = </msg>
<status endtime="20170705 18:03:35.521" starttime="20170705 18:03:35.464" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:35.528" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_meminfo.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:35.528" starttime="20170705 18:03:35.527" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.528" starttime="20170705 18:03:35.526" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.528" starttime="20170705 18:03:35.521" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.528" starttime="20170705 18:03:35.462" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.528" starttime="20170705 18:03:35.461" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.529">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_procinfo.txt</msg>
<status endtime="20170705 18:03:35.529" starttime="20170705 18:03:35.528" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170705 18:03:35.530" starttime="20170705 18:03:35.530" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.531">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170705 18:03:35.616">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:35.616">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170705 18:03:35.616">${stderr} = </msg>
<status endtime="20170705 18:03:35.616" starttime="20170705 18:03:35.530" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:35.622" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_procinfo.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:35.622" starttime="20170705 18:03:35.621" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.623" starttime="20170705 18:03:35.621" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.623" starttime="20170705 18:03:35.616" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.623" starttime="20170705 18:03:35.529" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.623" starttime="20170705 18:03:35.528" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.623">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_dmesg.txt</msg>
<status endtime="20170705 18:03:35.624" starttime="20170705 18:03:35.623" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170705 18:03:35.625" starttime="20170705 18:03:35.625" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.626">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170705 18:03:35.720">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:35.721">${stdout} = [    2.050000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled
[    2.050000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A
[    2.050000] 1e78d000.seri...</msg>
<msg level="INFO" timestamp="20170705 18:03:35.721">${stderr} = </msg>
<status endtime="20170705 18:03:35.721" starttime="20170705 18:03:35.625" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:35.727" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_dmesg.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:35.727" starttime="20170705 18:03:35.727" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.727" starttime="20170705 18:03:35.726" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.727" starttime="20170705 18:03:35.721" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.728" starttime="20170705 18:03:35.624" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:35.728" starttime="20170705 18:03:35.623" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.729">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_journalctl.txt</msg>
<status endtime="20170705 18:03:35.729" starttime="20170705 18:03:35.728" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170705 18:03:35.730" starttime="20170705 18:03:35.730" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:35.730">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170705 18:03:38.254">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:38.255">${stdout} = -- Logs begin at Wed 2017-07-05 17:51:20 UTC, end at Wed 2017-07-05 18:03:35 UTC. --
Jul 05 17:51:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 05 17:51:20 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170705 18:03:38.255">${stderr} = </msg>
<status endtime="20170705 18:03:38.255" starttime="20170705 18:03:35.730" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.262" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_journalctl.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:38.263" starttime="20170705 18:03:38.261" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.263" starttime="20170705 18:03:38.260" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.263" starttime="20170705 18:03:38.255" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.263" starttime="20170705 18:03:35.729" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.263" starttime="20170705 18:03:35.728" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.264">${logpath} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_proc_list.txt</msg>
<status endtime="20170705 18:03:38.264" starttime="20170705 18:03:38.263" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170705 18:03:38.265" starttime="20170705 18:03:38.265" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.265">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170705 18:03:38.623">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170705 18:03:38.623">${stdout} = Mem: 157856K used, 274476K free, 14620K shrd, 10920K buff, 51100K cached
CPU:  11% usr  11% sys   0% nic  77% idle   0% io   0% irq   0% sirq
Load average: 0.63 0.95 0.83 1/149 1527
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170705 18:03:38.623">${stderr} = </msg>
<status endtime="20170705 18:03:38.623" starttime="20170705 18:03:38.265" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.629" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_proc_list.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/20170705180319899817_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:38.629" starttime="20170705 18:03:38.629" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:38.628" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:38.623" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:38.264" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:38.263" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:35.461" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:35.460" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:35.460" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:35.460" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:33.699" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:33.658" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:33.655" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.630" starttime="20170705 18:03:33.655" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170705 18:03:38.632" starttime="20170705 18:03:38.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:38.632">${status} = PASS</msg>
<msg level="INFO" timestamp="20170705 18:03:38.632">${ret_values} = None</msg>
<status endtime="20170705 18:03:38.633" starttime="20170705 18:03:38.631" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170705 18:03:38.633" starttime="20170705 18:03:38.633" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.671">Returning from the enclosing user keyword.</msg>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:38.670" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:38.670" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:38.633" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:38.631" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:38.631" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:21.860" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:21.857" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:21.857" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.671" starttime="20170705 18:03:21.857" status="PASS"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170705 18:03:38.797" starttime="20170705 18:03:38.672" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.797" starttime="20170705 18:03:21.856" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.798" starttime="20170705 18:03:16.844" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.798" starttime="20170705 18:03:16.844" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170705 18:03:38.799" starttime="20170705 18:03:38.798" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.813">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170705 18:03:38.813" starttime="20170705 18:03:38.800" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.814">${FFDC_DIR_PATH} = /tmp/fspcibld/25540/obmc-robot/logs/20170705180319899817_TestsTestBasicPoweron/20170705180319899817_PowerOnTest/</msg>
<status endtime="20170705 18:03:38.814" starttime="20170705 18:03:38.814" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170705 18:03:38.815" starttime="20170705 18:03:38.814" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170705 18:03:38.816" starttime="20170705 18:03:38.815" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.817" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs"&gt;/tmp/fspcibld/25540/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170705 18:03:38.817" starttime="20170705 18:03:38.816" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.818" html="yes">File '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170705 18:03:38.818" starttime="20170705 18:03:38.817" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:38.818">${exist} = True</msg>
<status endtime="20170705 18:03:38.818" starttime="20170705 18:03:38.817" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170705 18:03:38.819" starttime="20170705 18:03:38.818" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170705 18:03:38.819" starttime="20170705 18:03:38.819" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.820">${cur_time} = 2017-07-05 18:03:38:819881</msg>
<status endtime="20170705 18:03:38.820" starttime="20170705 18:03:38.820" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.821">${cur_time} = 20170705180338819881</msg>
<status endtime="20170705 18:03:38.821" starttime="20170705 18:03:38.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:38.821">${cur_time} = 20170705180338819881</msg>
<status endtime="20170705 18:03:38.821" starttime="20170705 18:03:38.819" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.822" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/25540/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:38.822" starttime="20170705 18:03:38.821" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.822" starttime="20170705 18:03:38.799" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.822" starttime="20170705 18:03:16.541" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.824">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:03:38.824" starttime="20170705 18:03:38.823" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.824">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:03:38.824" starttime="20170705 18:03:38.824" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:38.825">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170705 18:03:38.825" starttime="20170705 18:03:38.823" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.825">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170705 18:03:38.825" starttime="20170705 18:03:38.825" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:03:38.826" starttime="20170705 18:03:38.826" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.830">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170705 18:03:38.835">${rc} = 0</msg>
<msg level="INFO" timestamp="20170705 18:03:38.836">${output} = /tmp/fspcibld/25540/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170705 18:03:38.836" starttime="20170705 18:03:38.826" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170705 18:03:38.839" starttime="20170705 18:03:38.838" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170705 18:03:38.840" starttime="20170705 18:03:38.840" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.841">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170705 18:03:38.841" starttime="20170705 18:03:38.841" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:38.842">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170705 18:03:38.842" starttime="20170705 18:03:38.825" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.842">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170705 18:03:38.843" starttime="20170705 18:03:38.842" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:03:38.843" starttime="20170705 18:03:38.843" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.847">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170705 18:03:38.859">${rc} = 0</msg>
<msg level="INFO" timestamp="20170705 18:03:38.859">${os_con_pid} = </msg>
<status endtime="20170705 18:03:38.859" starttime="20170705 18:03:38.844" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170705 18:03:38.862" starttime="20170705 18:03:38.862" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.863">${cmd_buf} = kill -9 </msg>
<status endtime="20170705 18:03:38.863" starttime="20170705 18:03:38.863" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170705 18:03:38.866" starttime="20170705 18:03:38.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.867">${rc} = None</msg>
<msg level="INFO" timestamp="20170705 18:03:38.867">${output} = None</msg>
<status endtime="20170705 18:03:38.867" starttime="20170705 18:03:38.866" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170705 18:03:38.867" starttime="20170705 18:03:38.867" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.871" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/25540/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/25540/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170705 18:03:38.871" starttime="20170705 18:03:38.869" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.871" starttime="20170705 18:03:38.868" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.871" starttime="20170705 18:03:38.868" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.872">${output} = </msg>
<status endtime="20170705 18:03:38.872" starttime="20170705 18:03:38.872" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170705 18:03:38.873">${loc_quiet} = 1</msg>
<status endtime="20170705 18:03:38.873" starttime="20170705 18:03:38.872" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170705 18:03:38.914" starttime="20170705 18:03:38.873" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:38.915">${rc} = 0</msg>
<msg level="INFO" timestamp="20170705 18:03:38.915">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [2...</msg>
<status endtime="20170705 18:03:38.915" starttime="20170705 18:03:38.873" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170705 18:03:38.916">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [2...</msg>
<status endtime="20170705 18:03:38.916" starttime="20170705 18:03:38.822" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170705 18:03:38.920">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-1[?7l4[?7h Running boot hooks[K Performing kexec loadreboot[   47.503357088,5] IPMI: Soft shutdown requested
The system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   33.771463] kexec_core: Starting new kernel
[   51.400289776,5] OPAL: Switch to big-endian OS
[   51.501274960,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[   52.401987008,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   52.402123200,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   52.402233296,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   52.403588368,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   52.403701376,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   52.403807376,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.425345] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.425350] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[49m[2J[-1;-1f[?25h
Ubuntu Zesty Zapus (development branch) ws017p1 hvc0

ws017p1 login: </msg>
<status endtime="20170705 18:03:38.921" starttime="20170705 18:03:38.918" status="PASS"></status>
</kw>
<status endtime="20170705 18:03:38.922" starttime="20170705 18:03:16.540" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170705 18:03:38.922" starttime="20170705 18:00:14.349" status="FAIL" critical="yes">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170705 18:03:38.928" starttime="20170705 18:00:14.315" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170705 18:03:38.932" starttime="20170705 18:00:07.133" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" fail="1" id="s1">Tests</stat>
<stat pass="1" name="Security" fail="0" id="s1-s1">Tests.Security</stat>
<stat pass="1" name="Test Ssl" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
