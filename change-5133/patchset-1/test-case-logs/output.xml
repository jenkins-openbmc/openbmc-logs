<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170707 01:55:10.706">
<suite name="Tests" source="/tmp/fspcibld/21959/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:55:11.314" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:55:11.314" starttime="20170707 01:55:11.314" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:11.314" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:55:11.314" starttime="20170707 01:55:11.313" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:55:11.315" starttime="20170707 01:55:11.315" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:11.315" starttime="20170707 01:55:11.314" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:55:11.317" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:55:11.317" starttime="20170707 01:55:11.316" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:55:11.317" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:55:11.317" starttime="20170707 01:55:11.317" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:55:11.318" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:55:11.318" starttime="20170707 01:55:11.318" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:55:11.319" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:55:11.319" starttime="20170707 01:55:11.318" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:11.319" starttime="20170707 01:55:11.316" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:11.319" starttime="20170707 01:55:11.316" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:55:11.320" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:55:11.320" starttime="20170707 01:55:11.319" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:11.320" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:55:11.320" starttime="20170707 01:55:11.319" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:55:11.321" starttime="20170707 01:55:11.321" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:55:11.322" starttime="20170707 01:55:11.322" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:11.322" starttime="20170707 01:55:11.321" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:11.322" starttime="20170707 01:55:11.320" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:55:11.323" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:55:13.017" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:55:13.017" starttime="20170707 01:55:11.322" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.017" starttime="20170707 01:55:11.312" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:55:13.019" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170707 01:55:13.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:55:13.117" level="INFO">${output} = VERSION_ID="v1.99.7-84-g3da42c3"</msg>
<msg timestamp="20170707 01:55:13.117" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:55:13.117" starttime="20170707 01:55:13.018" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170707 01:55:13.118" level="INFO">Length is 0</msg>
<status endtime="20170707 01:55:13.118" starttime="20170707 01:55:13.118" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170707 01:55:13.118" level="INFO">VERSION_ID="v1.99.7-84-g3da42c3"</msg>
<status endtime="20170707 01:55:13.118" starttime="20170707 01:55:13.118" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.118" starttime="20170707 01:55:13.018" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.119" starttime="20170707 01:55:13.018" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:55:13.120" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170707 01:55:13.328" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:55:13.328" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg timestamp="20170707 01:55:13.328" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:55:13.328" starttime="20170707 01:55:13.120" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170707 01:55:13.328" level="INFO">Length is 0</msg>
<status endtime="20170707 01:55:13.329" starttime="20170707 01:55:13.328" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:13.329" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status endtime="20170707 01:55:13.329" starttime="20170707 01:55:13.119" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170707 01:55:13.329" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.46
	op-build-v1.17-101-g1c57f18-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-0ffbb55
	linux-4.11.6-openpower1-p57dd16e
	petitboot-v1.4.3-pfac92ff
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-0df81aa
</msg>
<status endtime="20170707 01:55:13.330" starttime="20170707 01:55:13.329" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.330" starttime="20170707 01:55:13.119" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.330" starttime="20170707 01:55:13.119" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:55:13.333" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:55:13.333" starttime="20170707 01:55:13.333" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:13.333" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:55:13.333" starttime="20170707 01:55:13.332" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:55:13.334" starttime="20170707 01:55:13.334" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.334" starttime="20170707 01:55:13.333" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:55:13.336" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:55:13.336" starttime="20170707 01:55:13.335" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:55:13.336" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:55:13.336" starttime="20170707 01:55:13.336" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:55:13.337" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:55:13.337" starttime="20170707 01:55:13.336" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:55:13.338" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:55:13.338" starttime="20170707 01:55:13.337" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.338" starttime="20170707 01:55:13.335" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.338" starttime="20170707 01:55:13.335" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:55:13.339" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:55:13.339" starttime="20170707 01:55:13.339" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:13.339" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:55:13.339" starttime="20170707 01:55:13.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:55:13.341" starttime="20170707 01:55:13.340" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:55:13.341" starttime="20170707 01:55:13.341" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.341" starttime="20170707 01:55:13.340" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:13.341" starttime="20170707 01:55:13.339" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:55:13.342" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:55:14.989" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:55:14.989" starttime="20170707 01:55:13.342" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:14.989" starttime="20170707 01:55:13.331" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:55:14.990" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170707 01:55:15.067" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:55:15.067" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170707 01:55:15.067" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:55:15.067" starttime="20170707 01:55:14.989" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170707 01:55:15.068" level="INFO">Length is 0</msg>
<status endtime="20170707 01:55:15.068" starttime="20170707 01:55:15.068" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170707 01:55:15.068" level="INFO">Length is 11</msg>
<status endtime="20170707 01:55:15.069" starttime="20170707 01:55:15.068" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:15.069" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170707 01:55:15.069" starttime="20170707 01:55:13.331" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170707 01:55:15.069" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170707 01:55:15.069" starttime="20170707 01:55:15.069" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:15.069" starttime="20170707 01:55:13.331" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:15.069" starttime="20170707 01:55:13.331" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:55:15.071" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:55:15.071" starttime="20170707 01:55:15.071" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:15.072" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:55:15.072" starttime="20170707 01:55:15.071" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:55:15.073" starttime="20170707 01:55:15.072" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:15.073" starttime="20170707 01:55:15.072" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:55:15.074" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:55:15.074" starttime="20170707 01:55:15.074" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:55:15.075" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:55:15.075" starttime="20170707 01:55:15.075" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:55:15.075" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:55:15.075" starttime="20170707 01:55:15.075" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:55:15.076" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:55:15.076" starttime="20170707 01:55:15.076" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:15.076" starttime="20170707 01:55:15.073" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:15.076" starttime="20170707 01:55:15.073" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:55:15.077" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:55:15.077" starttime="20170707 01:55:15.077" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:15.077" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:55:15.077" starttime="20170707 01:55:15.077" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:55:15.079" starttime="20170707 01:55:15.079" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:55:15.080" starttime="20170707 01:55:15.079" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:15.080" starttime="20170707 01:55:15.078" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:15.080" starttime="20170707 01:55:15.078" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:55:15.080" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:55:16.827" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:55:16.828" starttime="20170707 01:55:15.080" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:16.828" starttime="20170707 01:55:15.070" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:55:16.829" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170707 01:55:16.906" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:55:16.906" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170707 01:55:16.906" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:55:16.906" starttime="20170707 01:55:16.829" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170707 01:55:16.906" level="INFO">Length is 0</msg>
<status endtime="20170707 01:55:16.907" starttime="20170707 01:55:16.906" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:16.907" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170707 01:55:16.907" starttime="20170707 01:55:16.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170707 01:55:16.907" starttime="20170707 01:55:16.907" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:16.908" starttime="20170707 01:55:15.070" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:16.908" starttime="20170707 01:55:15.070" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170707 01:55:16.908" starttime="20170707 01:55:16.908" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:16.908" starttime="20170707 01:55:11.312" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/21959/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/21959/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:55:16.991" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:55:16.992" starttime="20170707 01:55:16.991" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:16.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:16.993" starttime="20170707 01:55:16.992" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:55:16.993" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:55:16.993" starttime="20170707 01:55:16.993" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:55:16.994" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:55:16.994" starttime="20170707 01:55:16.993" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.191" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:55:17.191" starttime="20170707 01:55:16.995" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.191" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:55:17.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:17.191" starttime="20170707 01:55:16.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.192" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:17.192" starttime="20170707 01:55:17.191" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:17.193" starttime="20170707 01:55:17.192" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.193" starttime="20170707 01:55:16.990" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.193" starttime="20170707 01:55:16.990" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.193" starttime="20170707 01:55:16.989" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:55:17.197" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:55:17.198" starttime="20170707 01:55:17.197" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:17.199" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:17.199" starttime="20170707 01:55:17.198" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:55:17.199" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:55:17.199" starttime="20170707 01:55:17.199" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:55:17.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:55:17.200" starttime="20170707 01:55:17.200" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:55:17.433" starttime="20170707 01:55:17.201" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.433" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:55:17.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:17.433" starttime="20170707 01:55:17.200" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.434" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:17.434" starttime="20170707 01:55:17.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:17.434" starttime="20170707 01:55:17.434" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.435" starttime="20170707 01:55:17.197" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.435" starttime="20170707 01:55:17.196" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.435" starttime="20170707 01:55:17.196" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:55:17.435" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:55:17.435" starttime="20170707 01:55:17.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:17.438" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:17.438" starttime="20170707 01:55:17.437" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:17.438" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:17.439" starttime="20170707 01:55:17.438" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.439" starttime="20170707 01:55:17.438" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.439" starttime="20170707 01:55:17.436" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.439" starttime="20170707 01:55:17.436" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:55:17.530" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:55:17.530" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:17.530" starttime="20170707 01:55:17.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:17.532" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:17.532" starttime="20170707 01:55:17.531" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:17.533" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:17.533" starttime="20170707 01:55:17.533" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.533" starttime="20170707 01:55:17.532" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.533" starttime="20170707 01:55:17.531" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.534" starttime="20170707 01:55:17.530" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:17.534" starttime="20170707 01:55:17.195" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:17.534" starttime="20170707 01:55:17.534" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:55:17.535" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:55:17.535" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:55:17.535" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:55:17.535" starttime="20170707 01:55:17.535" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.535" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:55:17.536" starttime="20170707 01:55:17.194" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.536" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:55:17.536" starttime="20170707 01:55:17.194" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170707 01:55:17.537" level="FAIL">Running != Quiesced</msg>
<status endtime="20170707 01:55:17.537" starttime="20170707 01:55:17.537" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:17.537" level="INFO">${status} = False</msg>
<status endtime="20170707 01:55:17.537" starttime="20170707 01:55:17.536" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.537" level="INFO">${status} = False</msg>
<status endtime="20170707 01:55:17.537" starttime="20170707 01:55:17.194" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170707 01:55:17.538" starttime="20170707 01:55:17.538" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170707 01:55:17.538" starttime="20170707 01:55:17.538" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170707 01:55:17.551" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170707 01:55:17.551" starttime="20170707 01:55:17.539" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170707 01:55:17.564" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170707 01:55:17.564" starttime="20170707 01:55:17.552" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:55:17.567" level="INFO">${cur_time} = 2017-07-07 01:55:17:566659</msg>
<status endtime="20170707 01:55:17.567" starttime="20170707 01:55:17.566" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:55:17.568" level="INFO">${cur_time} = 20170707015517566659</msg>
<status endtime="20170707 01:55:17.568" starttime="20170707 01:55:17.567" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.568" starttime="20170707 01:55:17.566" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.574" level="INFO">${FFDC_TIME} = 20170707015517566659</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170707 01:55:17.576" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170707 01:55:17.576" starttime="20170707 01:55:17.575" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170707 01:55:17.576" level="INFO">${suite_name} = 20170707015517566659_TestsSecurityTestSsl</msg>
<status endtime="20170707 01:55:17.576" starttime="20170707 01:55:17.576" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170707 01:55:17.577" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170707 01:55:17.577" starttime="20170707 01:55:17.576" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170707 01:55:17.577" level="INFO">${test_name} = 20170707015517566659_TestSSLConnection</msg>
<status endtime="20170707 01:55:17.577" starttime="20170707 01:55:17.577" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.578" starttime="20170707 01:55:17.575" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.578" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015517566659_TestsSecurityTestSsl/20170707015517566659_TestSSLConnection/</msg>
<msg timestamp="20170707 01:55:17.582" level="INFO">${FFDC_PREFIX} = 20170707015517566659_</msg>
<status endtime="20170707 01:55:17.582" starttime="20170707 01:55:17.565" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.582" starttime="20170707 01:55:17.565" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170707 01:55:17.583" starttime="20170707 01:55:17.582" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:55:17.583" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs"&gt;/tmp/fspcibld/21959/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170707 01:55:17.584" starttime="20170707 01:55:17.583" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.585" level="FAIL">File '/tmp/fspcibld/21959/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170707 01:55:17.585" starttime="20170707 01:55:17.584" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:55:17.585" level="INFO">${exist} = False</msg>
<status endtime="20170707 01:55:17.585" starttime="20170707 01:55:17.584" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:55:17.586" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:55:17.586" starttime="20170707 01:55:17.586" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.586" starttime="20170707 01:55:17.585" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170707 01:55:17.587" starttime="20170707 01:55:17.586" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:55:17.588" level="INFO">${cur_time} = 2017-07-07 01:55:17:587417</msg>
<status endtime="20170707 01:55:17.588" starttime="20170707 01:55:17.587" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:55:17.588" level="INFO">${cur_time} = 20170707015517587417</msg>
<status endtime="20170707 01:55:17.588" starttime="20170707 01:55:17.588" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.588" level="INFO">${cur_time} = 20170707015517587417</msg>
<status endtime="20170707 01:55:17.588" starttime="20170707 01:55:17.587" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:55:17.589" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:55:17.590" starttime="20170707 01:55:17.589" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.590" starttime="20170707 01:55:17.539" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.590" starttime="20170707 01:55:17.193" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170707 01:55:17.590" starttime="20170707 01:55:16.989" critical="yes" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170707 01:55:17.591" level="INFO">Delete All Sessions</msg>
<status endtime="20170707 01:55:17.591" starttime="20170707 01:55:17.591" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170707 01:55:17.591" starttime="20170707 01:55:16.911" status="PASS"></status>
</suite>
<status endtime="20170707 01:55:17.594" starttime="20170707 01:55:16.908" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/21959/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170707 01:55:17.630" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:55:17.630" starttime="20170707 01:55:17.630" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170707 01:55:17.631" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:55:17.631" starttime="20170707 01:55:17.630" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.631" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:55:17.631" starttime="20170707 01:55:17.629" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170707 01:55:17.633" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:55:17.633" starttime="20170707 01:55:17.633" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170707 01:55:17.634" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:55:17.634" starttime="20170707 01:55:17.634" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.634" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:55:17.634" starttime="20170707 01:55:17.633" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:55:17.635" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170707 01:55:17.635" starttime="20170707 01:55:17.635" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:55:17.636" starttime="20170707 01:55:17.635" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:55:17.640" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170707 01:55:17.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20170707 01:55:17.643" level="INFO">${output} = /tmp/fspcibld/21959/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170707 01:55:17.643" starttime="20170707 01:55:17.636" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170707 01:55:17.646" starttime="20170707 01:55:17.645" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170707 01:55:17.646" starttime="20170707 01:55:17.646" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:55:17.647" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170707 01:55:17.647" starttime="20170707 01:55:17.647" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:17.647" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170707 01:55:17.647" starttime="20170707 01:55:17.635" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:55:17.648" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170707 01:55:17.648" starttime="20170707 01:55:17.648" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:55:17.649" starttime="20170707 01:55:17.648" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170707 01:55:17.652" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170707 01:55:17.677" level="INFO">${rc} = 0</msg>
<msg timestamp="20170707 01:55:17.677" level="INFO">${os_con_pid} = </msg>
<status endtime="20170707 01:55:17.677" starttime="20170707 01:55:17.649" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170707 01:55:17.679" starttime="20170707 01:55:17.679" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:55:17.680" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170707 01:55:17.680" starttime="20170707 01:55:17.679" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:55:17.681" starttime="20170707 01:55:17.680" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:55:17.681" level="INFO">${rc} = None</msg>
<msg timestamp="20170707 01:55:17.681" level="INFO">${output} = None</msg>
<status endtime="20170707 01:55:17.681" starttime="20170707 01:55:17.681" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170707 01:55:17.682" starttime="20170707 01:55:17.682" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170707 01:55:17.684" level="FAIL">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170707 01:55:17.684" starttime="20170707 01:55:17.683" status="FAIL"></status>
</kw>
<status endtime="20170707 01:55:17.684" starttime="20170707 01:55:17.683" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:17.685" starttime="20170707 01:55:17.682" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:55:17.685" level="INFO">${output} = </msg>
<status endtime="20170707 01:55:17.685" starttime="20170707 01:55:17.685" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170707 01:55:17.686" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170707 01:55:17.686" starttime="20170707 01:55:17.685" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170707 01:55:18.122" starttime="20170707 01:55:17.687" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:18.122" level="INFO">${rc} = 1</msg>
<msg timestamp="20170707 01:55:18.122" level="INFO">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170707 01:55:18.122" starttime="20170707 01:55:17.686" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:18.123" level="INFO">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170707 01:55:18.123" starttime="20170707 01:55:17.631" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:55:18.125" level="INFO">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170707 01:55:18.125" starttime="20170707 01:55:18.124" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:55:18.126" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170707 01:55:18.126" starttime="20170707 01:55:18.126" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:55:18.127" starttime="20170707 01:55:18.126" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:55:18.131" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170707 01:55:18.134" level="INFO">${rc} = 0</msg>
<msg timestamp="20170707 01:55:18.135" level="INFO">${output} = /tmp/fspcibld/21959/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170707 01:55:18.135" starttime="20170707 01:55:18.127" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170707 01:55:18.137" starttime="20170707 01:55:18.137" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170707 01:55:18.138" starttime="20170707 01:55:18.138" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:55:18.139" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170707 01:55:18.139" starttime="20170707 01:55:18.139" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:18.139" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170707 01:55:18.139" starttime="20170707 01:55:18.125" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:55:18.140" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170707 01:55:18.140" starttime="20170707 01:55:18.140" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:55:18.141" starttime="20170707 01:55:18.140" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:55:18.144" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170707 01:55:18.512" level="INFO">${rc} = 0</msg>
<msg timestamp="20170707 01:55:18.513" level="INFO">${output} = </msg>
<status endtime="20170707 01:55:18.514" starttime="20170707 01:55:18.141" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170707 01:55:18.525" starttime="20170707 01:55:18.523" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:18.527" starttime="20170707 01:55:17.629" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170707 01:55:18.528" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170707 01:55:18.531" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170707 01:55:18.532" starttime="20170707 01:55:18.530" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:55:18.533" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170707 01:55:18.533" starttime="20170707 01:55:18.533" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:55:18.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:55:18.543" starttime="20170707 01:55:18.539" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:18.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:18.544" starttime="20170707 01:55:18.543" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:55:18.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:55:18.545" starttime="20170707 01:55:18.544" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:55:18.545" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:55:18.545" starttime="20170707 01:55:18.545" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:55:19.024" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:55:19.025" starttime="20170707 01:55:18.546" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:19.025" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:55:19.025" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:19.025" starttime="20170707 01:55:18.546" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:55:19.026" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:19.026" starttime="20170707 01:55:19.025" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:19.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:19.027" starttime="20170707 01:55:19.026" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.027" starttime="20170707 01:55:18.539" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.027" starttime="20170707 01:55:18.535" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.027" starttime="20170707 01:55:18.535" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:55:19.027" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170707 01:55:19.028" starttime="20170707 01:55:19.027" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:19.028" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:19.028" starttime="20170707 01:55:19.028" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170707 01:55:19.029" starttime="20170707 01:55:19.028" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:19.030" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170707 01:55:19.030" starttime="20170707 01:55:19.029" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:19.031" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170707 01:55:19.031" starttime="20170707 01:55:19.031" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.031" starttime="20170707 01:55:19.031" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.032" starttime="20170707 01:55:19.029" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:55:19.481" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170707 01:55:19.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:19.482" starttime="20170707 01:55:19.032" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:19.490" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:19.490" starttime="20170707 01:55:19.482" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:19.491" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:19.492" starttime="20170707 01:55:19.491" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.492" starttime="20170707 01:55:19.490" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.492" starttime="20170707 01:55:19.482" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:19.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:19.492" starttime="20170707 01:55:18.533" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:19.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:19.493" starttime="20170707 01:55:19.492" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170707 01:55:19.493" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:55:19.493" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:55:19.493" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170707 01:55:19.493" starttime="20170707 01:55:19.493" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:19.494" starttime="20170707 01:55:18.532" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170707 01:55:19.494" starttime="20170707 01:55:19.494" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:55:19.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:55:19.499" starttime="20170707 01:55:19.499" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:19.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:19.500" starttime="20170707 01:55:19.500" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:55:19.500" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:55:19.500" starttime="20170707 01:55:19.500" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:55:19.501" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:55:19.501" starttime="20170707 01:55:19.501" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:55:21.308" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:55:21.308" starttime="20170707 01:55:19.502" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:21.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:55:21.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:21.309" starttime="20170707 01:55:19.501" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:55:21.309" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:21.309" starttime="20170707 01:55:21.309" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:21.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:21.310" starttime="20170707 01:55:21.310" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:21.310" starttime="20170707 01:55:19.498" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:21.310" starttime="20170707 01:55:19.498" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:21.310" starttime="20170707 01:55:19.497" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:55:21.311" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:55:21.311" starttime="20170707 01:55:21.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:21.313" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:21.313" starttime="20170707 01:55:21.312" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:21.314" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:21.314" starttime="20170707 01:55:21.314" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:21.314" starttime="20170707 01:55:21.313" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:21.314" starttime="20170707 01:55:21.312" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:21.314" starttime="20170707 01:55:21.311" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:55:27.495" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:55:27.496" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:27.496" starttime="20170707 01:55:21.315" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:27.498" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:27.498" starttime="20170707 01:55:27.498" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:27.499" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:27.499" starttime="20170707 01:55:27.499" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:27.499" starttime="20170707 01:55:27.498" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:27.499" starttime="20170707 01:55:27.497" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:27.500" starttime="20170707 01:55:27.497" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:27.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:27.500" starttime="20170707 01:55:19.496" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:27.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:27.501" starttime="20170707 01:55:27.500" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:55:27.501" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:55:27.501" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:55:27.502" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:55:27.502" starttime="20170707 01:55:27.501" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:27.502" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:55:27.502" starttime="20170707 01:55:19.496" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:27.502" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:55:27.503" starttime="20170707 01:55:19.495" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:55:27.503" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:55:27.504" starttime="20170707 01:55:27.503" status="FAIL"></status>
</kw>
<status endtime="20170707 01:55:27.504" starttime="20170707 01:55:19.495" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:55:37.509" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:55:37.510" starttime="20170707 01:55:37.509" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:37.510" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:37.510" starttime="20170707 01:55:37.510" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:55:37.511" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:55:37.511" starttime="20170707 01:55:37.511" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:55:37.512" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:55:37.512" starttime="20170707 01:55:37.511" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:55:37.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:55:37.712" starttime="20170707 01:55:37.512" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:37.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:55:37.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:37.712" starttime="20170707 01:55:37.512" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:55:37.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:37.713" starttime="20170707 01:55:37.712" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:37.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:37.713" starttime="20170707 01:55:37.713" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.714" starttime="20170707 01:55:37.508" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.714" starttime="20170707 01:55:37.507" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.714" starttime="20170707 01:55:37.507" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:55:37.714" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:55:37.714" starttime="20170707 01:55:37.714" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:37.716" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:37.717" starttime="20170707 01:55:37.716" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:37.718" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:37.718" starttime="20170707 01:55:37.718" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.718" starttime="20170707 01:55:37.717" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.719" starttime="20170707 01:55:37.715" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.719" starttime="20170707 01:55:37.715" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:55:37.790" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:55:37.790" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:37.790" starttime="20170707 01:55:37.719" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:37.791" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:37.792" starttime="20170707 01:55:37.791" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:37.793" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:37.793" starttime="20170707 01:55:37.792" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.793" starttime="20170707 01:55:37.792" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.793" starttime="20170707 01:55:37.791" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:37.793" starttime="20170707 01:55:37.790" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:37.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:37.794" starttime="20170707 01:55:37.506" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:37.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:37.795" starttime="20170707 01:55:37.794" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:55:37.796" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:55:37.796" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:55:37.796" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:55:37.796" starttime="20170707 01:55:37.795" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:37.797" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:55:37.797" starttime="20170707 01:55:37.506" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:37.797" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:55:37.797" starttime="20170707 01:55:37.505" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:55:37.798" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:55:37.798" starttime="20170707 01:55:37.797" status="FAIL"></status>
</kw>
<status endtime="20170707 01:55:37.798" starttime="20170707 01:55:37.504" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:55:47.803" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:55:47.803" starttime="20170707 01:55:47.802" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:47.804" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:47.804" starttime="20170707 01:55:47.803" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:55:47.804" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:55:47.804" starttime="20170707 01:55:47.804" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:55:47.805" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:55:47.805" starttime="20170707 01:55:47.804" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:55:48.000" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:55:48.000" starttime="20170707 01:55:47.806" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:48.001" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:55:48.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:48.001" starttime="20170707 01:55:47.805" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:55:48.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:48.001" starttime="20170707 01:55:48.001" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:48.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:48.003" starttime="20170707 01:55:48.002" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.003" starttime="20170707 01:55:47.802" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.003" starttime="20170707 01:55:47.801" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.003" starttime="20170707 01:55:47.801" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:55:48.003" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:55:48.004" starttime="20170707 01:55:48.003" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:48.006" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:48.006" starttime="20170707 01:55:48.005" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:48.007" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:48.007" starttime="20170707 01:55:48.006" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.007" starttime="20170707 01:55:48.006" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.007" starttime="20170707 01:55:48.004" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.007" starttime="20170707 01:55:48.004" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:55:48.075" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:55:48.075" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:48.075" starttime="20170707 01:55:48.007" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:48.077" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:48.077" starttime="20170707 01:55:48.076" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:48.078" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:48.078" starttime="20170707 01:55:48.077" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.078" starttime="20170707 01:55:48.077" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.078" starttime="20170707 01:55:48.076" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:48.078" starttime="20170707 01:55:48.075" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:48.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:48.078" starttime="20170707 01:55:47.800" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:48.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:48.079" starttime="20170707 01:55:48.078" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:55:48.079" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:55:48.079" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:55:48.080" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:55:48.080" starttime="20170707 01:55:48.079" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:48.080" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:55:48.080" starttime="20170707 01:55:47.799" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:48.080" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:55:48.080" starttime="20170707 01:55:47.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:55:48.081" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:55:48.081" starttime="20170707 01:55:48.080" status="FAIL"></status>
</kw>
<status endtime="20170707 01:55:48.081" starttime="20170707 01:55:47.798" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:55:58.086" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:55:58.086" starttime="20170707 01:55:58.086" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:55:58.087" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:55:58.087" starttime="20170707 01:55:58.087" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:55:58.088" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:55:58.088" starttime="20170707 01:55:58.087" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:55:58.088" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:55:58.088" starttime="20170707 01:55:58.088" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:55:58.293" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:55:58.293" starttime="20170707 01:55:58.089" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:58.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:55:58.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:58.293" starttime="20170707 01:55:58.089" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:55:58.294" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:58.294" starttime="20170707 01:55:58.293" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:58.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:58.295" starttime="20170707 01:55:58.294" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.295" starttime="20170707 01:55:58.085" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.295" starttime="20170707 01:55:58.084" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.295" starttime="20170707 01:55:58.084" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:55:58.295" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:55:58.295" starttime="20170707 01:55:58.295" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:58.297" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:58.297" starttime="20170707 01:55:58.297" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:58.298" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:55:58.298" starttime="20170707 01:55:58.298" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.299" starttime="20170707 01:55:58.298" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.299" starttime="20170707 01:55:58.296" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.299" starttime="20170707 01:55:58.296" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:55:58.364" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:55:58.364" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:58.364" starttime="20170707 01:55:58.299" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:55:58.366" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:58.366" starttime="20170707 01:55:58.365" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:55:58.367" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:55:58.367" starttime="20170707 01:55:58.367" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.367" starttime="20170707 01:55:58.366" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.367" starttime="20170707 01:55:58.365" status="PASS"></status>
</kw>
<status endtime="20170707 01:55:58.367" starttime="20170707 01:55:58.364" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:58.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:55:58.368" starttime="20170707 01:55:58.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:55:58.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:55:58.368" starttime="20170707 01:55:58.368" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:55:58.369" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:55:58.369" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:55:58.369" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:55:58.369" starttime="20170707 01:55:58.369" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:58.369" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:55:58.369" starttime="20170707 01:55:58.083" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:55:58.370" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:55:58.370" starttime="20170707 01:55:58.082" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:55:58.370" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:55:58.370" starttime="20170707 01:55:58.370" status="FAIL"></status>
</kw>
<status endtime="20170707 01:55:58.370" starttime="20170707 01:55:58.082" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:56:08.375" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:56:08.376" starttime="20170707 01:56:08.375" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:56:08.376" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:56:08.377" starttime="20170707 01:56:08.376" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:56:08.377" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:56:08.377" starttime="20170707 01:56:08.377" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:56:08.378" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:56:08.378" starttime="20170707 01:56:08.377" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:56:08.575" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:56:08.575" starttime="20170707 01:56:08.379" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:08.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:56:08.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:08.575" starttime="20170707 01:56:08.378" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:56:08.576" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:08.576" starttime="20170707 01:56:08.576" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:08.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:08.577" starttime="20170707 01:56:08.577" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.577" starttime="20170707 01:56:08.375" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.578" starttime="20170707 01:56:08.374" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.578" starttime="20170707 01:56:08.373" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:56:08.578" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:56:08.578" starttime="20170707 01:56:08.578" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:08.580" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:08.580" starttime="20170707 01:56:08.580" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:08.581" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:08.581" starttime="20170707 01:56:08.581" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.581" starttime="20170707 01:56:08.581" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.582" starttime="20170707 01:56:08.579" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.582" starttime="20170707 01:56:08.579" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:56:08.648" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:56:08.649" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:08.649" starttime="20170707 01:56:08.582" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:08.650" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:08.650" starttime="20170707 01:56:08.650" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:08.651" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:08.652" starttime="20170707 01:56:08.651" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.652" starttime="20170707 01:56:08.651" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.652" starttime="20170707 01:56:08.649" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:08.652" starttime="20170707 01:56:08.649" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:08.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:08.652" starttime="20170707 01:56:08.373" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:08.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:08.653" starttime="20170707 01:56:08.652" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:56:08.653" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:56:08.653" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:56:08.653" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:56:08.654" starttime="20170707 01:56:08.653" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:08.654" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:56:08.654" starttime="20170707 01:56:08.372" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:08.654" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:56:08.654" starttime="20170707 01:56:08.372" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:56:08.655" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:56:08.655" starttime="20170707 01:56:08.654" status="FAIL"></status>
</kw>
<status endtime="20170707 01:56:08.655" starttime="20170707 01:56:08.371" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:56:18.660" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:56:18.661" starttime="20170707 01:56:18.660" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:56:18.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:56:18.661" starttime="20170707 01:56:18.661" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:56:18.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:56:18.662" starttime="20170707 01:56:18.662" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:56:18.663" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:56:18.663" starttime="20170707 01:56:18.662" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:56:18.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:56:18.864" starttime="20170707 01:56:18.663" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:18.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:56:18.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:18.865" starttime="20170707 01:56:18.663" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:56:18.865" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:18.865" starttime="20170707 01:56:18.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:18.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:18.866" starttime="20170707 01:56:18.865" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.866" starttime="20170707 01:56:18.659" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.866" starttime="20170707 01:56:18.658" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.866" starttime="20170707 01:56:18.658" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:56:18.867" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:56:18.867" starttime="20170707 01:56:18.867" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:18.869" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:18.869" starttime="20170707 01:56:18.868" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:18.870" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:18.870" starttime="20170707 01:56:18.870" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.870" starttime="20170707 01:56:18.869" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.870" starttime="20170707 01:56:18.868" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.870" starttime="20170707 01:56:18.867" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:56:18.936" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:56:18.936" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:18.936" starttime="20170707 01:56:18.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:18.938" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:18.938" starttime="20170707 01:56:18.937" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:18.939" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:18.940" starttime="20170707 01:56:18.939" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.940" starttime="20170707 01:56:18.938" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.940" starttime="20170707 01:56:18.937" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:18.940" starttime="20170707 01:56:18.936" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:18.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:18.940" starttime="20170707 01:56:18.657" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:18.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:18.941" starttime="20170707 01:56:18.940" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:56:18.941" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:56:18.941" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:56:18.941" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:56:18.941" starttime="20170707 01:56:18.941" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:18.942" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:56:18.942" starttime="20170707 01:56:18.657" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:18.942" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:56:18.942" starttime="20170707 01:56:18.656" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:56:18.943" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:56:18.943" starttime="20170707 01:56:18.942" status="FAIL"></status>
</kw>
<status endtime="20170707 01:56:18.943" starttime="20170707 01:56:18.655" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:56:28.948" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:56:28.948" starttime="20170707 01:56:28.947" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:56:28.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:56:28.949" starttime="20170707 01:56:28.948" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:56:28.949" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:56:28.949" starttime="20170707 01:56:28.949" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:56:28.950" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:56:28.950" starttime="20170707 01:56:28.949" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:56:29.140" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:56:29.141" starttime="20170707 01:56:28.951" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:29.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:56:29.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:29.141" starttime="20170707 01:56:28.950" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:56:29.141" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:29.142" starttime="20170707 01:56:29.141" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:29.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:29.143" starttime="20170707 01:56:29.142" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.143" starttime="20170707 01:56:28.947" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.143" starttime="20170707 01:56:28.946" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.143" starttime="20170707 01:56:28.946" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:56:29.144" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:56:29.144" starttime="20170707 01:56:29.143" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:29.146" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:29.146" starttime="20170707 01:56:29.145" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:29.147" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:29.147" starttime="20170707 01:56:29.146" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.147" starttime="20170707 01:56:29.146" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.147" starttime="20170707 01:56:29.144" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.147" starttime="20170707 01:56:29.144" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:56:29.213" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:56:29.214" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:29.214" starttime="20170707 01:56:29.147" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:29.215" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:29.216" starttime="20170707 01:56:29.215" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:29.216" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:29.217" starttime="20170707 01:56:29.216" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.217" starttime="20170707 01:56:29.216" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.217" starttime="20170707 01:56:29.214" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:29.217" starttime="20170707 01:56:29.214" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:29.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:29.217" starttime="20170707 01:56:28.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:29.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:29.218" starttime="20170707 01:56:29.217" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:56:29.218" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:56:29.218" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:56:29.218" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:56:29.218" starttime="20170707 01:56:29.218" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:29.219" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:56:29.219" starttime="20170707 01:56:28.944" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:29.219" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:56:29.219" starttime="20170707 01:56:28.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:56:29.220" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:56:29.220" starttime="20170707 01:56:29.219" status="FAIL"></status>
</kw>
<status endtime="20170707 01:56:29.220" starttime="20170707 01:56:28.943" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:56:39.225" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:56:39.225" starttime="20170707 01:56:39.225" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:56:39.226" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:56:39.226" starttime="20170707 01:56:39.226" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:56:39.227" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:56:39.227" starttime="20170707 01:56:39.226" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:56:39.227" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:56:39.227" starttime="20170707 01:56:39.227" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:56:39.414" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:56:39.414" starttime="20170707 01:56:39.228" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:39.414" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:56:39.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:39.414" starttime="20170707 01:56:39.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:56:39.415" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:39.415" starttime="20170707 01:56:39.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:39.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:39.416" starttime="20170707 01:56:39.415" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.416" starttime="20170707 01:56:39.224" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.416" starttime="20170707 01:56:39.223" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.416" starttime="20170707 01:56:39.223" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:56:39.416" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:56:39.417" starttime="20170707 01:56:39.416" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:39.419" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:39.419" starttime="20170707 01:56:39.418" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:39.420" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:39.420" starttime="20170707 01:56:39.419" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.420" starttime="20170707 01:56:39.419" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.420" starttime="20170707 01:56:39.417" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.420" starttime="20170707 01:56:39.417" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:56:39.486" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:56:39.486" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:39.486" starttime="20170707 01:56:39.420" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:39.488" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:39.488" starttime="20170707 01:56:39.488" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:39.491" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:39.491" starttime="20170707 01:56:39.489" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.491" starttime="20170707 01:56:39.489" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.492" starttime="20170707 01:56:39.487" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:39.492" starttime="20170707 01:56:39.487" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:39.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:39.492" starttime="20170707 01:56:39.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:39.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:39.493" starttime="20170707 01:56:39.492" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:56:39.493" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:56:39.493" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:56:39.493" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:56:39.494" starttime="20170707 01:56:39.493" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:39.494" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:56:39.494" starttime="20170707 01:56:39.221" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:39.494" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:56:39.494" starttime="20170707 01:56:39.221" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:56:39.495" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:56:39.495" starttime="20170707 01:56:39.494" status="FAIL"></status>
</kw>
<status endtime="20170707 01:56:39.495" starttime="20170707 01:56:39.220" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:56:49.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:56:49.500" starttime="20170707 01:56:49.499" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:56:49.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:56:49.501" starttime="20170707 01:56:49.500" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:56:49.501" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:56:49.501" starttime="20170707 01:56:49.501" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:56:49.502" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:56:49.502" starttime="20170707 01:56:49.501" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:56:49.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:56:49.686" starttime="20170707 01:56:49.502" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:49.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:56:49.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:49.686" starttime="20170707 01:56:49.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:56:49.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:49.687" starttime="20170707 01:56:49.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:49.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:49.687" starttime="20170707 01:56:49.687" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.687" starttime="20170707 01:56:49.499" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.688" starttime="20170707 01:56:49.498" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.688" starttime="20170707 01:56:49.498" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:56:49.688" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:56:49.688" starttime="20170707 01:56:49.688" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:49.691" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:49.691" starttime="20170707 01:56:49.690" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:49.692" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:49.692" starttime="20170707 01:56:49.691" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.692" starttime="20170707 01:56:49.691" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.692" starttime="20170707 01:56:49.689" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.692" starttime="20170707 01:56:49.689" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:56:49.757" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:56:49.757" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:49.758" starttime="20170707 01:56:49.692" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:49.759" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:49.759" starttime="20170707 01:56:49.759" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:49.760" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:56:49.760" starttime="20170707 01:56:49.760" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.760" starttime="20170707 01:56:49.759" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.760" starttime="20170707 01:56:49.758" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:49.761" starttime="20170707 01:56:49.758" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:49.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:49.761" starttime="20170707 01:56:49.497" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:49.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:49.761" starttime="20170707 01:56:49.761" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:56:49.762" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:56:49.762" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:56:49.762" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:56:49.762" starttime="20170707 01:56:49.762" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:49.762" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:56:49.762" starttime="20170707 01:56:49.496" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:49.763" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:56:49.763" starttime="20170707 01:56:49.496" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:56:49.763" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:56:49.763" starttime="20170707 01:56:49.763" status="FAIL"></status>
</kw>
<status endtime="20170707 01:56:49.764" starttime="20170707 01:56:49.495" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:56:59.768" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:56:59.769" starttime="20170707 01:56:59.768" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:56:59.769" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:56:59.769" starttime="20170707 01:56:59.769" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:56:59.770" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:56:59.770" starttime="20170707 01:56:59.770" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:56:59.771" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:56:59.771" starttime="20170707 01:56:59.770" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:56:59.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:56:59.957" starttime="20170707 01:56:59.771" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:56:59.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:56:59.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:56:59.957" starttime="20170707 01:56:59.771" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:56:59.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:59.958" starttime="20170707 01:56:59.958" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:56:59.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:56:59.959" starttime="20170707 01:56:59.958" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:59.959" starttime="20170707 01:56:59.767" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:59.959" starttime="20170707 01:56:59.767" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:59.959" starttime="20170707 01:56:59.766" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:56:59.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:56:59.960" starttime="20170707 01:56:59.959" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:56:59.962" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:59.962" starttime="20170707 01:56:59.961" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:56:59.963" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:56:59.963" starttime="20170707 01:56:59.962" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:59.963" starttime="20170707 01:56:59.962" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:59.963" starttime="20170707 01:56:59.960" status="PASS"></status>
</kw>
<status endtime="20170707 01:56:59.963" starttime="20170707 01:56:59.960" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:57:00.039" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:57:00.039" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:00.039" starttime="20170707 01:56:59.963" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:00.041" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:00.041" starttime="20170707 01:57:00.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:00.042" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:00.042" starttime="20170707 01:57:00.042" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:00.042" starttime="20170707 01:57:00.041" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:00.042" starttime="20170707 01:57:00.040" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:00.042" starttime="20170707 01:57:00.040" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:00.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:00.043" starttime="20170707 01:56:59.766" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:00.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:00.043" starttime="20170707 01:57:00.043" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:57:00.044" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:57:00.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:57:00.044" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:57:00.044" starttime="20170707 01:57:00.043" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:00.044" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:57:00.044" starttime="20170707 01:56:59.765" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:00.045" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:57:00.045" starttime="20170707 01:56:59.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:57:00.045" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:57:00.045" starttime="20170707 01:57:00.045" status="FAIL"></status>
</kw>
<status endtime="20170707 01:57:00.045" starttime="20170707 01:56:59.764" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:57:10.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:57:10.052" starttime="20170707 01:57:10.051" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:57:10.052" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:57:10.052" starttime="20170707 01:57:10.052" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:57:10.053" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:57:10.053" starttime="20170707 01:57:10.052" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:57:10.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:57:10.054" starttime="20170707 01:57:10.053" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:57:10.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:57:10.243" starttime="20170707 01:57:10.054" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:10.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:57:10.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:10.243" starttime="20170707 01:57:10.054" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:57:10.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:10.244" starttime="20170707 01:57:10.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:10.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:10.244" starttime="20170707 01:57:10.244" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.245" starttime="20170707 01:57:10.050" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.245" starttime="20170707 01:57:10.050" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.245" starttime="20170707 01:57:10.049" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:57:10.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:57:10.245" starttime="20170707 01:57:10.245" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:10.247" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:10.247" starttime="20170707 01:57:10.247" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:10.248" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:10.248" starttime="20170707 01:57:10.248" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.248" starttime="20170707 01:57:10.248" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.249" starttime="20170707 01:57:10.246" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.249" starttime="20170707 01:57:10.246" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:57:10.317" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:57:10.318" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:10.318" starttime="20170707 01:57:10.249" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:10.319" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:10.319" starttime="20170707 01:57:10.319" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:10.320" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:10.320" starttime="20170707 01:57:10.320" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.320" starttime="20170707 01:57:10.320" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.321" starttime="20170707 01:57:10.318" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:10.321" starttime="20170707 01:57:10.318" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:10.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:10.321" starttime="20170707 01:57:10.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:10.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:10.322" starttime="20170707 01:57:10.321" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:57:10.322" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:57:10.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:57:10.322" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:57:10.322" starttime="20170707 01:57:10.322" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:10.322" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:57:10.323" starttime="20170707 01:57:10.047" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:10.323" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:57:10.323" starttime="20170707 01:57:10.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:57:10.324" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:57:10.324" starttime="20170707 01:57:10.323" status="FAIL"></status>
</kw>
<status endtime="20170707 01:57:10.324" starttime="20170707 01:57:10.046" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:57:20.328" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:57:20.329" starttime="20170707 01:57:20.328" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:57:20.329" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:57:20.329" starttime="20170707 01:57:20.329" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:57:20.330" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:57:20.330" starttime="20170707 01:57:20.330" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:57:20.331" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:57:20.331" starttime="20170707 01:57:20.330" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:57:20.549" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:57:20.549" starttime="20170707 01:57:20.331" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:20.549" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:57:20.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:20.549" starttime="20170707 01:57:20.331" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:57:20.550" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:20.550" starttime="20170707 01:57:20.550" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:20.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:20.551" starttime="20170707 01:57:20.550" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.551" starttime="20170707 01:57:20.327" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.551" starttime="20170707 01:57:20.327" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.551" starttime="20170707 01:57:20.326" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:57:20.551" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:57:20.552" starttime="20170707 01:57:20.551" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:20.553" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:20.554" starttime="20170707 01:57:20.553" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:20.554" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:20.555" starttime="20170707 01:57:20.554" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.555" starttime="20170707 01:57:20.554" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.555" starttime="20170707 01:57:20.552" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.555" starttime="20170707 01:57:20.552" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:57:20.623" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:57:20.623" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:20.623" starttime="20170707 01:57:20.555" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:20.625" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:20.625" starttime="20170707 01:57:20.624" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:20.626" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:20.626" starttime="20170707 01:57:20.626" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.626" starttime="20170707 01:57:20.625" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.626" starttime="20170707 01:57:20.624" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:20.626" starttime="20170707 01:57:20.623" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:20.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:20.626" starttime="20170707 01:57:20.326" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:20.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:20.627" starttime="20170707 01:57:20.627" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:57:20.628" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:57:20.628" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:57:20.628" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:57:20.628" starttime="20170707 01:57:20.627" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:20.628" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:57:20.628" starttime="20170707 01:57:20.325" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:20.628" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:57:20.629" starttime="20170707 01:57:20.325" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:57:20.629" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:57:20.629" starttime="20170707 01:57:20.629" status="FAIL"></status>
</kw>
<status endtime="20170707 01:57:20.629" starttime="20170707 01:57:20.324" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:57:30.635" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:57:30.635" starttime="20170707 01:57:30.634" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:57:30.636" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:57:30.636" starttime="20170707 01:57:30.635" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:57:30.636" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:57:30.636" starttime="20170707 01:57:30.636" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:57:30.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:57:30.637" starttime="20170707 01:57:30.637" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:57:30.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:57:30.822" starttime="20170707 01:57:30.638" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:30.822" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:57:30.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:30.822" starttime="20170707 01:57:30.637" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:57:30.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:30.823" starttime="20170707 01:57:30.822" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:30.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:30.823" starttime="20170707 01:57:30.823" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.823" starttime="20170707 01:57:30.633" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.824" starttime="20170707 01:57:30.633" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.824" starttime="20170707 01:57:30.632" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:57:30.824" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:57:30.824" starttime="20170707 01:57:30.824" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:30.826" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:30.826" starttime="20170707 01:57:30.826" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:30.827" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:30.827" starttime="20170707 01:57:30.827" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.827" starttime="20170707 01:57:30.826" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.828" starttime="20170707 01:57:30.825" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.828" starttime="20170707 01:57:30.825" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:57:30.930" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:57:30.930" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:30.930" starttime="20170707 01:57:30.828" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:30.932" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:30.932" starttime="20170707 01:57:30.932" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:30.933" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:30.933" starttime="20170707 01:57:30.933" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.934" starttime="20170707 01:57:30.932" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.934" starttime="20170707 01:57:30.931" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:30.934" starttime="20170707 01:57:30.931" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:30.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:30.934" starttime="20170707 01:57:30.632" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:30.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:30.935" starttime="20170707 01:57:30.934" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:57:30.935" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:57:30.935" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:57:30.935" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:57:30.935" starttime="20170707 01:57:30.935" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:30.936" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:57:30.936" starttime="20170707 01:57:30.631" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:30.936" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:57:30.936" starttime="20170707 01:57:30.631" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:57:30.937" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:57:30.937" starttime="20170707 01:57:30.936" status="FAIL"></status>
</kw>
<status endtime="20170707 01:57:30.937" starttime="20170707 01:57:30.630" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:57:40.942" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:57:40.942" starttime="20170707 01:57:40.941" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:57:40.943" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:57:40.943" starttime="20170707 01:57:40.942" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:57:40.943" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:57:40.943" starttime="20170707 01:57:40.943" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:57:40.944" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:57:40.944" starttime="20170707 01:57:40.944" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:57:41.128" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:57:41.129" starttime="20170707 01:57:40.945" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:41.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:57:41.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:41.129" starttime="20170707 01:57:40.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:57:41.129" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:41.130" starttime="20170707 01:57:41.129" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:41.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:41.130" starttime="20170707 01:57:41.130" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.130" starttime="20170707 01:57:40.941" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.130" starttime="20170707 01:57:40.940" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.131" starttime="20170707 01:57:40.940" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:57:41.131" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:57:41.131" starttime="20170707 01:57:41.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:41.133" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:41.133" starttime="20170707 01:57:41.133" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:41.134" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:41.134" starttime="20170707 01:57:41.134" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.135" starttime="20170707 01:57:41.134" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.135" starttime="20170707 01:57:41.132" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.135" starttime="20170707 01:57:41.131" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:57:41.205" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:57:41.205" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:41.205" starttime="20170707 01:57:41.135" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:41.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:41.207" starttime="20170707 01:57:41.207" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:41.208" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:41.208" starttime="20170707 01:57:41.208" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.208" starttime="20170707 01:57:41.207" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.208" starttime="20170707 01:57:41.206" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:41.209" starttime="20170707 01:57:41.206" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:41.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:41.209" starttime="20170707 01:57:40.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:41.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:41.210" starttime="20170707 01:57:41.209" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:57:41.210" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:57:41.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:57:41.210" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:57:41.210" starttime="20170707 01:57:41.210" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:41.211" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:57:41.211" starttime="20170707 01:57:40.938" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:41.211" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:57:41.211" starttime="20170707 01:57:40.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:57:41.212" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:57:41.212" starttime="20170707 01:57:41.211" status="FAIL"></status>
</kw>
<status endtime="20170707 01:57:41.212" starttime="20170707 01:57:40.937" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:57:51.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:57:51.217" starttime="20170707 01:57:51.216" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:57:51.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:57:51.218" starttime="20170707 01:57:51.218" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:57:51.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:57:51.219" starttime="20170707 01:57:51.218" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:57:51.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:57:51.219" starttime="20170707 01:57:51.219" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:57:51.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:57:51.403" starttime="20170707 01:57:51.220" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:51.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:57:51.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:51.403" starttime="20170707 01:57:51.220" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:57:51.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:51.404" starttime="20170707 01:57:51.403" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:51.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:51.404" starttime="20170707 01:57:51.404" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.405" starttime="20170707 01:57:51.215" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.405" starttime="20170707 01:57:51.215" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.405" starttime="20170707 01:57:51.214" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:57:51.405" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:57:51.405" starttime="20170707 01:57:51.405" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:51.407" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:51.407" starttime="20170707 01:57:51.407" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:51.408" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:57:51.408" starttime="20170707 01:57:51.408" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.408" starttime="20170707 01:57:51.407" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.409" starttime="20170707 01:57:51.406" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.409" starttime="20170707 01:57:51.406" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:57:51.475" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:57:51.475" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:51.475" starttime="20170707 01:57:51.409" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:57:51.477" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:51.477" starttime="20170707 01:57:51.477" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:57:51.478" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:57:51.478" starttime="20170707 01:57:51.478" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.478" starttime="20170707 01:57:51.477" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.478" starttime="20170707 01:57:51.476" status="PASS"></status>
</kw>
<status endtime="20170707 01:57:51.479" starttime="20170707 01:57:51.476" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:51.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:57:51.479" starttime="20170707 01:57:51.214" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:57:51.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:57:51.480" starttime="20170707 01:57:51.479" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:57:51.480" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:57:51.480" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:57:51.480" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:57:51.480" starttime="20170707 01:57:51.480" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:51.481" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:57:51.481" starttime="20170707 01:57:51.213" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:57:51.481" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:57:51.481" starttime="20170707 01:57:51.213" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:57:51.482" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:57:51.482" starttime="20170707 01:57:51.481" status="FAIL"></status>
</kw>
<status endtime="20170707 01:57:51.482" starttime="20170707 01:57:51.212" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:01.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:01.487" starttime="20170707 01:58:01.486" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:01.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:01.488" starttime="20170707 01:58:01.487" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:01.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:01.488" starttime="20170707 01:58:01.488" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:01.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:01.489" starttime="20170707 01:58:01.489" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:01.671" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:01.671" starttime="20170707 01:58:01.490" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:01.671" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:01.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:01.671" starttime="20170707 01:58:01.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:01.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:01.672" starttime="20170707 01:58:01.671" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:01.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:01.672" starttime="20170707 01:58:01.672" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.673" starttime="20170707 01:58:01.486" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.673" starttime="20170707 01:58:01.485" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.673" starttime="20170707 01:58:01.485" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:01.673" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:58:01.673" starttime="20170707 01:58:01.673" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:01.675" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:01.675" starttime="20170707 01:58:01.675" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:01.676" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:01.676" starttime="20170707 01:58:01.676" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.677" starttime="20170707 01:58:01.676" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.677" starttime="20170707 01:58:01.674" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.677" starttime="20170707 01:58:01.674" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:01.751" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:58:01.751" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:01.751" starttime="20170707 01:58:01.677" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:01.753" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:01.753" starttime="20170707 01:58:01.753" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:01.754" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:01.754" starttime="20170707 01:58:01.754" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.754" starttime="20170707 01:58:01.753" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.754" starttime="20170707 01:58:01.752" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:01.754" starttime="20170707 01:58:01.752" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:01.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:01.755" starttime="20170707 01:58:01.484" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:01.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:01.755" starttime="20170707 01:58:01.755" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:58:01.756" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:58:01.756" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:58:01.756" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:58:01.756" starttime="20170707 01:58:01.755" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:01.756" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:58:01.756" starttime="20170707 01:58:01.483" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:01.757" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:58:01.757" starttime="20170707 01:58:01.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:58:01.757" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:58:01.757" starttime="20170707 01:58:01.757" status="FAIL"></status>
</kw>
<status endtime="20170707 01:58:01.757" starttime="20170707 01:58:01.482" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:11.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:11.763" starttime="20170707 01:58:11.762" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:11.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:11.763" starttime="20170707 01:58:11.763" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:11.764" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:11.764" starttime="20170707 01:58:11.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:11.765" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:11.765" starttime="20170707 01:58:11.764" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:11.949" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:11.949" starttime="20170707 01:58:11.766" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:11.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:11.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:11.950" starttime="20170707 01:58:11.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:11.950" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:11.950" starttime="20170707 01:58:11.950" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:11.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:11.951" starttime="20170707 01:58:11.951" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:11.951" starttime="20170707 01:58:11.762" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:11.951" starttime="20170707 01:58:11.761" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:11.951" starttime="20170707 01:58:11.760" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:11.952" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:58:11.952" starttime="20170707 01:58:11.951" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:11.954" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:11.954" starttime="20170707 01:58:11.953" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:11.955" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:11.955" starttime="20170707 01:58:11.955" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:11.955" starttime="20170707 01:58:11.954" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:11.955" starttime="20170707 01:58:11.953" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:11.955" starttime="20170707 01:58:11.952" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:12.021" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:58:12.021" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:12.021" starttime="20170707 01:58:11.955" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:12.023" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:12.023" starttime="20170707 01:58:12.022" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:12.024" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:12.024" starttime="20170707 01:58:12.024" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:12.024" starttime="20170707 01:58:12.023" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:12.024" starttime="20170707 01:58:12.022" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:12.024" starttime="20170707 01:58:12.021" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:12.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:12.024" starttime="20170707 01:58:11.760" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:12.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:12.025" starttime="20170707 01:58:12.025" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:58:12.026" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:58:12.026" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:58:12.026" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:58:12.026" starttime="20170707 01:58:12.025" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:12.026" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:58:12.026" starttime="20170707 01:58:11.759" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:12.026" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:58:12.027" starttime="20170707 01:58:11.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:58:12.027" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:58:12.027" starttime="20170707 01:58:12.027" status="FAIL"></status>
</kw>
<status endtime="20170707 01:58:12.027" starttime="20170707 01:58:11.758" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:22.033" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:22.033" starttime="20170707 01:58:22.032" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:22.034" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:22.034" starttime="20170707 01:58:22.033" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:22.034" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:22.034" starttime="20170707 01:58:22.034" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:22.035" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:22.035" starttime="20170707 01:58:22.035" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:22.218" starttime="20170707 01:58:22.036" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:22.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:22.218" starttime="20170707 01:58:22.035" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:22.219" starttime="20170707 01:58:22.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:22.220" starttime="20170707 01:58:22.219" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.220" starttime="20170707 01:58:22.031" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.220" starttime="20170707 01:58:22.031" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.220" starttime="20170707 01:58:22.030" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:22.220" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:58:22.220" starttime="20170707 01:58:22.220" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:22.223" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:22.223" starttime="20170707 01:58:22.222" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:22.223" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:22.224" starttime="20170707 01:58:22.223" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.224" starttime="20170707 01:58:22.223" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.224" starttime="20170707 01:58:22.221" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.224" starttime="20170707 01:58:22.221" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:22.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:58:22.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:22.289" starttime="20170707 01:58:22.224" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:22.291" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:22.291" starttime="20170707 01:58:22.291" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:22.293" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:22.293" starttime="20170707 01:58:22.292" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.293" starttime="20170707 01:58:22.291" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.293" starttime="20170707 01:58:22.290" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.293" starttime="20170707 01:58:22.290" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:22.293" starttime="20170707 01:58:22.029" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:22.294" starttime="20170707 01:58:22.293" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:58:22.294" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:58:22.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:58:22.294" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:58:22.295" starttime="20170707 01:58:22.294" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.295" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:58:22.295" starttime="20170707 01:58:22.029" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.295" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:58:22.295" starttime="20170707 01:58:22.029" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.296" level="FAIL">Off != Running</msg>
<status endtime="20170707 01:58:22.296" starttime="20170707 01:58:22.295" status="FAIL"></status>
</kw>
<status endtime="20170707 01:58:22.296" starttime="20170707 01:58:22.028" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:22.296" level="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status endtime="20170707 01:58:22.296" starttime="20170707 01:55:19.494" status="FAIL"></status>
</kw>
<status endtime="20170707 01:58:22.296" starttime="20170707 01:55:18.529" status="FAIL"></status>
</kw>
<status endtime="20170707 01:58:22.297" starttime="20170707 01:55:18.528" status="FAIL"></status>
</kw>
<status endtime="20170707 01:58:22.297" starttime="20170707 01:55:18.527" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:22.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:22.302" starttime="20170707 01:58:22.301" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:22.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:22.302" starttime="20170707 01:58:22.302" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:22.303" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:22.303" starttime="20170707 01:58:22.303" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:22.304" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:22.304" starttime="20170707 01:58:22.303" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.489" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:22.489" starttime="20170707 01:58:22.304" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.489" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:22.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:22.489" starttime="20170707 01:58:22.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:22.490" starttime="20170707 01:58:22.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:22.490" starttime="20170707 01:58:22.490" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.490" starttime="20170707 01:58:22.301" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.490" starttime="20170707 01:58:22.300" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.491" starttime="20170707 01:58:22.300" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:22.491" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170707 01:58:22.491" starttime="20170707 01:58:22.491" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:22.493" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:22.493" starttime="20170707 01:58:22.493" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:22.494" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170707 01:58:22.494" starttime="20170707 01:58:22.494" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.494" starttime="20170707 01:58:22.493" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.494" starttime="20170707 01:58:22.492" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.495" starttime="20170707 01:58:22.491" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:22.561" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170707 01:58:22.561" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:22.561" starttime="20170707 01:58:22.495" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170707 01:58:22.563" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:22.563" starttime="20170707 01:58:22.562" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170707 01:58:22.564" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170707 01:58:22.565" starttime="20170707 01:58:22.564" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.565" starttime="20170707 01:58:22.563" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.565" starttime="20170707 01:58:22.562" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:22.565" starttime="20170707 01:58:22.561" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:22.565" starttime="20170707 01:58:22.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:22.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:22.566" starttime="20170707 01:58:22.566" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170707 01:58:22.567" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:58:22.567" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170707 01:58:22.567" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170707 01:58:22.567" starttime="20170707 01:58:22.566" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.567" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170707 01:58:22.567" starttime="20170707 01:58:22.298" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.567" level="INFO">${host_state} = Running</msg>
<status endtime="20170707 01:58:22.567" starttime="20170707 01:58:22.298" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170707 01:58:22.568" level="FAIL">Running != Quiesced</msg>
<status endtime="20170707 01:58:22.569" starttime="20170707 01:58:22.568" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:22.569" level="INFO">${status} = False</msg>
<status endtime="20170707 01:58:22.569" starttime="20170707 01:58:22.568" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:22.569" level="INFO">${status} = False</msg>
<status endtime="20170707 01:58:22.569" starttime="20170707 01:58:22.298" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170707 01:58:22.597" level="INFO">Length is 9</msg>
<status endtime="20170707 01:58:22.597" starttime="20170707 01:58:22.597" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:58:22.604" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170707 01:58:25.613" level="INFO">${RC} = 0</msg>
<msg timestamp="20170707 01:58:25.614" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.53 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.730 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status endtime="20170707 01:58:25.614" starttime="20170707 01:58:22.597" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170707 01:58:25.627" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.53 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.730 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.81 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.645 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.645/1.182/1.817/0.506 ms</msg>
<status endtime="20170707 01:58:25.627" starttime="20170707 01:58:25.624" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170707 01:58:25.628" starttime="20170707 01:58:25.627" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.628" starttime="20170707 01:58:22.596" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:58:25.670" level="INFO">${cur_time} = 2017-07-07 01:58:25:667647</msg>
<status endtime="20170707 01:58:25.670" starttime="20170707 01:58:25.667" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:58:25.671" level="INFO">${cur_time} = 20170707015825667647</msg>
<status endtime="20170707 01:58:25.671" starttime="20170707 01:58:25.671" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.671" starttime="20170707 01:58:25.667" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:25.671" level="INFO">${FFDC_TIME} = 20170707015825667647</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170707 01:58:25.681" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170707 01:58:25.681" starttime="20170707 01:58:25.681" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170707 01:58:25.682" level="INFO">${suite_name} = 20170707015825667647_TestsTestBasicPoweron</msg>
<status endtime="20170707 01:58:25.682" starttime="20170707 01:58:25.681" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170707 01:58:25.682" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170707 01:58:25.682" starttime="20170707 01:58:25.682" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170707 01:58:25.683" level="INFO">${test_name} = 20170707015825667647_PowerOnTest</msg>
<status endtime="20170707 01:58:25.683" starttime="20170707 01:58:25.683" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.683" starttime="20170707 01:58:25.680" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:25.684" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/</msg>
<msg timestamp="20170707 01:58:25.684" level="INFO">${FFDC_PREFIX} = 20170707015825667647_</msg>
<msg timestamp="20170707 01:58:25.717" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.719" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.719" starttime="20170707 01:58:25.717" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:25.723" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.753" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.754" starttime="20170707 01:58:25.753" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.754" starttime="20170707 01:58:25.752" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.755" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.755" starttime="20170707 01:58:25.754" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.755" starttime="20170707 01:58:25.754" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.756" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.756" starttime="20170707 01:58:25.756" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.756" starttime="20170707 01:58:25.755" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.758" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.758" starttime="20170707 01:58:25.757" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.758" starttime="20170707 01:58:25.756" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.759" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.759" starttime="20170707 01:58:25.759" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.759" starttime="20170707 01:58:25.758" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.760" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.761" starttime="20170707 01:58:25.760" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.761" starttime="20170707 01:58:25.759" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.762" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.762" starttime="20170707 01:58:25.761" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.762" starttime="20170707 01:58:25.761" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.763" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.763" starttime="20170707 01:58:25.763" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.763" starttime="20170707 01:58:25.762" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.764" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.765" starttime="20170707 01:58:25.764" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.765" starttime="20170707 01:58:25.764" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.766" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.766" starttime="20170707 01:58:25.766" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.766" starttime="20170707 01:58:25.765" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.767" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.768" starttime="20170707 01:58:25.767" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.768" starttime="20170707 01:58:25.767" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.769" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.769" starttime="20170707 01:58:25.768" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.769" starttime="20170707 01:58:25.768" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:25.770" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:25.770" starttime="20170707 01:58:25.770" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.770" starttime="20170707 01:58:25.769" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:58:25.773" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:58:25.773" starttime="20170707 01:58:25.772" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:25.773" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:58:25.773" starttime="20170707 01:58:25.771" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:58:25.774" starttime="20170707 01:58:25.774" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.774" starttime="20170707 01:58:25.773" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:58:25.776" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:58:25.776" starttime="20170707 01:58:25.775" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:58:25.776" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:58:25.776" starttime="20170707 01:58:25.776" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:58:25.777" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:58:25.777" starttime="20170707 01:58:25.777" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:58:25.778" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:58:25.778" starttime="20170707 01:58:25.777" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.778" starttime="20170707 01:58:25.775" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.778" starttime="20170707 01:58:25.774" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:58:25.779" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:58:25.779" starttime="20170707 01:58:25.779" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:25.779" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:58:25.779" starttime="20170707 01:58:25.778" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:58:25.781" starttime="20170707 01:58:25.781" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:58:25.782" starttime="20170707 01:58:25.781" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.782" starttime="20170707 01:58:25.780" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:25.782" starttime="20170707 01:58:25.779" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:58:25.782" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:58:27.431" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:58:27.431" starttime="20170707 01:58:25.782" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.431" starttime="20170707 01:58:25.771" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:27.432" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170707 01:58:27.510" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:27.510" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170707 01:58:27.510" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:27.510" starttime="20170707 01:58:27.432" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170707 01:58:27.511" level="INFO">Length is 0</msg>
<status endtime="20170707 01:58:27.511" starttime="20170707 01:58:27.510" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170707 01:58:27.511" level="INFO">Length is 11</msg>
<status endtime="20170707 01:58:27.511" starttime="20170707 01:58:27.511" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:27.511" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170707 01:58:27.512" starttime="20170707 01:58:25.771" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.513" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.513" starttime="20170707 01:58:27.513" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.513" starttime="20170707 01:58:27.512" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.514" starttime="20170707 01:58:25.765" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.515" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.515" starttime="20170707 01:58:27.514" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.515" starttime="20170707 01:58:27.514" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 01:58:27.516" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170707 01:58:27.516" starttime="20170707 01:58:27.515" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.517" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.517" starttime="20170707 01:58:27.517" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.517" starttime="20170707 01:58:27.516" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.518" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.518" starttime="20170707 01:58:27.518" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.519" starttime="20170707 01:58:27.517" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.519" starttime="20170707 01:58:27.516" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.520" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.520" starttime="20170707 01:58:27.519" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.520" starttime="20170707 01:58:27.519" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.521" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.521" starttime="20170707 01:58:27.521" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.521" starttime="20170707 01:58:27.520" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.521" starttime="20170707 01:58:27.519" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.523" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.523" starttime="20170707 01:58:27.522" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.523" starttime="20170707 01:58:27.522" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.524" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.524" starttime="20170707 01:58:27.524" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.524" starttime="20170707 01:58:27.523" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.524" starttime="20170707 01:58:27.522" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.524" starttime="20170707 01:58:27.516" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:27.525" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:27.526" starttime="20170707 01:58:27.525" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.526" starttime="20170707 01:58:27.524" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.526" starttime="20170707 01:58:25.752" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 01:58:27.537" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170707 01:58:27.537" starttime="20170707 01:58:27.537" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170707 01:58:27.538" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect eSEL Log...</msg>
<status endtime="20170707 01:58:27.539" starttime="20170707 01:58:27.538" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170707 01:58:27.540" starttime="20170707 01:58:27.540" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:27.540" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | OS FFDC | Get Request FFDC | BMC Specific Files | SEL Log | Core Files ]</msg>
<status endtime="20170707 01:58:27.540" starttime="20170707 01:58:27.539" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170707 01:58:27.542" starttime="20170707 01:58:27.542" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:27.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:27.542" level="INFO">${ret_values} = None</msg>
<status endtime="20170707 01:58:27.542" starttime="20170707 01:58:27.541" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170707 01:58:27.543" starttime="20170707 01:58:27.543" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:58:27.592" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:58:27.592" starttime="20170707 01:58:27.591" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:27.592" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:58:27.592" starttime="20170707 01:58:27.591" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:58:27.593" starttime="20170707 01:58:27.593" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.593" starttime="20170707 01:58:27.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:58:27.594" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:58:27.595" starttime="20170707 01:58:27.594" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:58:27.595" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:58:27.595" starttime="20170707 01:58:27.595" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:58:27.596" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:58:27.596" starttime="20170707 01:58:27.595" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:58:27.597" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:58:27.597" starttime="20170707 01:58:27.596" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.597" starttime="20170707 01:58:27.594" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.597" starttime="20170707 01:58:27.593" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:58:27.598" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:58:27.598" starttime="20170707 01:58:27.597" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:27.598" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:58:27.598" starttime="20170707 01:58:27.597" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:58:27.600" starttime="20170707 01:58:27.600" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:58:27.600" starttime="20170707 01:58:27.600" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.601" starttime="20170707 01:58:27.599" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:27.601" starttime="20170707 01:58:27.598" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:58:27.601" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:58:29.253" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:58:29.253" starttime="20170707 01:58:27.601" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.254" starttime="20170707 01:58:27.590" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 01:58:29.254" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170707 01:58:29.254" starttime="20170707 01:58:29.254" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 01:58:29.256" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status endtime="20170707 01:58:29.256" starttime="20170707 01:58:29.255" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170707 01:58:29.263" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170707 01:58:29.263" starttime="20170707 01:58:29.256" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.267" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.268" starttime="20170707 01:58:29.267" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.268" starttime="20170707 01:58:29.266" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.269" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.269" starttime="20170707 01:58:29.269" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.269" starttime="20170707 01:58:29.268" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.271" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.271" starttime="20170707 01:58:29.270" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.271" starttime="20170707 01:58:29.270" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.272" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.272" starttime="20170707 01:58:29.271" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.272" starttime="20170707 01:58:29.271" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.272" starttime="20170707 01:58:29.265" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.272" starttime="20170707 01:58:29.265" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:29.273" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170707 01:58:29.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:29.330" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-84"
VERSION_ID="v1.99.7-84-g3da42c3"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170707 01:58:29.330" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:29.331" starttime="20170707 01:58:29.272" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.337" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.337" starttime="20170707 01:58:29.336" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.337" starttime="20170707 01:58:29.335" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.337" starttime="20170707 01:58:29.331" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.337" starttime="20170707 01:58:29.264" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.337" starttime="20170707 01:58:29.263" status="PASS"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.340" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.340" starttime="20170707 01:58:29.339" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.340" starttime="20170707 01:58:29.339" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.341" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.342" starttime="20170707 01:58:29.341" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.342" starttime="20170707 01:58:29.340" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.343" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.343" starttime="20170707 01:58:29.342" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.343" starttime="20170707 01:58:29.342" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.344" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.344" starttime="20170707 01:58:29.344" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.344" starttime="20170707 01:58:29.343" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.345" starttime="20170707 01:58:29.338" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.345" starttime="20170707 01:58:29.338" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:29.345" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170707 01:58:29.406" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170707 01:58:29.406" level="INFO">${stdout} = </msg>
<msg timestamp="20170707 01:58:29.406" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170707 01:58:29.406" starttime="20170707 01:58:29.345" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.414" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.414" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.413" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.406" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.337" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.337" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.263" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.255" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.415" starttime="20170707 01:58:29.255" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 01:58:29.416" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170707 01:58:29.416" starttime="20170707 01:58:29.416" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170707 01:58:29.417" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170707 01:58:29.417" starttime="20170707 01:58:29.417" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.421" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.421" starttime="20170707 01:58:29.420" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.421" starttime="20170707 01:58:29.420" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.422" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.422" starttime="20170707 01:58:29.422" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.422" starttime="20170707 01:58:29.421" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.423" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.423" starttime="20170707 01:58:29.423" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.424" starttime="20170707 01:58:29.422" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:29.425" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:29.425" starttime="20170707 01:58:29.424" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.425" starttime="20170707 01:58:29.424" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.425" starttime="20170707 01:58:29.419" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:29.425" starttime="20170707 01:58:29.418" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:29.426" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170707 01:58:30.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:30.765" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170707 01:58:30.765" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:30.765" starttime="20170707 01:58:29.425" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.772" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.772" starttime="20170707 01:58:30.772" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.773" starttime="20170707 01:58:30.771" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.773" starttime="20170707 01:58:30.766" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.773" starttime="20170707 01:58:29.418" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.773" starttime="20170707 01:58:29.417" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.773" starttime="20170707 01:58:29.417" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.773" starttime="20170707 01:58:29.416" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.773" starttime="20170707 01:58:29.415" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 01:58:30.774" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170707 01:58:30.774" starttime="20170707 01:58:30.774" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170707 01:58:30.775" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170707 01:58:30.775" starttime="20170707 01:58:30.774" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.780" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.780" starttime="20170707 01:58:30.779" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.780" starttime="20170707 01:58:30.779" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.781" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.781" starttime="20170707 01:58:30.781" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.781" starttime="20170707 01:58:30.780" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.783" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.783" starttime="20170707 01:58:30.782" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.783" starttime="20170707 01:58:30.782" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.784" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.784" starttime="20170707 01:58:30.783" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.784" starttime="20170707 01:58:30.783" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.784" starttime="20170707 01:58:30.778" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.784" starttime="20170707 01:58:30.776" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:30.785" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170707 01:58:30.870" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:30.871" level="INFO">${stdout} =  01:58:31 up 15 min,  load average: 0.18, 0.72, 0.82</msg>
<msg timestamp="20170707 01:58:30.871" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:30.871" starttime="20170707 01:58:30.784" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.879" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.879" starttime="20170707 01:58:30.878" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.879" starttime="20170707 01:58:30.877" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.879" starttime="20170707 01:58:30.871" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.879" starttime="20170707 01:58:30.775" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.879" starttime="20170707 01:58:30.775" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.882" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.882" starttime="20170707 01:58:30.882" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.882" starttime="20170707 01:58:30.881" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.883" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.883" starttime="20170707 01:58:30.883" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.884" starttime="20170707 01:58:30.882" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.885" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.885" starttime="20170707 01:58:30.884" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.885" starttime="20170707 01:58:30.884" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.912" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.912" starttime="20170707 01:58:30.912" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.913" starttime="20170707 01:58:30.885" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.913" starttime="20170707 01:58:30.881" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.913" starttime="20170707 01:58:30.880" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:30.913" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170707 01:58:30.970" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:30.970" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Thu Jul 6 21:19:14 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170707 01:58:30.970" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:30.970" starttime="20170707 01:58:30.913" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.976" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.976" starttime="20170707 01:58:30.975" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.976" starttime="20170707 01:58:30.975" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.976" starttime="20170707 01:58:30.970" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.976" starttime="20170707 01:58:30.879" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.976" starttime="20170707 01:58:30.879" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.979" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.980" starttime="20170707 01:58:30.979" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.980" starttime="20170707 01:58:30.978" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.981" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.981" starttime="20170707 01:58:30.980" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.981" starttime="20170707 01:58:30.980" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.982" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.982" starttime="20170707 01:58:30.982" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.982" starttime="20170707 01:58:30.981" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:30.984" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:30.984" starttime="20170707 01:58:30.983" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.984" starttime="20170707 01:58:30.982" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.984" starttime="20170707 01:58:30.978" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:30.984" starttime="20170707 01:58:30.977" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:30.984" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170707 01:58:31.070" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:31.070" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg timestamp="20170707 01:58:31.070" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:31.071" starttime="20170707 01:58:30.984" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:31.076" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:31.076" starttime="20170707 01:58:31.076" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.076" starttime="20170707 01:58:31.075" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.076" starttime="20170707 01:58:31.071" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:30.977" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:30.976" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:30.775" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:30.773" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:30.773" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:29.254" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:27.590" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:27.543" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:27.541" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.077" starttime="20170707 01:58:27.540" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170707 01:58:31.079" starttime="20170707 01:58:31.079" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:31.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:31.079" level="INFO">${ret_values} = None</msg>
<status endtime="20170707 01:58:31.079" starttime="20170707 01:58:31.078" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170707 01:58:31.080" starttime="20170707 01:58:31.080" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170707 01:58:31.141" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170707 01:58:31.141" starttime="20170707 01:58:31.140" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.141" starttime="20170707 01:58:31.140" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.141" starttime="20170707 01:58:31.080" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.141" starttime="20170707 01:58:31.077" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.141" starttime="20170707 01:58:31.077" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170707 01:58:31.143" starttime="20170707 01:58:31.143" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:31.143" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:31.143" level="INFO">${ret_values} = None</msg>
<status endtime="20170707 01:58:31.143" starttime="20170707 01:58:31.142" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170707 01:58:31.144" starttime="20170707 01:58:31.143" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:58:31.197" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:58:31.197" starttime="20170707 01:58:31.196" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:31.197" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:58:31.197" starttime="20170707 01:58:31.196" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:58:31.198" starttime="20170707 01:58:31.197" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.198" starttime="20170707 01:58:31.197" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:58:31.200" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:58:31.200" starttime="20170707 01:58:31.200" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:58:31.201" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:58:31.201" starttime="20170707 01:58:31.201" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:58:31.202" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:58:31.202" starttime="20170707 01:58:31.201" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:58:31.202" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:58:31.202" starttime="20170707 01:58:31.202" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.203" starttime="20170707 01:58:31.199" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.203" starttime="20170707 01:58:31.198" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:58:31.204" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:58:31.204" starttime="20170707 01:58:31.203" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:31.204" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:58:31.204" starttime="20170707 01:58:31.203" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:58:31.205" starttime="20170707 01:58:31.205" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:58:31.206" starttime="20170707 01:58:31.206" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.206" starttime="20170707 01:58:31.205" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:31.206" starttime="20170707 01:58:31.204" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:58:31.207" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:58:32.853" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:58:32.853" starttime="20170707 01:58:31.206" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:32.853" starttime="20170707 01:58:31.195" status="PASS"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 01:58:32.854" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170707 01:58:32.854" starttime="20170707 01:58:32.853" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 01:58:32.855" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170707 01:58:32.855" starttime="20170707 01:58:32.855" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:32.856" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_record_log.txt</msg>
<status endtime="20170707 01:58:32.856" starttime="20170707 01:58:32.856" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:32.860" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:32.860" starttime="20170707 01:58:32.859" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:32.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:32.861" starttime="20170707 01:58:32.860" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:32.861" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:32.861" starttime="20170707 01:58:32.861" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:32.862" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:32.862" starttime="20170707 01:58:32.861" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.045" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:33.045" starttime="20170707 01:58:32.862" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:33.045" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:33.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:33.045" starttime="20170707 01:58:32.862" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:33.046" starttime="20170707 01:58:33.045" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:33.046" starttime="20170707 01:58:33.046" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.047" starttime="20170707 01:58:32.858" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.047" starttime="20170707 01:58:32.858" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.047" starttime="20170707 01:58:32.857" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:33.047" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170707 01:58:33.047" starttime="20170707 01:58:33.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170707 01:58:33.048" starttime="20170707 01:58:33.048" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:33.093" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 01:58:33.093" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:33.093" starttime="20170707 01:58:33.048" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170707 01:58:33.094" starttime="20170707 01:58:33.093" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:33.094" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:33.094" starttime="20170707 01:58:32.857" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 01:58:33.095" level="FAIL">404 != 200</msg>
<status endtime="20170707 01:58:33.095" starttime="20170707 01:58:33.095" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:33.095" level="INFO">${status} = False</msg>
<status endtime="20170707 01:58:33.095" starttime="20170707 01:58:33.094" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170707 01:58:33.096" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170707 01:58:33.096" starttime="20170707 01:58:33.096" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.096" starttime="20170707 01:58:33.096" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.097" starttime="20170707 01:58:32.856" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:33.097" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_led.txt</msg>
<status endtime="20170707 01:58:33.097" starttime="20170707 01:58:33.097" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:33.100" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:33.101" starttime="20170707 01:58:33.100" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:33.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:33.101" starttime="20170707 01:58:33.101" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:33.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:33.102" starttime="20170707 01:58:33.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:33.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:33.103" starttime="20170707 01:58:33.102" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:33.310" starttime="20170707 01:58:33.103" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:33.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:33.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:33.310" starttime="20170707 01:58:33.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.311" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:33.311" starttime="20170707 01:58:33.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:33.312" starttime="20170707 01:58:33.311" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.312" starttime="20170707 01:58:33.100" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.312" starttime="20170707 01:58:33.099" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.312" starttime="20170707 01:58:33.098" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:33.313" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170707 01:58:33.313" starttime="20170707 01:58:33.312" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170707 01:58:33.313" starttime="20170707 01:58:33.313" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:33.358" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 01:58:33.358" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:33.358" starttime="20170707 01:58:33.314" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170707 01:58:33.358" starttime="20170707 01:58:33.358" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:33.359" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:33.359" starttime="20170707 01:58:33.098" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 01:58:33.360" level="FAIL">404 != 200</msg>
<status endtime="20170707 01:58:33.360" starttime="20170707 01:58:33.359" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:33.360" level="INFO">${status} = False</msg>
<status endtime="20170707 01:58:33.360" starttime="20170707 01:58:33.359" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170707 01:58:33.361" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170707 01:58:33.361" starttime="20170707 01:58:33.361" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.361" starttime="20170707 01:58:33.360" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.361" starttime="20170707 01:58:33.097" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:33.362" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_inventory.txt</msg>
<status endtime="20170707 01:58:33.362" starttime="20170707 01:58:33.361" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:33.365" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:33.365" starttime="20170707 01:58:33.365" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:33.366" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:33.366" starttime="20170707 01:58:33.365" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:33.366" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:33.366" starttime="20170707 01:58:33.366" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:33.367" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:33.367" starttime="20170707 01:58:33.367" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.570" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:33.570" starttime="20170707 01:58:33.368" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:33.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:33.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:33.570" starttime="20170707 01:58:33.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:33.571" starttime="20170707 01:58:33.570" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:33.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:33.572" starttime="20170707 01:58:33.571" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.572" starttime="20170707 01:58:33.364" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.572" starttime="20170707 01:58:33.363" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:33.572" starttime="20170707 01:58:33.363" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:33.573" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170707 01:58:33.573" starttime="20170707 01:58:33.572" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170707 01:58:33.573" starttime="20170707 01:58:33.573" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:35.275" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 01:58:35.276" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:35.276" starttime="20170707 01:58:33.574" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170707 01:58:35.276" starttime="20170707 01:58:35.276" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:35.277" starttime="20170707 01:58:33.362" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:35.278" starttime="20170707 01:58:35.277" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.278" level="INFO">${status} = True</msg>
<status endtime="20170707 01:58:35.278" starttime="20170707 01:58:35.277" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170707 01:58:35.278" starttime="20170707 01:58:35.278" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170707 01:58:35.282" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:58:35.283" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170707 01:58:35.283" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170707 01:58:35.283" starttime="20170707 01:58:35.279" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:35.285" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_inventory.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:35.285" starttime="20170707 01:58:35.284" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.285" starttime="20170707 01:58:35.283" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.285" starttime="20170707 01:58:33.361" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:35.286" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_sensor_list.txt</msg>
<status endtime="20170707 01:58:35.286" starttime="20170707 01:58:35.286" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:35.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:35.289" starttime="20170707 01:58:35.289" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:35.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:35.290" starttime="20170707 01:58:35.290" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:35.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:35.291" starttime="20170707 01:58:35.290" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:35.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:35.291" starttime="20170707 01:58:35.291" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:35.501" starttime="20170707 01:58:35.292" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:35.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:35.501" starttime="20170707 01:58:35.292" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:35.502" starttime="20170707 01:58:35.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:35.503" starttime="20170707 01:58:35.502" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.503" starttime="20170707 01:58:35.288" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.503" starttime="20170707 01:58:35.288" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.503" starttime="20170707 01:58:35.287" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:35.503" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170707 01:58:35.504" starttime="20170707 01:58:35.503" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170707 01:58:35.504" starttime="20170707 01:58:35.504" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:35.731" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 01:58:35.731" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:35.731" starttime="20170707 01:58:35.504" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170707 01:58:35.732" starttime="20170707 01:58:35.731" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:35.732" starttime="20170707 01:58:35.286" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:35.733" starttime="20170707 01:58:35.733" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.733" level="INFO">${status} = True</msg>
<status endtime="20170707 01:58:35.733" starttime="20170707 01:58:35.732" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170707 01:58:35.734" starttime="20170707 01:58:35.733" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170707 01:58:35.734" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170707 01:58:35.735" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170707 01:58:35.735" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170707 01:58:35.735" starttime="20170707 01:58:35.734" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:35.736" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_sensor_list.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:35.737" starttime="20170707 01:58:35.736" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.737" starttime="20170707 01:58:35.735" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.737" starttime="20170707 01:58:35.285" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:35.737" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_elog.txt</msg>
<status endtime="20170707 01:58:35.737" starttime="20170707 01:58:35.737" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:35.740" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:35.741" starttime="20170707 01:58:35.740" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:35.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:35.741" starttime="20170707 01:58:35.741" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:35.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:35.742" starttime="20170707 01:58:35.741" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:35.742" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:35.742" starttime="20170707 01:58:35.742" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.921" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:35.922" starttime="20170707 01:58:35.743" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:35.922" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:35.922" starttime="20170707 01:58:35.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.922" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:35.922" starttime="20170707 01:58:35.922" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:35.923" starttime="20170707 01:58:35.923" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.923" starttime="20170707 01:58:35.739" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.923" starttime="20170707 01:58:35.739" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.923" starttime="20170707 01:58:35.738" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:35.924" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170707 01:58:35.924" starttime="20170707 01:58:35.924" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170707 01:58:35.925" starttime="20170707 01:58:35.924" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:35.969" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170707 01:58:35.969" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:35.969" starttime="20170707 01:58:35.925" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170707 01:58:35.970" starttime="20170707 01:58:35.969" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.970" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:35.970" starttime="20170707 01:58:35.738" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:35.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 01:58:35.971" level="FAIL">404 != 200</msg>
<status endtime="20170707 01:58:35.971" starttime="20170707 01:58:35.971" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:35.971" level="INFO">${status} = False</msg>
<status endtime="20170707 01:58:35.971" starttime="20170707 01:58:35.970" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170707 01:58:35.973" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:35.972" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:35.972" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:35.737" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:32.856" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:32.855" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:32.854" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:32.854" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:31.195" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:31.144" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:31.141" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:35.973" starttime="20170707 01:58:31.141" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170707 01:58:35.975" starttime="20170707 01:58:35.975" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:35.975" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:35.975" level="INFO">${ret_values} = None</msg>
<status endtime="20170707 01:58:35.975" starttime="20170707 01:58:35.974" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170707 01:58:35.976" starttime="20170707 01:58:35.976" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:58:36.020" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:58:36.020" starttime="20170707 01:58:36.020" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:36.020" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:58:36.020" starttime="20170707 01:58:36.019" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:58:36.022" starttime="20170707 01:58:36.021" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:36.022" starttime="20170707 01:58:36.021" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:58:36.023" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:58:36.023" starttime="20170707 01:58:36.023" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:58:36.024" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:58:36.024" starttime="20170707 01:58:36.023" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:58:36.024" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:58:36.024" starttime="20170707 01:58:36.024" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:58:36.025" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:58:36.025" starttime="20170707 01:58:36.024" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:36.025" starttime="20170707 01:58:36.022" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:36.025" starttime="20170707 01:58:36.022" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:58:36.026" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:58:36.026" starttime="20170707 01:58:36.026" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:36.026" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:58:36.026" starttime="20170707 01:58:36.025" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:58:36.028" starttime="20170707 01:58:36.028" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:58:36.029" starttime="20170707 01:58:36.028" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:36.029" starttime="20170707 01:58:36.027" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:36.029" starttime="20170707 01:58:36.027" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:58:36.029" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:58:37.677" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:58:37.677" starttime="20170707 01:58:36.029" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:37.677" starttime="20170707 01:58:36.019" status="PASS"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170707 01:58:37.678" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170707 01:58:37.678" starttime="20170707 01:58:37.678" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170707 01:58:37.679" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') ]</msg>
<status endtime="20170707 01:58:37.679" starttime="20170707 01:58:37.679" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:37.680" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_proc_list.txt</msg>
<status endtime="20170707 01:58:37.680" starttime="20170707 01:58:37.680" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170707 01:58:37.682" starttime="20170707 01:58:37.681" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:37.682" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170707 01:58:37.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:37.982" level="INFO">${stdout} = Mem: 158428K used, 273904K free, 14688K shrd, 10904K buff, 51104K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.23 0.72 0.82 1/145 1914
  PID  PPID USER  ...</msg>
<msg timestamp="20170707 01:58:37.982" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:37.982" starttime="20170707 01:58:37.682" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:37.988" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_proc_list.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:37.989" starttime="20170707 01:58:37.988" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:37.989" starttime="20170707 01:58:37.987" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:37.989" starttime="20170707 01:58:37.982" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:37.989" starttime="20170707 01:58:37.680" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:37.989" starttime="20170707 01:58:37.680" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:37.990" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_procinfo.txt</msg>
<status endtime="20170707 01:58:37.990" starttime="20170707 01:58:37.989" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170707 01:58:37.991" starttime="20170707 01:58:37.991" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:37.992" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170707 01:58:38.109" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:38.109" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170707 01:58:38.109" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:38.110" starttime="20170707 01:58:37.992" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:38.116" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_procinfo.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:38.117" starttime="20170707 01:58:38.115" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.118" starttime="20170707 01:58:38.115" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.118" starttime="20170707 01:58:38.110" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.118" starttime="20170707 01:58:37.990" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.118" starttime="20170707 01:58:37.989" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:38.119" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_dmesg.txt</msg>
<status endtime="20170707 01:58:38.119" starttime="20170707 01:58:38.118" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170707 01:58:38.120" starttime="20170707 01:58:38.120" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:38.121" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170707 01:58:38.207" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:38.207" level="INFO">${stdout} = [    4.720000] usbcore: registered new interface driver usbhid
[    4.730000] usbhid: USB HID core driver
[    4.730000] bmp280: probe of 3-0077 failed with error -5
[    4.750000] dps310 3-0076: iio:...</msg>
<msg timestamp="20170707 01:58:38.207" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:38.207" starttime="20170707 01:58:38.120" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:38.214" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_dmesg.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:38.214" starttime="20170707 01:58:38.213" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.214" starttime="20170707 01:58:38.212" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.214" starttime="20170707 01:58:38.208" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.214" starttime="20170707 01:58:38.119" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:38.214" starttime="20170707 01:58:38.118" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:38.215" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_journalctl.txt</msg>
<status endtime="20170707 01:58:38.215" starttime="20170707 01:58:38.215" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170707 01:58:38.216" starttime="20170707 01:58:38.216" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:38.217" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170707 01:58:40.973" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:40.975" level="INFO">${stdout} = -- Logs begin at Fri 2017-07-07 01:43:31 UTC, end at Fri 2017-07-07 01:58:37 UTC. --
Jul 07 01:43:31 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 07 01:43:31 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170707 01:58:40.975" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:40.975" starttime="20170707 01:58:38.217" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:40.984" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_journalctl.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:40.984" starttime="20170707 01:58:40.982" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:40.984" starttime="20170707 01:58:40.980" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:40.984" starttime="20170707 01:58:40.975" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:40.984" starttime="20170707 01:58:38.215" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:40.985" starttime="20170707 01:58:38.214" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170707 01:58:40.985" level="INFO">${logpath} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_meminfo.txt</msg>
<status endtime="20170707 01:58:40.985" starttime="20170707 01:58:40.985" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170707 01:58:40.987" starttime="20170707 01:58:40.986" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170707 01:58:40.987" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170707 01:58:41.072" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170707 01:58:41.073" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          273656 kB
MemAvailable:     318164 kB
Buffers:           10904 kB
Cached:            51108 kB
SwapCached:            0 kB
Active:           106824 kB
Inac...</msg>
<msg timestamp="20170707 01:58:41.073" level="INFO">${stderr} = </msg>
<status endtime="20170707 01:58:41.073" starttime="20170707 01:58:40.987" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:41.079" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_meminfo.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/20170707015825667647_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:41.078" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:41.077" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:41.073" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:40.986" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:40.985" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:37.679" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:37.678" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:37.678" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:37.678" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:36.018" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.079" starttime="20170707 01:58:35.976" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.080" starttime="20170707 01:58:35.974" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.080" starttime="20170707 01:58:35.974" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170707 01:58:41.081" starttime="20170707 01:58:41.081" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:41.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:41.082" level="INFO">${ret_values} = None</msg>
<status endtime="20170707 01:58:41.082" starttime="20170707 01:58:41.081" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170707 01:58:41.082" starttime="20170707 01:58:41.082" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170707 01:58:41.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170707 01:58:41.132" starttime="20170707 01:58:41.131" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170707 01:58:41.132" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170707 01:58:41.132" starttime="20170707 01:58:41.132" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170707 01:58:41.133" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170707 01:58:41.133" starttime="20170707 01:58:41.133" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170707 01:58:41.134" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170707 01:58:41.134" starttime="20170707 01:58:41.133" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170707 01:58:41.315" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170707 01:58:41.315" starttime="20170707 01:58:41.134" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:41.315" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:41.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170707 01:58:41.315" starttime="20170707 01:58:41.134" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170707 01:58:41.316" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:41.316" starttime="20170707 01:58:41.316" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:41.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170707 01:58:41.317" starttime="20170707 01:58:41.316" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.317" starttime="20170707 01:58:41.131" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.317" starttime="20170707 01:58:41.130" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.317" starttime="20170707 01:58:41.129" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170707 01:58:41.318" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170707 01:58:41.318" starttime="20170707 01:58:41.317" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170707 01:58:41.318" starttime="20170707 01:58:41.318" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170707 01:58:41.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170707 01:58:41.366" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:41.366" starttime="20170707 01:58:41.318" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170707 01:58:41.366" starttime="20170707 01:58:41.366" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:41.366" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170707 01:58:41.367" starttime="20170707 01:58:41.129" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170707 01:58:41.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170707 01:58:41.369" level="FAIL">404 != 200</msg>
<status endtime="20170707 01:58:41.369" starttime="20170707 01:58:41.367" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:41.369" level="INFO">${status} = False</msg>
<status endtime="20170707 01:58:41.369" starttime="20170707 01:58:41.367" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170707 01:58:41.370" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170707 01:58:41.370" starttime="20170707 01:58:41.369" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.370" starttime="20170707 01:58:41.128" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.370" starttime="20170707 01:58:41.082" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.370" starttime="20170707 01:58:41.080" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.370" starttime="20170707 01:58:41.080" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170707 01:58:41.372" starttime="20170707 01:58:41.372" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:41.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170707 01:58:41.372" level="INFO">${ret_values} = None</msg>
<status endtime="20170707 01:58:41.372" starttime="20170707 01:58:41.371" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170707 01:58:41.373" starttime="20170707 01:58:41.373" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170707 01:58:41.418" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170707 01:58:41.418" starttime="20170707 01:58:41.417" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:41.418" level="INFO">${has_host} = False</msg>
<status endtime="20170707 01:58:41.418" starttime="20170707 01:58:41.417" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170707 01:58:41.419" starttime="20170707 01:58:41.419" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.419" starttime="20170707 01:58:41.418" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170707 01:58:41.423" level="INFO">${port_num} = 22</msg>
<status endtime="20170707 01:58:41.424" starttime="20170707 01:58:41.423" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170707 01:58:41.424" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170707 01:58:41.424" starttime="20170707 01:58:41.424" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170707 01:58:41.425" level="INFO">${https_num} = 443</msg>
<status endtime="20170707 01:58:41.425" starttime="20170707 01:58:41.424" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170707 01:58:41.425" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170707 01:58:41.425" starttime="20170707 01:58:41.425" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.426" starttime="20170707 01:58:41.420" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.426" starttime="20170707 01:58:41.419" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170707 01:58:41.427" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170707 01:58:41.427" starttime="20170707 01:58:41.426" status="FAIL"></status>
</kw>
<msg timestamp="20170707 01:58:41.427" level="INFO">${has_port} = False</msg>
<status endtime="20170707 01:58:41.427" starttime="20170707 01:58:41.426" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170707 01:58:41.429" starttime="20170707 01:58:41.429" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170707 01:58:41.430" starttime="20170707 01:58:41.429" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.430" starttime="20170707 01:58:41.428" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:41.430" starttime="20170707 01:58:41.427" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170707 01:58:41.430" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170707 01:58:43.087" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170707 01:58:43.088" starttime="20170707 01:58:41.430" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.088" starttime="20170707 01:58:41.416" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170707 01:58:43.088" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170707 01:58:43.146" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170707 01:58:43.147" level="INFO">${core_files} = </msg>
<status endtime="20170707 01:58:43.147" starttime="20170707 01:58:43.088" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170707 01:58:43.147" level="INFO">@{core_list} = [ ]</msg>
<status endtime="20170707 01:58:43.147" starttime="20170707 01:58:43.147" status="PASS"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170707 01:58:43.157" starttime="20170707 01:58:43.148" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170707 01:58:43.828" starttime="20170707 01:58:43.159" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.828" starttime="20170707 01:58:43.159" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.828" starttime="20170707 01:58:43.158" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.828" starttime="20170707 01:58:43.147" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:43.828" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:41.416" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:41.373" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:41.371" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:41.370" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:27.540" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:27.538" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:27.537" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.829" starttime="20170707 01:58:27.537" status="PASS"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170707 01:58:43.982" starttime="20170707 01:58:43.830" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.982" starttime="20170707 01:58:27.536" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.982" starttime="20170707 01:58:22.570" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:43.983" starttime="20170707 01:58:22.569" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170707 01:58:43.983" starttime="20170707 01:58:43.983" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170707 01:58:43.992" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170707 01:58:43.992" starttime="20170707 01:58:43.984" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170707 01:58:43.993" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/21959/obmc-robot/logs/20170707015825667647_TestsTestBasicPoweron/20170707015825667647_PowerOnTest/</msg>
<status endtime="20170707 01:58:43.993" starttime="20170707 01:58:43.993" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170707 01:58:43.994" starttime="20170707 01:58:43.993" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170707 01:58:43.994" starttime="20170707 01:58:43.994" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:43.995" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs"&gt;/tmp/fspcibld/21959/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170707 01:58:43.995" starttime="20170707 01:58:43.995" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:43.996" level="INFO">File '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170707 01:58:43.996" starttime="20170707 01:58:43.996" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:43.996" level="INFO">${exist} = True</msg>
<status endtime="20170707 01:58:43.996" starttime="20170707 01:58:43.995" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170707 01:58:43.997" starttime="20170707 01:58:43.996" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170707 01:58:43.997" starttime="20170707 01:58:43.997" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:58:43.999" level="INFO">${cur_time} = 2017-07-07 01:58:43:998407</msg>
<status endtime="20170707 01:58:43.999" starttime="20170707 01:58:43.998" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170707 01:58:43.999" level="INFO">${cur_time} = 20170707015843998407</msg>
<status endtime="20170707 01:58:43.999" starttime="20170707 01:58:43.999" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:43.999" level="INFO">${cur_time} = 20170707015843998407</msg>
<status endtime="20170707 01:58:43.999" starttime="20170707 01:58:43.998" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:44.000" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21959/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:44.001" starttime="20170707 01:58:44.000" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:44.001" starttime="20170707 01:58:43.983" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:44.001" starttime="20170707 01:58:22.297" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170707 01:58:44.002" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:58:44.002" starttime="20170707 01:58:44.002" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170707 01:58:44.003" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:58:44.003" starttime="20170707 01:58:44.003" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:44.004" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170707 01:58:44.004" starttime="20170707 01:58:44.002" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:58:44.005" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170707 01:58:44.005" starttime="20170707 01:58:44.004" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:58:44.005" starttime="20170707 01:58:44.005" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:58:44.012" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170707 01:58:44.016" level="INFO">${rc} = 0</msg>
<msg timestamp="20170707 01:58:44.016" level="INFO">${output} = /tmp/fspcibld/21959/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170707 01:58:44.016" starttime="20170707 01:58:44.005" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170707 01:58:44.019" starttime="20170707 01:58:44.018" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170707 01:58:44.020" starttime="20170707 01:58:44.019" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:58:44.021" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170707 01:58:44.021" starttime="20170707 01:58:44.021" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:44.022" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170707 01:58:44.022" starttime="20170707 01:58:44.004" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:58:44.023" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170707 01:58:44.023" starttime="20170707 01:58:44.022" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:58:44.024" starttime="20170707 01:58:44.023" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170707 01:58:44.029" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170707 01:58:44.043" level="INFO">${rc} = 0</msg>
<msg timestamp="20170707 01:58:44.043" level="INFO">${os_con_pid} = </msg>
<status endtime="20170707 01:58:44.043" starttime="20170707 01:58:44.024" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170707 01:58:44.046" starttime="20170707 01:58:44.045" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170707 01:58:44.047" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170707 01:58:44.047" starttime="20170707 01:58:44.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170707 01:58:44.050" starttime="20170707 01:58:44.048" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:58:44.050" level="INFO">${rc} = None</msg>
<msg timestamp="20170707 01:58:44.051" level="INFO">${output} = None</msg>
<status endtime="20170707 01:58:44.051" starttime="20170707 01:58:44.050" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170707 01:58:44.051" starttime="20170707 01:58:44.051" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170707 01:58:44.056" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/21959/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/21959/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170707 01:58:44.056" starttime="20170707 01:58:44.053" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:44.056" starttime="20170707 01:58:44.052" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:44.056" starttime="20170707 01:58:44.052" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170707 01:58:44.056" level="INFO">${output} = </msg>
<status endtime="20170707 01:58:44.056" starttime="20170707 01:58:44.056" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170707 01:58:44.057" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170707 01:58:44.057" starttime="20170707 01:58:44.057" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170707 01:58:44.117" starttime="20170707 01:58:44.058" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:44.125" level="INFO">${rc} = 0</msg>
<msg timestamp="20170707 01:58:44.126" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [2...</msg>
<status endtime="20170707 01:58:44.126" starttime="20170707 01:58:44.057" status="PASS"></status>
</kw>
<msg timestamp="20170707 01:58:44.127" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [2...</msg>
<status endtime="20170707 01:58:44.128" starttime="20170707 01:58:44.001" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170707 01:58:44.130" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadreboot[   47.108435536,5] IPMI: Soft shutdown requested
The system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   32.108511] kexec_core: Starting new kernel
[   51.007062608,5] OPAL: Switch to big-endian OS
[   51.086521648,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    1.659013] Unable to open file: /etc/keys/x509_ima.der (-2)
[    1.659019] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[49m[2J[-1;-1f[?25h
Ubuntu 17.04 ws017p1 hvc0

ws017p1 login: </msg>
<status endtime="20170707 01:58:44.130" starttime="20170707 01:58:44.129" status="PASS"></status>
</kw>
<status endtime="20170707 01:58:44.130" starttime="20170707 01:58:22.297" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170707 01:58:44.130" starttime="20170707 01:55:17.628" critical="yes" status="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170707 01:58:44.132" starttime="20170707 01:55:17.595" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170707 01:58:44.136" starttime="20170707 01:55:10.708" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
