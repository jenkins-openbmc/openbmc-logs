<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161208 13:12:57.265" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/tmp/root/27234/obmc-robot/tests" name="Tests" id="s1">
<suite source="/tmp/root/27234/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/root/27234/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:12:57.873">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:12:57.873" status="PASS" endtime="20161208 13:12:57.873"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:57.874">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:12:57.873" status="PASS" endtime="20161208 13:12:57.874"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:57.875">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:12:57.874" status="PASS" endtime="20161208 13:12:57.875"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:57.875">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:12:57.875" status="PASS" endtime="20161208 13:12:57.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:58.621">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:12:58.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:12:57.875" status="PASS" endtime="20161208 13:12:58.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:12:58.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:12:58.622" status="PASS" endtime="20161208 13:12:58.622"></status>
</kw>
<status starttime="20161208 13:12:57.872" status="PASS" endtime="20161208 13:12:58.623"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 13:12:58.624" status="PASS" endtime="20161208 13:12:58.628"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:12:58.630">Created directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs"&gt;/tmp/root/27234/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20161208 13:12:58.629" status="PASS" endtime="20161208 13:12:58.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:12:58.631">File '/tmp/root/27234/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20161208 13:12:58.631" status="FAIL" endtime="20161208 13:12:58.632"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:12:58.632">${exist} = False</msg>
<status starttime="20161208 13:12:58.630" status="PASS" endtime="20161208 13:12:58.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:12:58.635">Created file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:12:58.635" status="PASS" endtime="20161208 13:12:58.635"></status>
</kw>
<status starttime="20161208 13:12:58.632" status="PASS" endtime="20161208 13:12:58.635"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:58.636">${cur_time} = 2016-12-08 13:12:58:635684</msg>
<status starttime="20161208 13:12:58.636" status="PASS" endtime="20161208 13:12:58.636"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:58.636">${cur_time} = 20161208131258635684</msg>
<status starttime="20161208 13:12:58.636" status="PASS" endtime="20161208 13:12:58.636"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:12:58.637">${cur_time} = 20161208131258635684</msg>
<status starttime="20161208 13:12:58.635" status="PASS" endtime="20161208 13:12:58.637"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:12:58.637">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:12:58.637" status="PASS" endtime="20161208 13:12:58.637"></status>
</kw>
<status starttime="20161208 13:12:58.629" status="PASS" endtime="20161208 13:12:58.637"></status>
</kw>
<status starttime="20161208 13:12:58.623" status="PASS" endtime="20161208 13:12:58.638"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" starttime="20161208 13:12:57.872" status="PASS" endtime="20161208 13:12:58.638"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161208 13:12:58.639">Delete All Sessions</msg>
<status starttime="20161208 13:12:58.638" status="PASS" endtime="20161208 13:12:58.639"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20161208 13:12:57.294" status="PASS" endtime="20161208 13:12:58.639"></status>
</suite>
<status starttime="20161208 13:12:57.292" status="PASS" endtime="20161208 13:12:58.641"></status>
</suite>
<suite source="/tmp/root/27234/obmc-robot/tests/test_association.robot" name="Test Association" id="s1-s2">
<kw type="setup" name="Suite Initialization Setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:12:58.673">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:12:58.673" status="FAIL" endtime="20161208 13:12:58.673"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:12:58.674">${has_host} = False</msg>
<status starttime="20161208 13:12:58.673" status="PASS" endtime="20161208 13:12:58.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:12:58.678" status="PASS" endtime="20161208 13:12:58.679"></status>
</kw>
<status starttime="20161208 13:12:58.674" status="PASS" endtime="20161208 13:12:58.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:58.682">${port_num} = 22</msg>
<status starttime="20161208 13:12:58.682" status="PASS" endtime="20161208 13:12:58.683"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:58.683">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:12:58.683" status="PASS" endtime="20161208 13:12:58.683"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:12:58.683">${https_num} = 443</msg>
<status starttime="20161208 13:12:58.683" status="PASS" endtime="20161208 13:12:58.683"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:12:58.684">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:12:58.684" status="PASS" endtime="20161208 13:12:58.684"></status>
</kw>
<status starttime="20161208 13:12:58.682" status="PASS" endtime="20161208 13:12:58.684"></status>
</kw>
<status starttime="20161208 13:12:58.679" status="PASS" endtime="20161208 13:12:58.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:12:58.685">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:12:58.685" status="FAIL" endtime="20161208 13:12:58.685"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:12:58.685">${has_port} = False</msg>
<status starttime="20161208 13:12:58.685" status="PASS" endtime="20161208 13:12:58.685"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:12:58.689" status="PASS" endtime="20161208 13:12:58.689"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:12:58.690" status="PASS" endtime="20161208 13:12:58.690"></status>
</kw>
<status starttime="20161208 13:12:58.689" status="PASS" endtime="20161208 13:12:58.690"></status>
</kw>
<status starttime="20161208 13:12:58.686" status="PASS" endtime="20161208 13:12:58.690"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:12:58.691">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:13:01.028">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:12:58.690" status="PASS" endtime="20161208 13:13:01.029"></status>
</kw>
<status starttime="20161208 13:12:58.672" status="PASS" endtime="20161208 13:13:01.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.033">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161208 13:13:01.032" status="PASS" endtime="20161208 13:13:01.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:01.033" status="PASS" endtime="20161208 13:13:01.034"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:01.034" status="PASS" endtime="20161208 13:13:01.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.042">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:01.041" status="PASS" endtime="20161208 13:13:01.042"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:01.043">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:01.042" status="PASS" endtime="20161208 13:13:01.043"></status>
</kw>
<status starttime="20161208 13:13:01.042" status="PASS" endtime="20161208 13:13:01.043"></status>
</kw>
<status starttime="20161208 13:13:01.040" status="PASS" endtime="20161208 13:13:01.043"></status>
</kw>
<status starttime="20161208 13:13:01.035" status="PASS" endtime="20161208 13:13:01.043"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:01.044">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:01.044" status="PASS" endtime="20161208 13:13:01.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.045">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:01.045" status="PASS" endtime="20161208 13:13:01.045"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.045">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:01.045" status="PASS" endtime="20161208 13:13:01.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.046">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:01.046" status="PASS" endtime="20161208 13:13:01.046"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.379">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:01.380">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:01.046" status="PASS" endtime="20161208 13:13:01.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:01.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:01.380" status="PASS" endtime="20161208 13:13:01.381"></status>
</kw>
<status starttime="20161208 13:13:01.043" status="PASS" endtime="20161208 13:13:01.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.662">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:01.662">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:01.381" status="PASS" endtime="20161208 13:13:01.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.671">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:01.669" status="PASS" endtime="20161208 13:13:01.671"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:01.673">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:01.672" status="PASS" endtime="20161208 13:13:01.673"></status>
</kw>
<status starttime="20161208 13:13:01.672" status="PASS" endtime="20161208 13:13:01.673"></status>
</kw>
<status starttime="20161208 13:13:01.668" status="PASS" endtime="20161208 13:13:01.673"></status>
</kw>
<status starttime="20161208 13:13:01.663" status="PASS" endtime="20161208 13:13:01.674"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:01.674">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:01.031" status="PASS" endtime="20161208 13:13:01.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:01.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:01.674" status="PASS" endtime="20161208 13:13:01.675"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.677">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 13:13:01.676" status="PASS" endtime="20161208 13:13:01.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.683">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:13:01.683" status="PASS" endtime="20161208 13:13:01.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:01.684">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:13:01.684" status="PASS" endtime="20161208 13:13:01.685"></status>
</kw>
<status starttime="20161208 13:13:01.684" status="PASS" endtime="20161208 13:13:01.685"></status>
</kw>
<status starttime="20161208 13:13:01.682" status="PASS" endtime="20161208 13:13:01.685"></status>
</kw>
<status starttime="20161208 13:13:01.678" status="PASS" endtime="20161208 13:13:01.685"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:01.686">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:01.685" status="PASS" endtime="20161208 13:13:01.686"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.687">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:01.686" status="PASS" endtime="20161208 13:13:01.687"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.687">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:01.687" status="PASS" endtime="20161208 13:13:01.687"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:01.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:01.687" status="PASS" endtime="20161208 13:13:01.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:02.112">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:01.688" status="PASS" endtime="20161208 13:13:02.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:02.113" status="PASS" endtime="20161208 13:13:02.114"></status>
</kw>
<status starttime="20161208 13:13:01.685" status="PASS" endtime="20161208 13:13:02.114"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.177">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:02.177">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:02.115" status="PASS" endtime="20161208 13:13:02.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.184">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:02.183" status="PASS" endtime="20161208 13:13:02.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.185">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:02.185" status="PASS" endtime="20161208 13:13:02.185"></status>
</kw>
<status starttime="20161208 13:13:02.184" status="PASS" endtime="20161208 13:13:02.185"></status>
</kw>
<status starttime="20161208 13:13:02.183" status="PASS" endtime="20161208 13:13:02.186"></status>
</kw>
<status starttime="20161208 13:13:02.178" status="PASS" endtime="20161208 13:13:02.186"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:02.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:01.675" status="PASS" endtime="20161208 13:13:02.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.187">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:02.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:02.187">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:02.186" status="PASS" endtime="20161208 13:13:02.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.188">Length is 0</msg>
<status starttime="20161208 13:13:02.187" status="PASS" endtime="20161208 13:13:02.188"></status>
</kw>
<status starttime="20161208 13:13:01.030" status="PASS" endtime="20161208 13:13:02.188"></status>
</kw>
<status starttime="20161208 13:13:01.030" status="PASS" endtime="20161208 13:13:02.188"></status>
</kw>
<status starttime="20161208 13:12:58.672" status="PASS" endtime="20161208 13:13:02.188"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.193">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161208 13:13:02.191" status="PASS" endtime="20161208 13:13:02.193"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.194">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:02.193" status="PASS" endtime="20161208 13:13:02.194"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:02.194" status="PASS" endtime="20161208 13:13:02.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.199">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:02.198" status="PASS" endtime="20161208 13:13:02.199"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.199">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:02.199" status="PASS" endtime="20161208 13:13:02.199"></status>
</kw>
<status starttime="20161208 13:13:02.199" status="PASS" endtime="20161208 13:13:02.200"></status>
</kw>
<status starttime="20161208 13:13:02.197" status="PASS" endtime="20161208 13:13:02.200"></status>
</kw>
<status starttime="20161208 13:13:02.194" status="PASS" endtime="20161208 13:13:02.200"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.201">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:02.200" status="PASS" endtime="20161208 13:13:02.201"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:02.201" status="PASS" endtime="20161208 13:13:02.202"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.202">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:02.202" status="PASS" endtime="20161208 13:13:02.202"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:02.202" status="PASS" endtime="20161208 13:13:02.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:02.677">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:02.203" status="PASS" endtime="20161208 13:13:02.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.678">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:02.677" status="PASS" endtime="20161208 13:13:02.678"></status>
</kw>
<status starttime="20161208 13:13:02.200" status="PASS" endtime="20161208 13:13:02.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.903">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:02.903">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:02.678" status="PASS" endtime="20161208 13:13:02.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.911">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:02.909" status="PASS" endtime="20161208 13:13:02.911"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.912">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:02.912" status="PASS" endtime="20161208 13:13:02.912"></status>
</kw>
<status starttime="20161208 13:13:02.911" status="PASS" endtime="20161208 13:13:02.913"></status>
</kw>
<status starttime="20161208 13:13:02.909" status="PASS" endtime="20161208 13:13:02.913"></status>
</kw>
<status starttime="20161208 13:13:02.904" status="PASS" endtime="20161208 13:13:02.913"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:02.913">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:02.190" status="PASS" endtime="20161208 13:13:02.913"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:02.914" status="PASS" endtime="20161208 13:13:02.914"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.916">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 13:13:02.915" status="PASS" endtime="20161208 13:13:02.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.924">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:13:02.923" status="PASS" endtime="20161208 13:13:02.924"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.925">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:13:02.925" status="PASS" endtime="20161208 13:13:02.925"></status>
</kw>
<status starttime="20161208 13:13:02.924" status="PASS" endtime="20161208 13:13:02.925"></status>
</kw>
<status starttime="20161208 13:13:02.923" status="PASS" endtime="20161208 13:13:02.926"></status>
</kw>
<status starttime="20161208 13:13:02.916" status="PASS" endtime="20161208 13:13:02.926"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:02.926">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:02.926" status="PASS" endtime="20161208 13:13:02.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:02.927" status="PASS" endtime="20161208 13:13:02.927"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:02.928" status="PASS" endtime="20161208 13:13:02.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:02.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:02.928" status="PASS" endtime="20161208 13:13:02.929"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.268">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:03.268">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:02.929" status="PASS" endtime="20161208 13:13:03.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:03.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:03.268" status="PASS" endtime="20161208 13:13:03.269"></status>
</kw>
<status starttime="20161208 13:13:02.926" status="PASS" endtime="20161208 13:13:03.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.326">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:03.326">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:03.269" status="PASS" endtime="20161208 13:13:03.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.330">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:03.330" status="PASS" endtime="20161208 13:13:03.331"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:03.331">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:03.331" status="PASS" endtime="20161208 13:13:03.331"></status>
</kw>
<status starttime="20161208 13:13:03.331" status="PASS" endtime="20161208 13:13:03.332"></status>
</kw>
<status starttime="20161208 13:13:03.329" status="PASS" endtime="20161208 13:13:03.332"></status>
</kw>
<status starttime="20161208 13:13:03.326" status="PASS" endtime="20161208 13:13:03.332"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:03.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:02.915" status="PASS" endtime="20161208 13:13:03.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.333">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:03.333">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:03.333">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:03.333" status="PASS" endtime="20161208 13:13:03.333"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:03.334">Length is 0</msg>
<status starttime="20161208 13:13:03.334" status="PASS" endtime="20161208 13:13:03.334"></status>
</kw>
<status starttime="20161208 13:13:02.190" status="PASS" endtime="20161208 13:13:03.334"></status>
</kw>
<status starttime="20161208 13:13:02.190" status="PASS" endtime="20161208 13:13:03.334"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.335">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161208 13:13:03.719">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:13:03.720">${elog} = q 231</msg>
<msg level="INFO" timestamp="20161208 13:13:03.720">${stderr} = </msg>
<status starttime="20161208 13:13:03.334" status="PASS" endtime="20161208 13:13:03.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:03.720">Length is 0</msg>
<status starttime="20161208 13:13:03.720" status="PASS" endtime="20161208 13:13:03.720"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.722">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 13:13:03.721" status="PASS" endtime="20161208 13:13:03.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.729">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:13:03.728" status="PASS" endtime="20161208 13:13:03.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:03.731">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:13:03.730" status="PASS" endtime="20161208 13:13:03.731"></status>
</kw>
<status starttime="20161208 13:13:03.729" status="PASS" endtime="20161208 13:13:03.731"></status>
</kw>
<status starttime="20161208 13:13:03.727" status="PASS" endtime="20161208 13:13:03.731"></status>
</kw>
<status starttime="20161208 13:13:03.722" status="PASS" endtime="20161208 13:13:03.731"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:03.732">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:03.732" status="PASS" endtime="20161208 13:13:03.733"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.733">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:03.733" status="PASS" endtime="20161208 13:13:03.733"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.734">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:03.733" status="PASS" endtime="20161208 13:13:03.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:03.734">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:03.734" status="PASS" endtime="20161208 13:13:03.734"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.109">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:04.109">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:03.734" status="PASS" endtime="20161208 13:13:04.109"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:04.109" status="PASS" endtime="20161208 13:13:04.110"></status>
</kw>
<status starttime="20161208 13:13:03.731" status="PASS" endtime="20161208 13:13:04.110"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.170">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:04.170">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:04.110" status="PASS" endtime="20161208 13:13:04.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.174">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/231"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:04.174" status="PASS" endtime="20161208 13:13:04.174"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.175">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/231"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:04.175" status="PASS" endtime="20161208 13:13:04.175"></status>
</kw>
<status starttime="20161208 13:13:04.175" status="PASS" endtime="20161208 13:13:04.175"></status>
</kw>
<status starttime="20161208 13:13:04.174" status="PASS" endtime="20161208 13:13:04.175"></status>
</kw>
<status starttime="20161208 13:13:04.170" status="PASS" endtime="20161208 13:13:04.176"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:04.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:03.721" status="PASS" endtime="20161208 13:13:04.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:04.176" status="PASS" endtime="20161208 13:13:04.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.178">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/231"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:04.178">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:04.178">${jsondata} = {u'data': [u'/org/openbmc/records/events/231'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:04.178" status="PASS" endtime="20161208 13:13:04.178"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:04.179">${log_list} = [u'/org/openbmc/records/events/231']</msg>
<status starttime="20161208 13:13:03.720" status="PASS" endtime="20161208 13:13:04.179"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status starttime="20161208 13:13:04.179" status="PASS" endtime="20161208 13:13:04.179"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.180">${association_uri} = /org/openbmc/records/events/231/fru</msg>
<status starttime="20161208 13:13:04.179" status="PASS" endtime="20161208 13:13:04.180"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.181">${base_uri} = /org/openbmc/records/events/231/fru/attr/endpoints</msg>
<status starttime="20161208 13:13:04.181" status="PASS" endtime="20161208 13:13:04.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.186">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/231/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:04.185" status="PASS" endtime="20161208 13:13:04.186"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.187">URI:https://9.3.23.30:443/org/openbmc/records/events/231/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:04.186" status="PASS" endtime="20161208 13:13:04.187"></status>
</kw>
<status starttime="20161208 13:13:04.186" status="PASS" endtime="20161208 13:13:04.187"></status>
</kw>
<status starttime="20161208 13:13:04.185" status="PASS" endtime="20161208 13:13:04.187"></status>
</kw>
<status starttime="20161208 13:13:04.182" status="PASS" endtime="20161208 13:13:04.187"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.188">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:04.188" status="PASS" endtime="20161208 13:13:04.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:04.189" status="PASS" endtime="20161208 13:13:04.189"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.190">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:04.189" status="PASS" endtime="20161208 13:13:04.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:04.190" status="PASS" endtime="20161208 13:13:04.190"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.522">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:04.522">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:04.190" status="PASS" endtime="20161208 13:13:04.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.523">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:04.522" status="PASS" endtime="20161208 13:13:04.523"></status>
</kw>
<status starttime="20161208 13:13:04.187" status="PASS" endtime="20161208 13:13:04.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.615">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/231/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:04.615">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:04.523" status="PASS" endtime="20161208 13:13:04.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.619">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:04.619" status="PASS" endtime="20161208 13:13:04.619"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.620">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:04.620" status="PASS" endtime="20161208 13:13:04.620"></status>
</kw>
<status starttime="20161208 13:13:04.619" status="PASS" endtime="20161208 13:13:04.620"></status>
</kw>
<status starttime="20161208 13:13:04.618" status="PASS" endtime="20161208 13:13:04.620"></status>
</kw>
<status starttime="20161208 13:13:04.615" status="PASS" endtime="20161208 13:13:04.620"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:04.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:04.180" status="PASS" endtime="20161208 13:13:04.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.621">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:04.621">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:04.621">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:04.621" status="PASS" endtime="20161208 13:13:04.621"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:04.622">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status starttime="20161208 13:13:04.180" status="PASS" endtime="20161208 13:13:04.622"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status starttime="20161208 13:13:04.622" status="PASS" endtime="20161208 13:13:04.622"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.624">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status starttime="20161208 13:13:04.624" status="PASS" endtime="20161208 13:13:04.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.629">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:04.628" status="PASS" endtime="20161208 13:13:04.629"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.629">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:04.629" status="PASS" endtime="20161208 13:13:04.629"></status>
</kw>
<status starttime="20161208 13:13:04.629" status="PASS" endtime="20161208 13:13:04.630"></status>
</kw>
<status starttime="20161208 13:13:04.627" status="PASS" endtime="20161208 13:13:04.630"></status>
</kw>
<status starttime="20161208 13:13:04.624" status="PASS" endtime="20161208 13:13:04.630"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.631">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:04.630" status="PASS" endtime="20161208 13:13:04.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:04.631" status="PASS" endtime="20161208 13:13:04.631"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.632">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:04.632" status="PASS" endtime="20161208 13:13:04.632"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:04.632" status="PASS" endtime="20161208 13:13:04.633"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:04.960">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:04.960">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:04.633" status="PASS" endtime="20161208 13:13:04.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:04.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:04.961" status="PASS" endtime="20161208 13:13:04.961"></status>
</kw>
<status starttime="20161208 13:13:04.630" status="PASS" endtime="20161208 13:13:04.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.040">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:05.041">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:04.962" status="PASS" endtime="20161208 13:13:05.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.048">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/231"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:05.047" status="PASS" endtime="20161208 13:13:05.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.049">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/231"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:05.049" status="PASS" endtime="20161208 13:13:05.049"></status>
</kw>
<status starttime="20161208 13:13:05.048" status="PASS" endtime="20161208 13:13:05.049"></status>
</kw>
<status starttime="20161208 13:13:05.046" status="PASS" endtime="20161208 13:13:05.050"></status>
</kw>
<status starttime="20161208 13:13:05.041" status="PASS" endtime="20161208 13:13:05.050"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:05.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:04.623" status="PASS" endtime="20161208 13:13:05.050"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.051">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/231"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:05.051">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:05.051">${content} = {u'data': [u'/org/openbmc/records/events/231'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:05.050" status="PASS" endtime="20161208 13:13:05.051"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:05.052">${dimm1_event} = [u'/org/openbmc/records/events/231']</msg>
<status starttime="20161208 13:13:04.622" status="PASS" endtime="20161208 13:13:05.052"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status starttime="20161208 13:13:05.052" status="PASS" endtime="20161208 13:13:05.052"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 13:13:05.053" status="PASS" endtime="20161208 13:13:05.055"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:13:05.057">Directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs"&gt;/tmp/root/27234/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 13:13:05.056" status="PASS" endtime="20161208 13:13:05.057"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:13:05.057">File '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 13:13:05.057" status="PASS" endtime="20161208 13:13:05.058"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:05.058">${exist} = True</msg>
<status starttime="20161208 13:13:05.057" status="PASS" endtime="20161208 13:13:05.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 13:13:05.058" status="PASS" endtime="20161208 13:13:05.061"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.062">${cur_time} = 2016-12-08 13:13:05:061366</msg>
<status starttime="20161208 13:13:05.061" status="PASS" endtime="20161208 13:13:05.062"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.062">${cur_time} = 20161208131305061366</msg>
<status starttime="20161208 13:13:05.062" status="PASS" endtime="20161208 13:13:05.062"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:05.062">${cur_time} = 20161208131305061366</msg>
<status starttime="20161208 13:13:05.061" status="PASS" endtime="20161208 13:13:05.062"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:13:05.063">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:13:05.063" status="PASS" endtime="20161208 13:13:05.063"></status>
</kw>
<status starttime="20161208 13:13:05.056" status="PASS" endtime="20161208 13:13:05.063"></status>
</kw>
<status starttime="20161208 13:13:05.052" status="PASS" endtime="20161208 13:13:05.063"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status critical="yes" starttime="20161208 13:13:02.188" status="PASS" endtime="20161208 13:13:05.063"></status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.065">${data} = {u'data': []}</msg>
<status starttime="20161208 13:13:05.065" status="PASS" endtime="20161208 13:13:05.065"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.066">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161208 13:13:05.066" status="PASS" endtime="20161208 13:13:05.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.067">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:05.066" status="PASS" endtime="20161208 13:13:05.067"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:05.067" status="PASS" endtime="20161208 13:13:05.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.071">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:05.071" status="PASS" endtime="20161208 13:13:05.071"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.072">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:05.072" status="PASS" endtime="20161208 13:13:05.072"></status>
</kw>
<status starttime="20161208 13:13:05.072" status="PASS" endtime="20161208 13:13:05.072"></status>
</kw>
<status starttime="20161208 13:13:05.070" status="PASS" endtime="20161208 13:13:05.073"></status>
</kw>
<status starttime="20161208 13:13:05.067" status="PASS" endtime="20161208 13:13:05.073"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.073">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:05.073" status="PASS" endtime="20161208 13:13:05.074"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.074">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:05.074" status="PASS" endtime="20161208 13:13:05.074"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.075">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:05.074" status="PASS" endtime="20161208 13:13:05.075"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.075">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:05.075" status="PASS" endtime="20161208 13:13:05.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.401">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:05.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:05.076" status="PASS" endtime="20161208 13:13:05.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:05.402" status="PASS" endtime="20161208 13:13:05.402"></status>
</kw>
<status starttime="20161208 13:13:05.073" status="PASS" endtime="20161208 13:13:05.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.699">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:05.699">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:05.403" status="PASS" endtime="20161208 13:13:05.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.704">${msg} = Response code:200, Content:{
  "data": 232, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:05.703" status="PASS" endtime="20161208 13:13:05.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.704">Response code:200, Content:{
  "data": 232, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:05.704" status="PASS" endtime="20161208 13:13:05.705"></status>
</kw>
<status starttime="20161208 13:13:05.704" status="PASS" endtime="20161208 13:13:05.705"></status>
</kw>
<status starttime="20161208 13:13:05.703" status="PASS" endtime="20161208 13:13:05.705"></status>
</kw>
<status starttime="20161208 13:13:05.700" status="PASS" endtime="20161208 13:13:05.705"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:05.705">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:05.065" status="PASS" endtime="20161208 13:13:05.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:05.705" status="PASS" endtime="20161208 13:13:05.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.706">To JSON using : content={
  "data": 232, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:05.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:05.706">${json} = {u'data': 232, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:05.706" status="PASS" endtime="20161208 13:13:05.706"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.707">${LOGID} = 232</msg>
<status starttime="20161208 13:13:05.706" status="PASS" endtime="20161208 13:13:05.707"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.707">${uri} = /org/openbmc/records/events/232</msg>
<status starttime="20161208 13:13:05.707" status="PASS" endtime="20161208 13:13:05.707"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:05.708">${log_uri1} = /org/openbmc/records/events/232</msg>
<status starttime="20161208 13:13:05.064" status="PASS" endtime="20161208 13:13:05.708"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.708">${association_uri1} = /org/openbmc/records/events/232/fru</msg>
<status starttime="20161208 13:13:05.708" status="PASS" endtime="20161208 13:13:05.708"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.709">${data} = {u'data': []}</msg>
<status starttime="20161208 13:13:05.708" status="PASS" endtime="20161208 13:13:05.709"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.710">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161208 13:13:05.710" status="PASS" endtime="20161208 13:13:05.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:05.710" status="PASS" endtime="20161208 13:13:05.710"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:05.711" status="PASS" endtime="20161208 13:13:05.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.721">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:05.719" status="PASS" endtime="20161208 13:13:05.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.722">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:05.722" status="PASS" endtime="20161208 13:13:05.722"></status>
</kw>
<status starttime="20161208 13:13:05.721" status="PASS" endtime="20161208 13:13:05.722"></status>
</kw>
<status starttime="20161208 13:13:05.717" status="PASS" endtime="20161208 13:13:05.722"></status>
</kw>
<status starttime="20161208 13:13:05.711" status="PASS" endtime="20161208 13:13:05.722"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:05.723">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:05.723" status="PASS" endtime="20161208 13:13:05.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:05.724" status="PASS" endtime="20161208 13:13:05.724"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.725">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:05.724" status="PASS" endtime="20161208 13:13:05.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:05.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:05.725" status="PASS" endtime="20161208 13:13:05.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:06.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:05.726" status="PASS" endtime="20161208 13:13:06.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:06.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:06.132" status="PASS" endtime="20161208 13:13:06.132"></status>
</kw>
<status starttime="20161208 13:13:05.723" status="PASS" endtime="20161208 13:13:06.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.428">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:06.428">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:06.132" status="PASS" endtime="20161208 13:13:06.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.433">${msg} = Response code:200, Content:{
  "data": 233, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:06.432" status="PASS" endtime="20161208 13:13:06.433"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:06.433">Response code:200, Content:{
  "data": 233, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:06.433" status="PASS" endtime="20161208 13:13:06.434"></status>
</kw>
<status starttime="20161208 13:13:06.433" status="PASS" endtime="20161208 13:13:06.434"></status>
</kw>
<status starttime="20161208 13:13:06.432" status="PASS" endtime="20161208 13:13:06.434"></status>
</kw>
<status starttime="20161208 13:13:06.429" status="PASS" endtime="20161208 13:13:06.434"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:06.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:05.709" status="PASS" endtime="20161208 13:13:06.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:06.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:06.434" status="PASS" endtime="20161208 13:13:06.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.435">To JSON using : content={
  "data": 233, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:06.435">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:06.435">${json} = {u'data': 233, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:06.435" status="PASS" endtime="20161208 13:13:06.435"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.436">${LOGID} = 233</msg>
<status starttime="20161208 13:13:06.436" status="PASS" endtime="20161208 13:13:06.436"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.436">${uri} = /org/openbmc/records/events/233</msg>
<status starttime="20161208 13:13:06.436" status="PASS" endtime="20161208 13:13:06.436"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:06.437">${log_uri2} = /org/openbmc/records/events/233</msg>
<status starttime="20161208 13:13:05.708" status="PASS" endtime="20161208 13:13:06.437"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.437">${del_uri} = /org/openbmc/records/events/232/action/delete</msg>
<status starttime="20161208 13:13:06.437" status="PASS" endtime="20161208 13:13:06.437"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.438">${base_uri} = /org/openbmc/records/events/232/action/delete</msg>
<status starttime="20161208 13:13:06.438" status="PASS" endtime="20161208 13:13:06.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.439">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:06.439" status="PASS" endtime="20161208 13:13:06.439"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:06.439" status="PASS" endtime="20161208 13:13:06.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.444">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/232/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:06.443" status="PASS" endtime="20161208 13:13:06.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:06.445">URI:https://9.3.23.30:443/org/openbmc/records/events/232/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:06.444" status="PASS" endtime="20161208 13:13:06.445"></status>
</kw>
<status starttime="20161208 13:13:06.444" status="PASS" endtime="20161208 13:13:06.445"></status>
</kw>
<status starttime="20161208 13:13:06.443" status="PASS" endtime="20161208 13:13:06.445"></status>
</kw>
<status starttime="20161208 13:13:06.440" status="PASS" endtime="20161208 13:13:06.445"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:06.446">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:06.445" status="PASS" endtime="20161208 13:13:06.446"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:06.446" status="PASS" endtime="20161208 13:13:06.447"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.447">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:06.447" status="PASS" endtime="20161208 13:13:06.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.448">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:06.447" status="PASS" endtime="20161208 13:13:06.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:06.989">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:06.989">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:06.448" status="PASS" endtime="20161208 13:13:06.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:06.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:06.989" status="PASS" endtime="20161208 13:13:06.990"></status>
</kw>
<status starttime="20161208 13:13:06.445" status="PASS" endtime="20161208 13:13:06.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.266">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/232/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:07.266">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:06.990" status="PASS" endtime="20161208 13:13:07.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.274">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:07.273" status="PASS" endtime="20161208 13:13:07.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.275">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:07.275" status="PASS" endtime="20161208 13:13:07.276"></status>
</kw>
<status starttime="20161208 13:13:07.274" status="PASS" endtime="20161208 13:13:07.276"></status>
</kw>
<status starttime="20161208 13:13:07.272" status="PASS" endtime="20161208 13:13:07.276"></status>
</kw>
<status starttime="20161208 13:13:07.266" status="PASS" endtime="20161208 13:13:07.276"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:07.277">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:06.437" status="PASS" endtime="20161208 13:13:07.277"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:07.277" status="PASS" endtime="20161208 13:13:07.278"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.279">${base_uri} = /org/openbmc/records/events/232/fru</msg>
<status starttime="20161208 13:13:07.279" status="PASS" endtime="20161208 13:13:07.279"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.285">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/232/fru, method:Get, args:{}</msg>
<status starttime="20161208 13:13:07.284" status="PASS" endtime="20161208 13:13:07.285"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.285">URI:https://9.3.23.30:443/org/openbmc/records/events/232/fru, method:Get, args:{}</msg>
<status starttime="20161208 13:13:07.285" status="PASS" endtime="20161208 13:13:07.285"></status>
</kw>
<status starttime="20161208 13:13:07.285" status="PASS" endtime="20161208 13:13:07.286"></status>
</kw>
<status starttime="20161208 13:13:07.283" status="PASS" endtime="20161208 13:13:07.286"></status>
</kw>
<status starttime="20161208 13:13:07.280" status="PASS" endtime="20161208 13:13:07.286"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.286">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:07.286" status="PASS" endtime="20161208 13:13:07.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:07.287" status="PASS" endtime="20161208 13:13:07.287"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.288">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:07.288" status="PASS" endtime="20161208 13:13:07.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.288">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:07.288" status="PASS" endtime="20161208 13:13:07.288"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:07.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:07.289" status="PASS" endtime="20161208 13:13:07.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:07.878" status="PASS" endtime="20161208 13:13:07.879"></status>
</kw>
<status starttime="20161208 13:13:07.286" status="PASS" endtime="20161208 13:13:07.879"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.946">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/232/fru, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:07.946">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20161208 13:13:07.879" status="PASS" endtime="20161208 13:13:07.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.953">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/232/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status starttime="20161208 13:13:07.953" status="PASS" endtime="20161208 13:13:07.954"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.955">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/232/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status starttime="20161208 13:13:07.954" status="PASS" endtime="20161208 13:13:07.955"></status>
</kw>
<status starttime="20161208 13:13:07.954" status="PASS" endtime="20161208 13:13:07.955"></status>
</kw>
<status starttime="20161208 13:13:07.952" status="PASS" endtime="20161208 13:13:07.955"></status>
</kw>
<status starttime="20161208 13:13:07.947" status="PASS" endtime="20161208 13:13:07.955"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:07.956">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20161208 13:13:07.278" status="PASS" endtime="20161208 13:13:07.956"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.957">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/232/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:07.957">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:07.957">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/232/fru'}, u'message': u'404 Not Found', u'status': u'error'}</msg>
<status starttime="20161208 13:13:07.956" status="PASS" endtime="20161208 13:13:07.957"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status starttime="20161208 13:13:07.957" status="PASS" endtime="20161208 13:13:07.958"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.960">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status starttime="20161208 13:13:07.960" status="PASS" endtime="20161208 13:13:07.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.965">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:07.965" status="PASS" endtime="20161208 13:13:07.965"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.966">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:07.966" status="PASS" endtime="20161208 13:13:07.966"></status>
</kw>
<status starttime="20161208 13:13:07.965" status="PASS" endtime="20161208 13:13:07.966"></status>
</kw>
<status starttime="20161208 13:13:07.964" status="PASS" endtime="20161208 13:13:07.966"></status>
</kw>
<status starttime="20161208 13:13:07.961" status="PASS" endtime="20161208 13:13:07.966"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:07.967">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:07.967" status="PASS" endtime="20161208 13:13:07.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:07.968" status="PASS" endtime="20161208 13:13:07.968"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.969">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:07.968" status="PASS" endtime="20161208 13:13:07.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:07.969">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:07.969" status="PASS" endtime="20161208 13:13:07.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:08.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:07.969" status="PASS" endtime="20161208 13:13:08.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:08.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:08.640" status="PASS" endtime="20161208 13:13:08.641"></status>
</kw>
<status starttime="20161208 13:13:07.966" status="PASS" endtime="20161208 13:13:08.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.732">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:08.732">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:08.641" status="PASS" endtime="20161208 13:13:08.732"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.736">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/233"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:08.736" status="PASS" endtime="20161208 13:13:08.736"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:08.737">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/233"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:08.737" status="PASS" endtime="20161208 13:13:08.737"></status>
</kw>
<status starttime="20161208 13:13:08.736" status="PASS" endtime="20161208 13:13:08.737"></status>
</kw>
<status starttime="20161208 13:13:08.735" status="PASS" endtime="20161208 13:13:08.737"></status>
</kw>
<status starttime="20161208 13:13:08.732" status="PASS" endtime="20161208 13:13:08.737"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:08.737">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:07.959" status="PASS" endtime="20161208 13:13:08.737"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.738">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/233"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:08.738">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:08.738">${content} = {u'data': [u'/org/openbmc/records/events/233'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:08.738" status="PASS" endtime="20161208 13:13:08.738"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:08.738">${dimm3_event} = [u'/org/openbmc/records/events/233']</msg>
<status starttime="20161208 13:13:07.958" status="PASS" endtime="20161208 13:13:08.738"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161208 13:13:08.739" status="PASS" endtime="20161208 13:13:08.739"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.740">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status starttime="20161208 13:13:08.740" status="PASS" endtime="20161208 13:13:08.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.747">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:08.746" status="PASS" endtime="20161208 13:13:08.747"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:08.749">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161208 13:13:08.749" status="PASS" endtime="20161208 13:13:08.749"></status>
</kw>
<status starttime="20161208 13:13:08.748" status="PASS" endtime="20161208 13:13:08.749"></status>
</kw>
<status starttime="20161208 13:13:08.745" status="PASS" endtime="20161208 13:13:08.749"></status>
</kw>
<status starttime="20161208 13:13:08.741" status="PASS" endtime="20161208 13:13:08.750"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:08.751">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:08.751" status="PASS" endtime="20161208 13:13:08.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:08.752" status="PASS" endtime="20161208 13:13:08.752"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.753">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:08.752" status="PASS" endtime="20161208 13:13:08.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:08.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:08.753" status="PASS" endtime="20161208 13:13:08.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.432">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:09.432">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:08.754" status="PASS" endtime="20161208 13:13:09.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:09.433">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:09.433" status="PASS" endtime="20161208 13:13:09.433"></status>
</kw>
<status starttime="20161208 13:13:08.750" status="PASS" endtime="20161208 13:13:09.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.511">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:09.511">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:09.433" status="PASS" endtime="20161208 13:13:09.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.515">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/233"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:09.515" status="PASS" endtime="20161208 13:13:09.515"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:09.516">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/233"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:09.516" status="PASS" endtime="20161208 13:13:09.516"></status>
</kw>
<status starttime="20161208 13:13:09.515" status="PASS" endtime="20161208 13:13:09.516"></status>
</kw>
<status starttime="20161208 13:13:09.514" status="PASS" endtime="20161208 13:13:09.516"></status>
</kw>
<status starttime="20161208 13:13:09.511" status="PASS" endtime="20161208 13:13:09.516"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:09.516">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:08.739" status="PASS" endtime="20161208 13:13:09.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.517">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/233"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:09.517">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:09.517">${content} = {u'data': [u'/org/openbmc/records/events/233'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:09.517" status="PASS" endtime="20161208 13:13:09.517"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:09.517">${dimm2_event} = [u'/org/openbmc/records/events/233']</msg>
<status starttime="20161208 13:13:08.739" status="PASS" endtime="20161208 13:13:09.517"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161208 13:13:09.518" status="PASS" endtime="20161208 13:13:09.518"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 13:13:09.519" status="PASS" endtime="20161208 13:13:09.521"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:13:09.522">Directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs"&gt;/tmp/root/27234/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 13:13:09.522" status="PASS" endtime="20161208 13:13:09.522"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:13:09.523">File '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 13:13:09.523" status="PASS" endtime="20161208 13:13:09.523"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:09.523">${exist} = True</msg>
<status starttime="20161208 13:13:09.522" status="PASS" endtime="20161208 13:13:09.523"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 13:13:09.523" status="PASS" endtime="20161208 13:13:09.526"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.527">${cur_time} = 2016-12-08 13:13:09:526812</msg>
<status starttime="20161208 13:13:09.527" status="PASS" endtime="20161208 13:13:09.527"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.528">${cur_time} = 20161208131309526812</msg>
<status starttime="20161208 13:13:09.527" status="PASS" endtime="20161208 13:13:09.528"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:09.528">${cur_time} = 20161208131309526812</msg>
<status starttime="20161208 13:13:09.526" status="PASS" endtime="20161208 13:13:09.528"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:13:09.529">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:13:09.528" status="PASS" endtime="20161208 13:13:09.529"></status>
</kw>
<status starttime="20161208 13:13:09.521" status="PASS" endtime="20161208 13:13:09.529"></status>
</kw>
<status starttime="20161208 13:13:09.518" status="PASS" endtime="20161208 13:13:09.529"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status critical="yes" starttime="20161208 13:13:05.064" status="PASS" endtime="20161208 13:13:09.530"></status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20161208 13:13:09.531" status="PASS" endtime="20161208 13:13:09.539"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status starttime="20161208 13:12:58.642" status="PASS" endtime="20161208 13:13:09.539"></status>
</suite>
<suite source="/tmp/root/27234/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s3">
<test name="power on test" id="s1-s3-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:09.569">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:13:09.569" status="FAIL" endtime="20161208 13:13:09.569"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:09.569">${has_host} = False</msg>
<status starttime="20161208 13:13:09.568" status="PASS" endtime="20161208 13:13:09.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:13:09.573" status="PASS" endtime="20161208 13:13:09.573"></status>
</kw>
<status starttime="20161208 13:13:09.569" status="PASS" endtime="20161208 13:13:09.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.577">${port_num} = 22</msg>
<status starttime="20161208 13:13:09.577" status="PASS" endtime="20161208 13:13:09.577"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.578">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:13:09.578" status="PASS" endtime="20161208 13:13:09.578"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:09.579">${https_num} = 443</msg>
<status starttime="20161208 13:13:09.578" status="PASS" endtime="20161208 13:13:09.579"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:09.579">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:13:09.579" status="PASS" endtime="20161208 13:13:09.579"></status>
</kw>
<status starttime="20161208 13:13:09.577" status="PASS" endtime="20161208 13:13:09.579"></status>
</kw>
<status starttime="20161208 13:13:09.573" status="PASS" endtime="20161208 13:13:09.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:09.580">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:13:09.580" status="FAIL" endtime="20161208 13:13:09.580"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:09.580">${has_port} = False</msg>
<status starttime="20161208 13:13:09.580" status="PASS" endtime="20161208 13:13:09.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:13:09.584" status="PASS" endtime="20161208 13:13:09.584"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:13:09.585" status="PASS" endtime="20161208 13:13:09.585"></status>
</kw>
<status starttime="20161208 13:13:09.584" status="PASS" endtime="20161208 13:13:09.585"></status>
</kw>
<status starttime="20161208 13:13:09.581" status="PASS" endtime="20161208 13:13:09.585"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:09.586">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:13:11.931">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:13:09.585" status="PASS" endtime="20161208 13:13:11.931"></status>
</kw>
<status starttime="20161208 13:13:09.568" status="PASS" endtime="20161208 13:13:11.932"></status>
</kw>
<kw library="utils" name="Get Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:11.933">${cur_time} = 20161208131311932876</msg>
<status starttime="20161208 13:13:11.933" status="PASS" endtime="20161208 13:13:11.933"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:11.934">${cur_time} = 20161208131311932876</msg>
<status starttime="20161208 13:13:11.932" status="PASS" endtime="20161208 13:13:11.934"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:11.939">${LOG_TIME} = 20161208131311932876</msg>
<status starttime="20161208 13:13:11.934" status="PASS" endtime="20161208 13:13:11.939"></status>
</kw>
<kw library="SSHLibrary" name="Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:11.940">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161208131311932876_$$'.</msg>
<status starttime="20161208 13:13:11.939" status="PASS" endtime="20161208 13:13:11.948"></status>
</kw>
<status starttime="20161208 13:13:09.567" status="PASS" endtime="20161208 13:13:11.948"></status>
</kw>
<kw library="poweroffs" name="BMC Power Off">
<doc>Powers off the system and makes sure that all states are</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:11.951">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:13:11.951" status="FAIL" endtime="20161208 13:13:11.951"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:11.952">${has_host} = False</msg>
<status starttime="20161208 13:13:11.950" status="PASS" endtime="20161208 13:13:11.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:13:11.957" status="PASS" endtime="20161208 13:13:11.958"></status>
</kw>
<status starttime="20161208 13:13:11.952" status="PASS" endtime="20161208 13:13:11.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:11.963">${port_num} = 22</msg>
<status starttime="20161208 13:13:11.963" status="PASS" endtime="20161208 13:13:11.963"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:11.964">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:13:11.964" status="PASS" endtime="20161208 13:13:11.964"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:11.964">${https_num} = 443</msg>
<status starttime="20161208 13:13:11.964" status="PASS" endtime="20161208 13:13:11.964"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:11.965">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:13:11.965" status="PASS" endtime="20161208 13:13:11.965"></status>
</kw>
<status starttime="20161208 13:13:11.962" status="PASS" endtime="20161208 13:13:11.965"></status>
</kw>
<status starttime="20161208 13:13:11.958" status="PASS" endtime="20161208 13:13:11.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:11.966">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:13:11.966" status="FAIL" endtime="20161208 13:13:11.966"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:11.966">${has_port} = False</msg>
<status starttime="20161208 13:13:11.966" status="PASS" endtime="20161208 13:13:11.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:13:11.970" status="PASS" endtime="20161208 13:13:11.970"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:13:11.970" status="PASS" endtime="20161208 13:13:11.971"></status>
</kw>
<status starttime="20161208 13:13:11.970" status="PASS" endtime="20161208 13:13:11.971"></status>
</kw>
<status starttime="20161208 13:13:11.967" status="PASS" endtime="20161208 13:13:11.971"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:11.971">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:13:14.353">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:13:11.971" status="PASS" endtime="20161208 13:13:14.353"></status>
</kw>
<status starttime="20161208 13:13:11.949" status="PASS" endtime="20161208 13:13:14.353"></status>
</kw>
<kw library="utils" name="Initiate Power Off">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.355">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:14.354" status="PASS" endtime="20161208 13:13:14.355"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.356">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:14.355" status="PASS" endtime="20161208 13:13:14.356"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.358">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:13:14.357" status="PASS" endtime="20161208 13:13:14.358"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.360">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status starttime="20161208 13:13:14.359" status="PASS" endtime="20161208 13:13:14.360"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:14.361" status="PASS" endtime="20161208 13:13:14.361"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:14.362" status="PASS" endtime="20161208 13:13:14.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.370">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:14.368" status="PASS" endtime="20161208 13:13:14.370"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:14.371">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:14.371" status="PASS" endtime="20161208 13:13:14.371"></status>
</kw>
<status starttime="20161208 13:13:14.370" status="PASS" endtime="20161208 13:13:14.371"></status>
</kw>
<status starttime="20161208 13:13:14.367" status="PASS" endtime="20161208 13:13:14.371"></status>
</kw>
<status starttime="20161208 13:13:14.363" status="PASS" endtime="20161208 13:13:14.372"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:14.372">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:14.372" status="PASS" endtime="20161208 13:13:14.373"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.373">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:14.373" status="PASS" endtime="20161208 13:13:14.373"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.374">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:14.373" status="PASS" endtime="20161208 13:13:14.374"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.374">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:14.374" status="PASS" endtime="20161208 13:13:14.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:14.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:14.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:14.375" status="PASS" endtime="20161208 13:13:14.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:14.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:14.714" status="PASS" endtime="20161208 13:13:14.714"></status>
</kw>
<status starttime="20161208 13:13:14.372" status="PASS" endtime="20161208 13:13:14.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.003">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:15.003">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:14.714" status="PASS" endtime="20161208 13:13:15.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.007">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:15.006" status="PASS" endtime="20161208 13:13:15.007"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:15.008">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:15.007" status="PASS" endtime="20161208 13:13:15.008"></status>
</kw>
<status starttime="20161208 13:13:15.007" status="PASS" endtime="20161208 13:13:15.008"></status>
</kw>
<status starttime="20161208 13:13:15.006" status="PASS" endtime="20161208 13:13:15.008"></status>
</kw>
<status starttime="20161208 13:13:15.003" status="PASS" endtime="20161208 13:13:15.008"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:15.008">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:14.358" status="PASS" endtime="20161208 13:13:15.008"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:15.008">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:14.356" status="PASS" endtime="20161208 13:13:15.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:15.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:15.009" status="PASS" endtime="20161208 13:13:15.009"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.011">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:15.010" status="PASS" endtime="20161208 13:13:15.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.011">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:15.011" status="PASS" endtime="20161208 13:13:15.011"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.013">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:13:15.012" status="PASS" endtime="20161208 13:13:15.013"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.015">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:13:15.014" status="PASS" endtime="20161208 13:13:15.015"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.016">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:15.015" status="PASS" endtime="20161208 13:13:15.016"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:15.016" status="PASS" endtime="20161208 13:13:15.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.023">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:15.022" status="PASS" endtime="20161208 13:13:15.023"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:15.024">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:15.024" status="PASS" endtime="20161208 13:13:15.024"></status>
</kw>
<status starttime="20161208 13:13:15.023" status="PASS" endtime="20161208 13:13:15.024"></status>
</kw>
<status starttime="20161208 13:13:15.022" status="PASS" endtime="20161208 13:13:15.024"></status>
</kw>
<status starttime="20161208 13:13:15.017" status="PASS" endtime="20161208 13:13:15.024"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:15.025">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:15.025" status="PASS" endtime="20161208 13:13:15.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:15.026" status="PASS" endtime="20161208 13:13:15.026"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.027">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:15.026" status="PASS" endtime="20161208 13:13:15.027"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:15.027" status="PASS" endtime="20161208 13:13:15.027"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:15.880">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:15.880">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:15.027" status="PASS" endtime="20161208 13:13:15.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:15.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:15.881" status="PASS" endtime="20161208 13:13:15.882"></status>
</kw>
<status starttime="20161208 13:13:15.024" status="PASS" endtime="20161208 13:13:15.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.727">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:16.727">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:15.882" status="PASS" endtime="20161208 13:13:16.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.734">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:16.733" status="PASS" endtime="20161208 13:13:16.734"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:16.736">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:16.735" status="PASS" endtime="20161208 13:13:16.736"></status>
</kw>
<status starttime="20161208 13:13:16.735" status="PASS" endtime="20161208 13:13:16.736"></status>
</kw>
<status starttime="20161208 13:13:16.733" status="PASS" endtime="20161208 13:13:16.736"></status>
</kw>
<status starttime="20161208 13:13:16.728" status="PASS" endtime="20161208 13:13:16.736"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:16.737">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:15.013" status="PASS" endtime="20161208 13:13:16.737"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:16.737">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:15.011" status="PASS" endtime="20161208 13:13:16.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:16.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:16.737" status="PASS" endtime="20161208 13:13:16.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.739">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:16.739">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:16.739">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:16.738" status="PASS" endtime="20161208 13:13:16.739"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:16.740">${state} = 0</msg>
<status starttime="20161208 13:13:15.010" status="PASS" endtime="20161208 13:13:16.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161208 13:13:16.740" status="PASS" endtime="20161208 13:13:16.740"></status>
</kw>
<status starttime="20161208 13:13:15.010" status="PASS" endtime="20161208 13:13:16.741"></status>
</kw>
<status starttime="20161208 13:13:15.009" status="PASS" endtime="20161208 13:13:16.741"></status>
</kw>
<status starttime="20161208 13:13:14.354" status="PASS" endtime="20161208 13:13:16.741"></status>
</kw>
<kw library="poweroffs" name="Check Power Off States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.742">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:16.742" status="PASS" endtime="20161208 13:13:16.742"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.743">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:16.743" status="PASS" endtime="20161208 13:13:16.743"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.744">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:13:16.744" status="PASS" endtime="20161208 13:13:16.744"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.745">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:13:16.745" status="PASS" endtime="20161208 13:13:16.745"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:16.745" status="PASS" endtime="20161208 13:13:16.746"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:16.746" status="PASS" endtime="20161208 13:13:16.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.751">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:16.750" status="PASS" endtime="20161208 13:13:16.751"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:16.751">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:16.751" status="PASS" endtime="20161208 13:13:16.752"></status>
</kw>
<status starttime="20161208 13:13:16.751" status="PASS" endtime="20161208 13:13:16.752"></status>
</kw>
<status starttime="20161208 13:13:16.749" status="PASS" endtime="20161208 13:13:16.752"></status>
</kw>
<status starttime="20161208 13:13:16.747" status="PASS" endtime="20161208 13:13:16.752"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:16.753">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:16.752" status="PASS" endtime="20161208 13:13:16.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.753">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:16.753" status="PASS" endtime="20161208 13:13:16.753"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.754">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:16.754" status="PASS" endtime="20161208 13:13:16.754"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:16.755">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:16.754" status="PASS" endtime="20161208 13:13:16.755"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:18.284">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:18.284">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:16.755" status="PASS" endtime="20161208 13:13:18.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:18.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:18.285" status="PASS" endtime="20161208 13:13:18.286"></status>
</kw>
<status starttime="20161208 13:13:16.752" status="PASS" endtime="20161208 13:13:18.286"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.222">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:19.223">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:18.286" status="PASS" endtime="20161208 13:13:19.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.232">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:19.230" status="PASS" endtime="20161208 13:13:19.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:19.233">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:19.233" status="PASS" endtime="20161208 13:13:19.234"></status>
</kw>
<status starttime="20161208 13:13:19.232" status="PASS" endtime="20161208 13:13:19.234"></status>
</kw>
<status starttime="20161208 13:13:19.229" status="PASS" endtime="20161208 13:13:19.234"></status>
</kw>
<status starttime="20161208 13:13:19.223" status="PASS" endtime="20161208 13:13:19.234"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:19.235">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:16.744" status="PASS" endtime="20161208 13:13:19.235"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:19.235">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:16.743" status="PASS" endtime="20161208 13:13:19.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:19.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:19.235" status="PASS" endtime="20161208 13:13:19.236"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.237">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:19.237">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:19.237">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:19.236" status="PASS" endtime="20161208 13:13:19.237"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:19.238">${power_state} = 0</msg>
<status starttime="20161208 13:13:16.742" status="PASS" endtime="20161208 13:13:19.238"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161208 13:13:19.238" status="PASS" endtime="20161208 13:13:19.238"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status starttime="20161208 13:13:19.239" status="PASS" endtime="20161208 13:13:19.239"></status>
</kw>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.242">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20161208 13:13:19.242" status="PASS" endtime="20161208 13:13:19.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.246">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161208 13:13:19.246" status="PASS" endtime="20161208 13:13:19.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:19.247">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161208 13:13:19.247" status="PASS" endtime="20161208 13:13:19.247"></status>
</kw>
<status starttime="20161208 13:13:19.246" status="PASS" endtime="20161208 13:13:19.247"></status>
</kw>
<status starttime="20161208 13:13:19.245" status="PASS" endtime="20161208 13:13:19.247"></status>
</kw>
<status starttime="20161208 13:13:19.242" status="PASS" endtime="20161208 13:13:19.247"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:19.248">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:19.248" status="PASS" endtime="20161208 13:13:19.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:19.249" status="PASS" endtime="20161208 13:13:19.249"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.250">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:19.249" status="PASS" endtime="20161208 13:13:19.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:19.250" status="PASS" endtime="20161208 13:13:19.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:19.923">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:19.923">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:19.250" status="PASS" endtime="20161208 13:13:19.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:19.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:19.923" status="PASS" endtime="20161208 13:13:19.924"></status>
</kw>
<status starttime="20161208 13:13:19.248" status="PASS" endtime="20161208 13:13:19.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.013">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:13:20.013">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:19.925" status="PASS" endtime="20161208 13:13:20.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.020">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:20.019" status="PASS" endtime="20161208 13:13:20.020"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.021">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:20.021" status="PASS" endtime="20161208 13:13:20.021"></status>
</kw>
<status starttime="20161208 13:13:20.020" status="PASS" endtime="20161208 13:13:20.021"></status>
</kw>
<status starttime="20161208 13:13:20.018" status="PASS" endtime="20161208 13:13:20.022"></status>
</kw>
<status starttime="20161208 13:13:20.013" status="PASS" endtime="20161208 13:13:20.022"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:19.241" status="PASS" endtime="20161208 13:13:20.022"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.023">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:20.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:20.023">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:20.022" status="PASS" endtime="20161208 13:13:20.023"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.024">${state} = Off</msg>
<status starttime="20161208 13:13:19.240" status="PASS" endtime="20161208 13:13:20.024"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.024">${boot_progress} = Off</msg>
<status starttime="20161208 13:13:19.239" status="PASS" endtime="20161208 13:13:20.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20161208 13:13:20.024" status="PASS" endtime="20161208 13:13:20.025"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status starttime="20161208 13:13:20.025" status="PASS" endtime="20161208 13:13:20.026"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.026">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status starttime="20161208 13:13:20.026" status="PASS" endtime="20161208 13:13:20.027"></status>
</kw>
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.028">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:20.027" status="PASS" endtime="20161208 13:13:20.028"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.029">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:20.028" status="PASS" endtime="20161208 13:13:20.029"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.031">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161208 13:13:20.030" status="PASS" endtime="20161208 13:13:20.031"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.032">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161208 13:13:20.032" status="PASS" endtime="20161208 13:13:20.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:20.033" status="PASS" endtime="20161208 13:13:20.033"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:20.033" status="PASS" endtime="20161208 13:13:20.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.040">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:20.038" status="PASS" endtime="20161208 13:13:20.040"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.041">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:20.041" status="PASS" endtime="20161208 13:13:20.042"></status>
</kw>
<status starttime="20161208 13:13:20.040" status="PASS" endtime="20161208 13:13:20.042"></status>
</kw>
<status starttime="20161208 13:13:20.037" status="PASS" endtime="20161208 13:13:20.042"></status>
</kw>
<status starttime="20161208 13:13:20.034" status="PASS" endtime="20161208 13:13:20.042"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.043">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:20.042" status="PASS" endtime="20161208 13:13:20.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.043">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:20.043" status="PASS" endtime="20161208 13:13:20.043"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.044">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:20.044" status="PASS" endtime="20161208 13:13:20.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:20.044" status="PASS" endtime="20161208 13:13:20.045"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.518">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:20.518">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:20.045" status="PASS" endtime="20161208 13:13:20.518"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.519">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:20.518" status="PASS" endtime="20161208 13:13:20.519"></status>
</kw>
<status starttime="20161208 13:13:20.042" status="PASS" endtime="20161208 13:13:20.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.801">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:20.801">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:20.519" status="PASS" endtime="20161208 13:13:20.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.808">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:20.807" status="PASS" endtime="20161208 13:13:20.808"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.809">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:20.809" status="PASS" endtime="20161208 13:13:20.810"></status>
</kw>
<status starttime="20161208 13:13:20.808" status="PASS" endtime="20161208 13:13:20.810"></status>
</kw>
<status starttime="20161208 13:13:20.807" status="PASS" endtime="20161208 13:13:20.810"></status>
</kw>
<status starttime="20161208 13:13:20.802" status="PASS" endtime="20161208 13:13:20.810"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.810">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:20.031" status="PASS" endtime="20161208 13:13:20.810"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:20.029" status="PASS" endtime="20161208 13:13:20.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:20.811" status="PASS" endtime="20161208 13:13:20.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.812">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:20.812">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:20.812">${content} = {u'data': u'BMC_READY', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:20.812" status="PASS" endtime="20161208 13:13:20.812"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.813">${bmc_state} = BMC_READY</msg>
<status starttime="20161208 13:13:20.027" status="PASS" endtime="20161208 13:13:20.813"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status starttime="20161208 13:13:20.813" status="PASS" endtime="20161208 13:13:20.813"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status starttime="20161208 13:13:20.813" status="PASS" endtime="20161208 13:13:20.814"></status>
</kw>
<status starttime="20161208 13:13:16.741" status="PASS" endtime="20161208 13:13:20.814"></status>
</kw>
<kw library="SSHLibrary" name="Close Connection">
<doc>Closes the current connection.</doc>
<status starttime="20161208 13:13:20.814" status="PASS" endtime="20161208 13:13:20.877"></status>
</kw>
<status starttime="20161208 13:13:11.948" status="PASS" endtime="20161208 13:13:20.878"></status>
</kw>
<kw library="powerons" name="BMC Power On">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.878">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status starttime="20161208 13:13:20.878" status="PASS" endtime="20161208 13:13:20.878"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:20.880">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:13:20.880" status="FAIL" endtime="20161208 13:13:20.880"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.880">${has_host} = False</msg>
<status starttime="20161208 13:13:20.879" status="PASS" endtime="20161208 13:13:20.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:13:20.883" status="PASS" endtime="20161208 13:13:20.884"></status>
</kw>
<status starttime="20161208 13:13:20.881" status="PASS" endtime="20161208 13:13:20.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.888">${port_num} = 22</msg>
<status starttime="20161208 13:13:20.887" status="PASS" endtime="20161208 13:13:20.888"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.888">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:13:20.888" status="PASS" endtime="20161208 13:13:20.888"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:20.889">${https_num} = 443</msg>
<status starttime="20161208 13:13:20.888" status="PASS" endtime="20161208 13:13:20.889"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.889">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:13:20.889" status="PASS" endtime="20161208 13:13:20.889"></status>
</kw>
<status starttime="20161208 13:13:20.887" status="PASS" endtime="20161208 13:13:20.890"></status>
</kw>
<status starttime="20161208 13:13:20.884" status="PASS" endtime="20161208 13:13:20.890"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:20.890">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:13:20.890" status="FAIL" endtime="20161208 13:13:20.890"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:20.891">${has_port} = False</msg>
<status starttime="20161208 13:13:20.890" status="PASS" endtime="20161208 13:13:20.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:13:20.894" status="PASS" endtime="20161208 13:13:20.895"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:13:20.895" status="PASS" endtime="20161208 13:13:20.895"></status>
</kw>
<status starttime="20161208 13:13:20.894" status="PASS" endtime="20161208 13:13:20.895"></status>
</kw>
<status starttime="20161208 13:13:20.891" status="PASS" endtime="20161208 13:13:20.896"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:20.896">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:13:23.178">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:13:20.896" status="PASS" endtime="20161208 13:13:23.178"></status>
</kw>
<status starttime="20161208 13:13:20.879" status="PASS" endtime="20161208 13:13:23.178"></status>
</kw>
<kw library="utils" name="Initiate Power On">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.180">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:23.179" status="PASS" endtime="20161208 13:13:23.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.181">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:23.180" status="PASS" endtime="20161208 13:13:23.181"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.183">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:13:23.182" status="PASS" endtime="20161208 13:13:23.183"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.185">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status starttime="20161208 13:13:23.185" status="PASS" endtime="20161208 13:13:23.185"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.186">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:23.186" status="PASS" endtime="20161208 13:13:23.186"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:23.186" status="PASS" endtime="20161208 13:13:23.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.194">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:23.193" status="PASS" endtime="20161208 13:13:23.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:23.195">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:23.195" status="PASS" endtime="20161208 13:13:23.195"></status>
</kw>
<status starttime="20161208 13:13:23.194" status="PASS" endtime="20161208 13:13:23.195"></status>
</kw>
<status starttime="20161208 13:13:23.192" status="PASS" endtime="20161208 13:13:23.196"></status>
</kw>
<status starttime="20161208 13:13:23.187" status="PASS" endtime="20161208 13:13:23.196"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:23.197">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:23.196" status="PASS" endtime="20161208 13:13:23.197"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.198">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:23.197" status="PASS" endtime="20161208 13:13:23.198"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.198">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:23.198" status="PASS" endtime="20161208 13:13:23.198"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.199">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:23.198" status="PASS" endtime="20161208 13:13:23.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:23.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:23.199" status="PASS" endtime="20161208 13:13:23.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:23.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:23.527" status="PASS" endtime="20161208 13:13:23.528"></status>
</kw>
<status starttime="20161208 13:13:23.196" status="PASS" endtime="20161208 13:13:23.528"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.809">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:23.810">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:23.528" status="PASS" endtime="20161208 13:13:23.810"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.817">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:23.816" status="PASS" endtime="20161208 13:13:23.817"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:23.818">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:23.818" status="PASS" endtime="20161208 13:13:23.818"></status>
</kw>
<status starttime="20161208 13:13:23.817" status="PASS" endtime="20161208 13:13:23.819"></status>
</kw>
<status starttime="20161208 13:13:23.815" status="PASS" endtime="20161208 13:13:23.819"></status>
</kw>
<status starttime="20161208 13:13:23.810" status="PASS" endtime="20161208 13:13:23.819"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:23.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:23.183" status="PASS" endtime="20161208 13:13:23.819"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:23.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:23.181" status="PASS" endtime="20161208 13:13:23.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:23.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:23.820" status="PASS" endtime="20161208 13:13:23.821"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20161208 13:13:23.821" status="PASS" endtime="20161208 13:13:23.825"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.827">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:23.827" status="PASS" endtime="20161208 13:13:23.827"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.827">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:23.827" status="PASS" endtime="20161208 13:13:23.827"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.829">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:13:23.828" status="PASS" endtime="20161208 13:13:23.829"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.830">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:13:23.830" status="PASS" endtime="20161208 13:13:23.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:23.830" status="PASS" endtime="20161208 13:13:23.830"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:23.831" status="PASS" endtime="20161208 13:13:23.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.835">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:23.834" status="PASS" endtime="20161208 13:13:23.835"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:23.836">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:23.836" status="PASS" endtime="20161208 13:13:23.836"></status>
</kw>
<status starttime="20161208 13:13:23.835" status="PASS" endtime="20161208 13:13:23.836"></status>
</kw>
<status starttime="20161208 13:13:23.834" status="PASS" endtime="20161208 13:13:23.836"></status>
</kw>
<status starttime="20161208 13:13:23.831" status="PASS" endtime="20161208 13:13:23.836"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:23.837">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:23.837" status="PASS" endtime="20161208 13:13:23.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.838">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:23.838" status="PASS" endtime="20161208 13:13:23.838"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.839">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:23.838" status="PASS" endtime="20161208 13:13:23.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:23.839">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:23.839" status="PASS" endtime="20161208 13:13:23.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:25.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:25.951">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:23.839" status="PASS" endtime="20161208 13:13:25.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:25.952">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:25.952" status="PASS" endtime="20161208 13:13:25.952"></status>
</kw>
<status starttime="20161208 13:13:23.836" status="PASS" endtime="20161208 13:13:25.953"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:29.802">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:29.802">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:25.953" status="PASS" endtime="20161208 13:13:29.802"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:29.810">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:29.809" status="PASS" endtime="20161208 13:13:29.810"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:29.812">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:29.811" status="PASS" endtime="20161208 13:13:29.812"></status>
</kw>
<status starttime="20161208 13:13:29.810" status="PASS" endtime="20161208 13:13:29.812"></status>
</kw>
<status starttime="20161208 13:13:29.808" status="PASS" endtime="20161208 13:13:29.812"></status>
</kw>
<status starttime="20161208 13:13:29.803" status="PASS" endtime="20161208 13:13:29.812"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:29.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:23.829" status="PASS" endtime="20161208 13:13:29.812"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:29.813">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:23.828" status="PASS" endtime="20161208 13:13:29.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:29.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:29.813" status="PASS" endtime="20161208 13:13:29.813"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:29.814">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:29.814">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:29.814">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:29.814" status="PASS" endtime="20161208 13:13:29.814"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:29.814">${state} = 0</msg>
<status starttime="20161208 13:13:23.826" status="PASS" endtime="20161208 13:13:29.814"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:29.815">0 != 1</msg>
<status starttime="20161208 13:13:29.814" status="FAIL" endtime="20161208 13:13:29.815"></status>
</kw>
<status starttime="20161208 13:13:23.826" status="FAIL" endtime="20161208 13:13:29.815"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.818">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:39.818" status="PASS" endtime="20161208 13:13:39.818"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.819">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:39.818" status="PASS" endtime="20161208 13:13:39.819"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.822">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:13:39.821" status="PASS" endtime="20161208 13:13:39.822"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.824">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:13:39.824" status="PASS" endtime="20161208 13:13:39.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.825">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:39.825" status="PASS" endtime="20161208 13:13:39.825"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:39.825" status="PASS" endtime="20161208 13:13:39.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.835">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:39.834" status="PASS" endtime="20161208 13:13:39.835"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:39.836">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:39.836" status="PASS" endtime="20161208 13:13:39.836"></status>
</kw>
<status starttime="20161208 13:13:39.835" status="PASS" endtime="20161208 13:13:39.836"></status>
</kw>
<status starttime="20161208 13:13:39.833" status="PASS" endtime="20161208 13:13:39.836"></status>
</kw>
<status starttime="20161208 13:13:39.827" status="PASS" endtime="20161208 13:13:39.837"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:39.837">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:39.837" status="PASS" endtime="20161208 13:13:39.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.838">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:39.838" status="PASS" endtime="20161208 13:13:39.838"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.839">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:39.839" status="PASS" endtime="20161208 13:13:39.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:39.840">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:39.839" status="PASS" endtime="20161208 13:13:39.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:40.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:40.170">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:39.840" status="PASS" endtime="20161208 13:13:40.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:40.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:40.170" status="PASS" endtime="20161208 13:13:40.171"></status>
</kw>
<status starttime="20161208 13:13:39.837" status="PASS" endtime="20161208 13:13:40.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:40.441">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:40.441">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:40.172" status="PASS" endtime="20161208 13:13:40.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:40.445">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:40.445" status="PASS" endtime="20161208 13:13:40.445"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:40.446">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:40.446" status="PASS" endtime="20161208 13:13:40.446"></status>
</kw>
<status starttime="20161208 13:13:40.445" status="PASS" endtime="20161208 13:13:40.446"></status>
</kw>
<status starttime="20161208 13:13:40.444" status="PASS" endtime="20161208 13:13:40.446"></status>
</kw>
<status starttime="20161208 13:13:40.441" status="PASS" endtime="20161208 13:13:40.446"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:40.446">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:39.822" status="PASS" endtime="20161208 13:13:40.447"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:40.447">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:39.819" status="PASS" endtime="20161208 13:13:40.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:40.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:40.447" status="PASS" endtime="20161208 13:13:40.447"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:40.448">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:40.448">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:40.448">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:40.448" status="PASS" endtime="20161208 13:13:40.448"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:40.448">${state} = 0</msg>
<status starttime="20161208 13:13:39.817" status="PASS" endtime="20161208 13:13:40.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:40.449">0 != 1</msg>
<status starttime="20161208 13:13:40.448" status="FAIL" endtime="20161208 13:13:40.449"></status>
</kw>
<status starttime="20161208 13:13:39.816" status="FAIL" endtime="20161208 13:13:40.449"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.453">@{arglist} = [ ]</msg>
<status starttime="20161208 13:13:50.452" status="PASS" endtime="20161208 13:13:50.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.454">${args} = {u'data': []}</msg>
<status starttime="20161208 13:13:50.454" status="PASS" endtime="20161208 13:13:50.455"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.457">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:13:50.457" status="PASS" endtime="20161208 13:13:50.458"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.460">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:13:50.459" status="PASS" endtime="20161208 13:13:50.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:50.460" status="PASS" endtime="20161208 13:13:50.461"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:13:50.461" status="PASS" endtime="20161208 13:13:50.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.466">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:50.465" status="PASS" endtime="20161208 13:13:50.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:50.467">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:13:50.467" status="PASS" endtime="20161208 13:13:50.467"></status>
</kw>
<status starttime="20161208 13:13:50.466" status="PASS" endtime="20161208 13:13:50.467"></status>
</kw>
<status starttime="20161208 13:13:50.465" status="PASS" endtime="20161208 13:13:50.467"></status>
</kw>
<status starttime="20161208 13:13:50.462" status="PASS" endtime="20161208 13:13:50.467"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:50.468">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:13:50.468" status="PASS" endtime="20161208 13:13:50.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.470">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:13:50.469" status="PASS" endtime="20161208 13:13:50.470"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.470">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:13:50.470" status="PASS" endtime="20161208 13:13:50.470"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.471">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:13:50.470" status="PASS" endtime="20161208 13:13:50.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:50.809">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:50.809">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:50.471" status="PASS" endtime="20161208 13:13:50.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:50.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:50.810" status="PASS" endtime="20161208 13:13:50.811"></status>
</kw>
<status starttime="20161208 13:13:50.467" status="PASS" endtime="20161208 13:13:50.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:51.072">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:13:51.072">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:50.811" status="PASS" endtime="20161208 13:13:51.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:51.078">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:51.078" status="PASS" endtime="20161208 13:13:51.079"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:51.080">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:13:51.079" status="PASS" endtime="20161208 13:13:51.080"></status>
</kw>
<status starttime="20161208 13:13:51.079" status="PASS" endtime="20161208 13:13:51.080"></status>
</kw>
<status starttime="20161208 13:13:51.077" status="PASS" endtime="20161208 13:13:51.080"></status>
</kw>
<status starttime="20161208 13:13:51.073" status="PASS" endtime="20161208 13:13:51.080"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:51.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:50.458" status="PASS" endtime="20161208 13:13:51.081"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:51.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:13:50.455" status="PASS" endtime="20161208 13:13:51.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:13:51.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:13:51.081" status="PASS" endtime="20161208 13:13:51.082"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:13:51.082">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:13:51.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:13:51.083">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:13:51.082" status="PASS" endtime="20161208 13:13:51.083"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:13:51.083">${state} = 0</msg>
<status starttime="20161208 13:13:50.451" status="PASS" endtime="20161208 13:13:51.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:13:51.084">0 != 1</msg>
<status starttime="20161208 13:13:51.083" status="FAIL" endtime="20161208 13:13:51.084"></status>
</kw>
<status starttime="20161208 13:13:50.450" status="FAIL" endtime="20161208 13:13:51.084"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.087">@{arglist} = [ ]</msg>
<status starttime="20161208 13:14:01.086" status="PASS" endtime="20161208 13:14:01.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.088">${args} = {u'data': []}</msg>
<status starttime="20161208 13:14:01.087" status="PASS" endtime="20161208 13:14:01.088"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.090">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:14:01.089" status="PASS" endtime="20161208 13:14:01.090"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.093">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:14:01.092" status="PASS" endtime="20161208 13:14:01.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:01.093" status="PASS" endtime="20161208 13:14:01.094"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:14:01.094" status="PASS" endtime="20161208 13:14:01.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.102">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:01.101" status="PASS" endtime="20161208 13:14:01.102"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:01.103">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:01.103" status="PASS" endtime="20161208 13:14:01.103"></status>
</kw>
<status starttime="20161208 13:14:01.102" status="PASS" endtime="20161208 13:14:01.104"></status>
</kw>
<status starttime="20161208 13:14:01.100" status="PASS" endtime="20161208 13:14:01.104"></status>
</kw>
<status starttime="20161208 13:14:01.095" status="PASS" endtime="20161208 13:14:01.104"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:01.105">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:14:01.104" status="PASS" endtime="20161208 13:14:01.105"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:01.105" status="PASS" endtime="20161208 13:14:01.106"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.106">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:14:01.106" status="PASS" endtime="20161208 13:14:01.106"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:14:01.106" status="PASS" endtime="20161208 13:14:01.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.439">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:01.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:01.107" status="PASS" endtime="20161208 13:14:01.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:01.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:01.439" status="PASS" endtime="20161208 13:14:01.440"></status>
</kw>
<status starttime="20161208 13:14:01.104" status="PASS" endtime="20161208 13:14:01.440"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.706">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:01.706">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:01.440" status="PASS" endtime="20161208 13:14:01.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.710">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:01.710" status="PASS" endtime="20161208 13:14:01.710"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:01.711">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:01.711" status="PASS" endtime="20161208 13:14:01.711"></status>
</kw>
<status starttime="20161208 13:14:01.711" status="PASS" endtime="20161208 13:14:01.711"></status>
</kw>
<status starttime="20161208 13:14:01.709" status="PASS" endtime="20161208 13:14:01.711"></status>
</kw>
<status starttime="20161208 13:14:01.706" status="PASS" endtime="20161208 13:14:01.712"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:01.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:01.090" status="PASS" endtime="20161208 13:14:01.712"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:01.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:01.088" status="PASS" endtime="20161208 13:14:01.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:01.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:01.712" status="PASS" endtime="20161208 13:14:01.713"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:01.714">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:14:01.714">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:14:01.714">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:14:01.713" status="PASS" endtime="20161208 13:14:01.714"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:01.714">${state} = 0</msg>
<status starttime="20161208 13:14:01.086" status="PASS" endtime="20161208 13:14:01.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:14:01.715">0 != 1</msg>
<status starttime="20161208 13:14:01.715" status="FAIL" endtime="20161208 13:14:01.715"></status>
</kw>
<status starttime="20161208 13:14:01.084" status="FAIL" endtime="20161208 13:14:01.716"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.719">@{arglist} = [ ]</msg>
<status starttime="20161208 13:14:11.718" status="PASS" endtime="20161208 13:14:11.719"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.720">${args} = {u'data': []}</msg>
<status starttime="20161208 13:14:11.719" status="PASS" endtime="20161208 13:14:11.720"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.722">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:14:11.721" status="PASS" endtime="20161208 13:14:11.722"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.724">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:14:11.724" status="PASS" endtime="20161208 13:14:11.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.725">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:11.725" status="PASS" endtime="20161208 13:14:11.725"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:14:11.725" status="PASS" endtime="20161208 13:14:11.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.733">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:11.733" status="PASS" endtime="20161208 13:14:11.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:11.734">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:11.734" status="PASS" endtime="20161208 13:14:11.734"></status>
</kw>
<status starttime="20161208 13:14:11.733" status="PASS" endtime="20161208 13:14:11.734"></status>
</kw>
<status starttime="20161208 13:14:11.731" status="PASS" endtime="20161208 13:14:11.734"></status>
</kw>
<status starttime="20161208 13:14:11.726" status="PASS" endtime="20161208 13:14:11.734"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:11.735">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:14:11.735" status="PASS" endtime="20161208 13:14:11.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:11.736" status="PASS" endtime="20161208 13:14:11.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.737">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:14:11.737" status="PASS" endtime="20161208 13:14:11.737"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:11.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:14:11.737" status="PASS" endtime="20161208 13:14:11.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:12.068">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:12.069">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:11.738" status="PASS" endtime="20161208 13:14:12.069"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:12.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:12.069" status="PASS" endtime="20161208 13:14:12.070"></status>
</kw>
<status starttime="20161208 13:14:11.735" status="PASS" endtime="20161208 13:14:12.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:12.342">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:12.343">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:12.070" status="PASS" endtime="20161208 13:14:12.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:12.349">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:12.349" status="PASS" endtime="20161208 13:14:12.349"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:12.351">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:12.350" status="PASS" endtime="20161208 13:14:12.351"></status>
</kw>
<status starttime="20161208 13:14:12.350" status="PASS" endtime="20161208 13:14:12.351"></status>
</kw>
<status starttime="20161208 13:14:12.348" status="PASS" endtime="20161208 13:14:12.351"></status>
</kw>
<status starttime="20161208 13:14:12.343" status="PASS" endtime="20161208 13:14:12.351"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:12.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:11.722" status="PASS" endtime="20161208 13:14:12.352"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:12.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:11.720" status="PASS" endtime="20161208 13:14:12.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:12.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:12.352" status="PASS" endtime="20161208 13:14:12.353"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:12.353">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:14:12.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:14:12.354">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:14:12.353" status="PASS" endtime="20161208 13:14:12.354"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:12.354">${state} = 0</msg>
<status starttime="20161208 13:14:11.717" status="PASS" endtime="20161208 13:14:12.354"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:14:12.355">0 != 1</msg>
<status starttime="20161208 13:14:12.354" status="FAIL" endtime="20161208 13:14:12.355"></status>
</kw>
<status starttime="20161208 13:14:11.716" status="FAIL" endtime="20161208 13:14:12.355"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.357">@{arglist} = [ ]</msg>
<status starttime="20161208 13:14:22.357" status="PASS" endtime="20161208 13:14:22.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.358">${args} = {u'data': []}</msg>
<status starttime="20161208 13:14:22.358" status="PASS" endtime="20161208 13:14:22.358"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.360">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:14:22.360" status="PASS" endtime="20161208 13:14:22.360"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.363">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:14:22.362" status="PASS" endtime="20161208 13:14:22.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.364">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:22.363" status="PASS" endtime="20161208 13:14:22.364"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:14:22.364" status="PASS" endtime="20161208 13:14:22.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.372">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:22.371" status="PASS" endtime="20161208 13:14:22.372"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:22.373">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:22.373" status="PASS" endtime="20161208 13:14:22.373"></status>
</kw>
<status starttime="20161208 13:14:22.372" status="PASS" endtime="20161208 13:14:22.373"></status>
</kw>
<status starttime="20161208 13:14:22.370" status="PASS" endtime="20161208 13:14:22.373"></status>
</kw>
<status starttime="20161208 13:14:22.365" status="PASS" endtime="20161208 13:14:22.373"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:22.374">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:14:22.374" status="PASS" endtime="20161208 13:14:22.375"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:22.375" status="PASS" endtime="20161208 13:14:22.375"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.376">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:14:22.375" status="PASS" endtime="20161208 13:14:22.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:14:22.376" status="PASS" endtime="20161208 13:14:22.376"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.711">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:22.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:22.376" status="PASS" endtime="20161208 13:14:22.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:22.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:22.712" status="PASS" endtime="20161208 13:14:22.712"></status>
</kw>
<status starttime="20161208 13:14:22.374" status="PASS" endtime="20161208 13:14:22.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.976">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:22.977">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:22.713" status="PASS" endtime="20161208 13:14:22.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.987">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:22.986" status="PASS" endtime="20161208 13:14:22.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:22.988">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:22.988" status="PASS" endtime="20161208 13:14:22.988"></status>
</kw>
<status starttime="20161208 13:14:22.987" status="PASS" endtime="20161208 13:14:22.988"></status>
</kw>
<status starttime="20161208 13:14:22.985" status="PASS" endtime="20161208 13:14:22.989"></status>
</kw>
<status starttime="20161208 13:14:22.977" status="PASS" endtime="20161208 13:14:22.989"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:22.989">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:22.361" status="PASS" endtime="20161208 13:14:22.989"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:22.989">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:22.359" status="PASS" endtime="20161208 13:14:22.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:22.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:22.990" status="PASS" endtime="20161208 13:14:22.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:22.991">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:14:22.991">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:14:22.992">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:14:22.991" status="PASS" endtime="20161208 13:14:22.992"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:22.992">${state} = 0</msg>
<status starttime="20161208 13:14:22.356" status="PASS" endtime="20161208 13:14:22.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:14:22.993">0 != 1</msg>
<status starttime="20161208 13:14:22.993" status="FAIL" endtime="20161208 13:14:22.993"></status>
</kw>
<status starttime="20161208 13:14:22.355" status="FAIL" endtime="20161208 13:14:22.993"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:32.996">@{arglist} = [ ]</msg>
<status starttime="20161208 13:14:32.996" status="PASS" endtime="20161208 13:14:32.996"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:32.997">${args} = {u'data': []}</msg>
<status starttime="20161208 13:14:32.997" status="PASS" endtime="20161208 13:14:32.997"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:32.999">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:14:32.999" status="PASS" endtime="20161208 13:14:32.999"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.001">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:14:33.001" status="PASS" endtime="20161208 13:14:33.001"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.002">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:33.002" status="PASS" endtime="20161208 13:14:33.002"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:14:33.003" status="PASS" endtime="20161208 13:14:33.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.009">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:33.008" status="PASS" endtime="20161208 13:14:33.009"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:33.010">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:33.010" status="PASS" endtime="20161208 13:14:33.010"></status>
</kw>
<status starttime="20161208 13:14:33.009" status="PASS" endtime="20161208 13:14:33.010"></status>
</kw>
<status starttime="20161208 13:14:33.007" status="PASS" endtime="20161208 13:14:33.010"></status>
</kw>
<status starttime="20161208 13:14:33.003" status="PASS" endtime="20161208 13:14:33.010"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:33.012">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:14:33.011" status="PASS" endtime="20161208 13:14:33.012"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:33.013" status="PASS" endtime="20161208 13:14:33.013"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.014">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:14:33.013" status="PASS" endtime="20161208 13:14:33.014"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:14:33.014" status="PASS" endtime="20161208 13:14:33.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:33.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:33.014" status="PASS" endtime="20161208 13:14:33.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:33.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:33.497" status="PASS" endtime="20161208 13:14:33.497"></status>
</kw>
<status starttime="20161208 13:14:33.011" status="PASS" endtime="20161208 13:14:33.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.768">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:33.768">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:33.498" status="PASS" endtime="20161208 13:14:33.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.772">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:33.771" status="PASS" endtime="20161208 13:14:33.772"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:33.773">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:33.772" status="PASS" endtime="20161208 13:14:33.773"></status>
</kw>
<status starttime="20161208 13:14:33.772" status="PASS" endtime="20161208 13:14:33.773"></status>
</kw>
<status starttime="20161208 13:14:33.771" status="PASS" endtime="20161208 13:14:33.773"></status>
</kw>
<status starttime="20161208 13:14:33.768" status="PASS" endtime="20161208 13:14:33.773"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:33.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:32.999" status="PASS" endtime="20161208 13:14:33.774"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:33.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:32.997" status="PASS" endtime="20161208 13:14:33.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:33.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:33.774" status="PASS" endtime="20161208 13:14:33.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:33.776">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:14:33.776">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:14:33.776">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:14:33.775" status="PASS" endtime="20161208 13:14:33.776"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:33.776">${state} = 0</msg>
<status starttime="20161208 13:14:32.995" status="PASS" endtime="20161208 13:14:33.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:14:33.777">0 != 1</msg>
<status starttime="20161208 13:14:33.777" status="FAIL" endtime="20161208 13:14:33.778"></status>
</kw>
<status starttime="20161208 13:14:32.994" status="FAIL" endtime="20161208 13:14:33.778"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.781">@{arglist} = [ ]</msg>
<status starttime="20161208 13:14:43.780" status="PASS" endtime="20161208 13:14:43.781"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.782">${args} = {u'data': []}</msg>
<status starttime="20161208 13:14:43.781" status="PASS" endtime="20161208 13:14:43.782"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.784">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:14:43.783" status="PASS" endtime="20161208 13:14:43.784"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.786">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:14:43.785" status="PASS" endtime="20161208 13:14:43.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:43.787" status="PASS" endtime="20161208 13:14:43.788"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:14:43.788" status="PASS" endtime="20161208 13:14:43.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.795">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:43.794" status="PASS" endtime="20161208 13:14:43.795"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:43.796">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:43.795" status="PASS" endtime="20161208 13:14:43.796"></status>
</kw>
<status starttime="20161208 13:14:43.795" status="PASS" endtime="20161208 13:14:43.796"></status>
</kw>
<status starttime="20161208 13:14:43.794" status="PASS" endtime="20161208 13:14:43.796"></status>
</kw>
<status starttime="20161208 13:14:43.789" status="PASS" endtime="20161208 13:14:43.796"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:43.797">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:14:43.797" status="PASS" endtime="20161208 13:14:43.797"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.798">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:43.797" status="PASS" endtime="20161208 13:14:43.798"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.798">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:14:43.798" status="PASS" endtime="20161208 13:14:43.798"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:43.799">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:14:43.798" status="PASS" endtime="20161208 13:14:43.799"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:44.129">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:44.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:43.799" status="PASS" endtime="20161208 13:14:44.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:44.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:44.129" status="PASS" endtime="20161208 13:14:44.130"></status>
</kw>
<status starttime="20161208 13:14:43.796" status="PASS" endtime="20161208 13:14:44.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:44.403">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:44.403">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:44.130" status="PASS" endtime="20161208 13:14:44.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:44.407">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:44.407" status="PASS" endtime="20161208 13:14:44.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:44.408">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:44.408" status="PASS" endtime="20161208 13:14:44.408"></status>
</kw>
<status starttime="20161208 13:14:44.408" status="PASS" endtime="20161208 13:14:44.408"></status>
</kw>
<status starttime="20161208 13:14:44.406" status="PASS" endtime="20161208 13:14:44.408"></status>
</kw>
<status starttime="20161208 13:14:44.403" status="PASS" endtime="20161208 13:14:44.409"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:44.409">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:43.784" status="PASS" endtime="20161208 13:14:44.409"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:44.409">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:43.782" status="PASS" endtime="20161208 13:14:44.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:44.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:44.409" status="PASS" endtime="20161208 13:14:44.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:44.410">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:14:44.410">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:14:44.410">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:14:44.410" status="PASS" endtime="20161208 13:14:44.410"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:44.410">${state} = 0</msg>
<status starttime="20161208 13:14:43.779" status="PASS" endtime="20161208 13:14:44.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:14:44.411">0 != 1</msg>
<status starttime="20161208 13:14:44.411" status="FAIL" endtime="20161208 13:14:44.411"></status>
</kw>
<status starttime="20161208 13:14:43.778" status="FAIL" endtime="20161208 13:14:44.411"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.414">@{arglist} = [ ]</msg>
<status starttime="20161208 13:14:54.413" status="PASS" endtime="20161208 13:14:54.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.415">${args} = {u'data': []}</msg>
<status starttime="20161208 13:14:54.414" status="PASS" endtime="20161208 13:14:54.415"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.417">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:14:54.416" status="PASS" endtime="20161208 13:14:54.417"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.419">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:14:54.418" status="PASS" endtime="20161208 13:14:54.419"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.420">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:54.419" status="PASS" endtime="20161208 13:14:54.420"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:14:54.420" status="PASS" endtime="20161208 13:14:54.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.426">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:54.425" status="PASS" endtime="20161208 13:14:54.426"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:54.427">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:14:54.426" status="PASS" endtime="20161208 13:14:54.427"></status>
</kw>
<status starttime="20161208 13:14:54.426" status="PASS" endtime="20161208 13:14:54.427"></status>
</kw>
<status starttime="20161208 13:14:54.425" status="PASS" endtime="20161208 13:14:54.427"></status>
</kw>
<status starttime="20161208 13:14:54.421" status="PASS" endtime="20161208 13:14:54.427"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:54.428">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:14:54.428" status="PASS" endtime="20161208 13:14:54.428"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:14:54.428" status="PASS" endtime="20161208 13:14:54.429"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.430">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:14:54.429" status="PASS" endtime="20161208 13:14:54.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:14:54.430" status="PASS" endtime="20161208 13:14:54.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:54.766">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:54.766">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:54.430" status="PASS" endtime="20161208 13:14:54.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:54.767">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:54.767" status="PASS" endtime="20161208 13:14:54.767"></status>
</kw>
<status starttime="20161208 13:14:54.427" status="PASS" endtime="20161208 13:14:54.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:55.034">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:14:55.034">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:54.767" status="PASS" endtime="20161208 13:14:55.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:55.041">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:55.040" status="PASS" endtime="20161208 13:14:55.041"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:55.042">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:14:55.042" status="PASS" endtime="20161208 13:14:55.042"></status>
</kw>
<status starttime="20161208 13:14:55.041" status="PASS" endtime="20161208 13:14:55.043"></status>
</kw>
<status starttime="20161208 13:14:55.039" status="PASS" endtime="20161208 13:14:55.043"></status>
</kw>
<status starttime="20161208 13:14:55.034" status="PASS" endtime="20161208 13:14:55.043"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:55.043">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:54.417" status="PASS" endtime="20161208 13:14:55.043"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:55.044">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:14:54.415" status="PASS" endtime="20161208 13:14:55.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:14:55.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:14:55.044" status="PASS" endtime="20161208 13:14:55.044"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:14:55.045">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:14:55.045">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:14:55.045">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:14:55.044" status="PASS" endtime="20161208 13:14:55.045"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:14:55.045">${state} = 0</msg>
<status starttime="20161208 13:14:54.413" status="PASS" endtime="20161208 13:14:55.045"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:14:55.046">0 != 1</msg>
<status starttime="20161208 13:14:55.045" status="FAIL" endtime="20161208 13:14:55.046"></status>
</kw>
<status starttime="20161208 13:14:54.412" status="FAIL" endtime="20161208 13:14:55.046"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.048">@{arglist} = [ ]</msg>
<status starttime="20161208 13:15:05.048" status="PASS" endtime="20161208 13:15:05.048"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.049">${args} = {u'data': []}</msg>
<status starttime="20161208 13:15:05.049" status="PASS" endtime="20161208 13:15:05.049"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.051">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:15:05.051" status="PASS" endtime="20161208 13:15:05.051"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.053">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:15:05.053" status="PASS" endtime="20161208 13:15:05.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.055">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:05.054" status="PASS" endtime="20161208 13:15:05.055"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:15:05.055" status="PASS" endtime="20161208 13:15:05.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.064">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:05.063" status="PASS" endtime="20161208 13:15:05.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:05.065">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:05.065" status="PASS" endtime="20161208 13:15:05.066"></status>
</kw>
<status starttime="20161208 13:15:05.064" status="PASS" endtime="20161208 13:15:05.066"></status>
</kw>
<status starttime="20161208 13:15:05.062" status="PASS" endtime="20161208 13:15:05.066"></status>
</kw>
<status starttime="20161208 13:15:05.056" status="PASS" endtime="20161208 13:15:05.066"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:05.067">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:15:05.066" status="PASS" endtime="20161208 13:15:05.067"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:05.067" status="PASS" endtime="20161208 13:15:05.068"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.068">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:15:05.068" status="PASS" endtime="20161208 13:15:05.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:15:05.068" status="PASS" endtime="20161208 13:15:05.069"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.406">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:05.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:05.069" status="PASS" endtime="20161208 13:15:05.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:05.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:05.407" status="PASS" endtime="20161208 13:15:05.407"></status>
</kw>
<status starttime="20161208 13:15:05.066" status="PASS" endtime="20161208 13:15:05.407"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.679">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:05.679">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:05.408" status="PASS" endtime="20161208 13:15:05.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.684">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:05.683" status="PASS" endtime="20161208 13:15:05.684"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:05.684">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:05.684" status="PASS" endtime="20161208 13:15:05.685"></status>
</kw>
<status starttime="20161208 13:15:05.684" status="PASS" endtime="20161208 13:15:05.685"></status>
</kw>
<status starttime="20161208 13:15:05.682" status="PASS" endtime="20161208 13:15:05.685"></status>
</kw>
<status starttime="20161208 13:15:05.680" status="PASS" endtime="20161208 13:15:05.685"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:05.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:05.052" status="PASS" endtime="20161208 13:15:05.685"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:05.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:05.049" status="PASS" endtime="20161208 13:15:05.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:05.686">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:05.686" status="PASS" endtime="20161208 13:15:05.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:05.686">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:15:05.686">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:15:05.686">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:15:05.686" status="PASS" endtime="20161208 13:15:05.687"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:05.687">${state} = 0</msg>
<status starttime="20161208 13:15:05.047" status="PASS" endtime="20161208 13:15:05.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:15:05.687">0 != 1</msg>
<status starttime="20161208 13:15:05.687" status="FAIL" endtime="20161208 13:15:05.687"></status>
</kw>
<status starttime="20161208 13:15:05.046" status="FAIL" endtime="20161208 13:15:05.688"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.690">@{arglist} = [ ]</msg>
<status starttime="20161208 13:15:15.690" status="PASS" endtime="20161208 13:15:15.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.691">${args} = {u'data': []}</msg>
<status starttime="20161208 13:15:15.691" status="PASS" endtime="20161208 13:15:15.691"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.693">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:15:15.693" status="PASS" endtime="20161208 13:15:15.693"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.696">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:15:15.695" status="PASS" endtime="20161208 13:15:15.696"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:15.696" status="PASS" endtime="20161208 13:15:15.697"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:15:15.697" status="PASS" endtime="20161208 13:15:15.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.705">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:15.704" status="PASS" endtime="20161208 13:15:15.705"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:15.705">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:15.705" status="PASS" endtime="20161208 13:15:15.706"></status>
</kw>
<status starttime="20161208 13:15:15.705" status="PASS" endtime="20161208 13:15:15.706"></status>
</kw>
<status starttime="20161208 13:15:15.703" status="PASS" endtime="20161208 13:15:15.706"></status>
</kw>
<status starttime="20161208 13:15:15.698" status="PASS" endtime="20161208 13:15:15.706"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:15.707">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:15:15.706" status="PASS" endtime="20161208 13:15:15.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:15.707" status="PASS" endtime="20161208 13:15:15.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.708">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:15:15.708" status="PASS" endtime="20161208 13:15:15.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:15.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:15:15.709" status="PASS" endtime="20161208 13:15:15.709"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:16.043">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:16.043">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:15.709" status="PASS" endtime="20161208 13:15:16.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:16.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:16.044" status="PASS" endtime="20161208 13:15:16.044"></status>
</kw>
<status starttime="20161208 13:15:15.706" status="PASS" endtime="20161208 13:15:16.044"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:16.311">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:16.311">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:16.045" status="PASS" endtime="20161208 13:15:16.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:16.318">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:16.318" status="PASS" endtime="20161208 13:15:16.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:16.320">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:16.319" status="PASS" endtime="20161208 13:15:16.320"></status>
</kw>
<status starttime="20161208 13:15:16.319" status="PASS" endtime="20161208 13:15:16.320"></status>
</kw>
<status starttime="20161208 13:15:16.317" status="PASS" endtime="20161208 13:15:16.320"></status>
</kw>
<status starttime="20161208 13:15:16.312" status="PASS" endtime="20161208 13:15:16.321"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:16.321">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:15.694" status="PASS" endtime="20161208 13:15:16.321"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:16.321">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:15.692" status="PASS" endtime="20161208 13:15:16.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:16.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:16.322" status="PASS" endtime="20161208 13:15:16.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:16.323">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:15:16.323">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:15:16.323">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:15:16.323" status="PASS" endtime="20161208 13:15:16.323"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:16.324">${state} = 0</msg>
<status starttime="20161208 13:15:15.689" status="PASS" endtime="20161208 13:15:16.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:15:16.324">0 != 1</msg>
<status starttime="20161208 13:15:16.324" status="FAIL" endtime="20161208 13:15:16.325"></status>
</kw>
<status starttime="20161208 13:15:15.688" status="FAIL" endtime="20161208 13:15:16.325"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.327">@{arglist} = [ ]</msg>
<status starttime="20161208 13:15:26.327" status="PASS" endtime="20161208 13:15:26.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.328">${args} = {u'data': []}</msg>
<status starttime="20161208 13:15:26.328" status="PASS" endtime="20161208 13:15:26.328"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.330">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:15:26.330" status="PASS" endtime="20161208 13:15:26.330"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.332">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:15:26.332" status="PASS" endtime="20161208 13:15:26.332"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.334">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:26.333" status="PASS" endtime="20161208 13:15:26.334"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:15:26.334" status="PASS" endtime="20161208 13:15:26.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.342">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:26.341" status="PASS" endtime="20161208 13:15:26.342"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:26.344">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:26.343" status="PASS" endtime="20161208 13:15:26.344"></status>
</kw>
<status starttime="20161208 13:15:26.342" status="PASS" endtime="20161208 13:15:26.344"></status>
</kw>
<status starttime="20161208 13:15:26.340" status="PASS" endtime="20161208 13:15:26.344"></status>
</kw>
<status starttime="20161208 13:15:26.335" status="PASS" endtime="20161208 13:15:26.344"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:26.345">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:15:26.345" status="PASS" endtime="20161208 13:15:26.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:26.346" status="PASS" endtime="20161208 13:15:26.346"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.347">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:15:26.346" status="PASS" endtime="20161208 13:15:26.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.347">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:15:26.347" status="PASS" endtime="20161208 13:15:26.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.686">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:26.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:26.347" status="PASS" endtime="20161208 13:15:26.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:26.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:26.687" status="PASS" endtime="20161208 13:15:26.688"></status>
</kw>
<status starttime="20161208 13:15:26.344" status="PASS" endtime="20161208 13:15:26.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.953">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:26.953">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:26.688" status="PASS" endtime="20161208 13:15:26.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.961">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:26.960" status="PASS" endtime="20161208 13:15:26.961"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:26.963">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:26.962" status="PASS" endtime="20161208 13:15:26.963"></status>
</kw>
<status starttime="20161208 13:15:26.961" status="PASS" endtime="20161208 13:15:26.963"></status>
</kw>
<status starttime="20161208 13:15:26.959" status="PASS" endtime="20161208 13:15:26.963"></status>
</kw>
<status starttime="20161208 13:15:26.954" status="PASS" endtime="20161208 13:15:26.963"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:26.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:26.331" status="PASS" endtime="20161208 13:15:26.964"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:26.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:26.329" status="PASS" endtime="20161208 13:15:26.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:26.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:26.964" status="PASS" endtime="20161208 13:15:26.965"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:26.965">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:15:26.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:15:26.965">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:15:26.965" status="PASS" endtime="20161208 13:15:26.965"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:26.966">${state} = 0</msg>
<status starttime="20161208 13:15:26.326" status="PASS" endtime="20161208 13:15:26.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:15:26.966">0 != 1</msg>
<status starttime="20161208 13:15:26.966" status="FAIL" endtime="20161208 13:15:26.966"></status>
</kw>
<status starttime="20161208 13:15:26.325" status="FAIL" endtime="20161208 13:15:26.966"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.970">@{arglist} = [ ]</msg>
<status starttime="20161208 13:15:36.969" status="PASS" endtime="20161208 13:15:36.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.971">${args} = {u'data': []}</msg>
<status starttime="20161208 13:15:36.970" status="PASS" endtime="20161208 13:15:36.971"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.973">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:15:36.972" status="PASS" endtime="20161208 13:15:36.973"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.975">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:15:36.974" status="PASS" endtime="20161208 13:15:36.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:36.975" status="PASS" endtime="20161208 13:15:36.976"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:15:36.976" status="PASS" endtime="20161208 13:15:36.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.984">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:36.983" status="PASS" endtime="20161208 13:15:36.984"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:36.985">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:36.985" status="PASS" endtime="20161208 13:15:36.985"></status>
</kw>
<status starttime="20161208 13:15:36.985" status="PASS" endtime="20161208 13:15:36.985"></status>
</kw>
<status starttime="20161208 13:15:36.982" status="PASS" endtime="20161208 13:15:36.986"></status>
</kw>
<status starttime="20161208 13:15:36.977" status="PASS" endtime="20161208 13:15:36.986"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:36.986">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:15:36.986" status="PASS" endtime="20161208 13:15:36.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:36.987" status="PASS" endtime="20161208 13:15:36.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.988">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:15:36.988" status="PASS" endtime="20161208 13:15:36.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:36.989">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:15:36.989" status="PASS" endtime="20161208 13:15:36.989"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:37.438">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:37.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:36.989" status="PASS" endtime="20161208 13:15:37.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:37.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:37.439" status="PASS" endtime="20161208 13:15:37.439"></status>
</kw>
<status starttime="20161208 13:15:36.986" status="PASS" endtime="20161208 13:15:37.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:37.791">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:37.791">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:37.439" status="PASS" endtime="20161208 13:15:37.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:37.796">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:37.795" status="PASS" endtime="20161208 13:15:37.796"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:37.797">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:37.797" status="PASS" endtime="20161208 13:15:37.797"></status>
</kw>
<status starttime="20161208 13:15:37.796" status="PASS" endtime="20161208 13:15:37.797"></status>
</kw>
<status starttime="20161208 13:15:37.795" status="PASS" endtime="20161208 13:15:37.797"></status>
</kw>
<status starttime="20161208 13:15:37.791" status="PASS" endtime="20161208 13:15:37.797"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:37.799">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:36.973" status="PASS" endtime="20161208 13:15:37.799"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:37.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:36.971" status="PASS" endtime="20161208 13:15:37.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:37.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:37.800" status="PASS" endtime="20161208 13:15:37.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:37.801">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:15:37.801">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:15:37.801">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:15:37.801" status="PASS" endtime="20161208 13:15:37.801"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:37.801">${state} = 0</msg>
<status starttime="20161208 13:15:36.968" status="PASS" endtime="20161208 13:15:37.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:15:37.802">0 != 1</msg>
<status starttime="20161208 13:15:37.801" status="FAIL" endtime="20161208 13:15:37.802"></status>
</kw>
<status starttime="20161208 13:15:36.967" status="FAIL" endtime="20161208 13:15:37.802"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.805">@{arglist} = [ ]</msg>
<status starttime="20161208 13:15:47.804" status="PASS" endtime="20161208 13:15:47.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.806">${args} = {u'data': []}</msg>
<status starttime="20161208 13:15:47.805" status="PASS" endtime="20161208 13:15:47.806"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.808">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:15:47.807" status="PASS" endtime="20161208 13:15:47.808"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.810">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:15:47.809" status="PASS" endtime="20161208 13:15:47.810"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.811">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:47.811" status="PASS" endtime="20161208 13:15:47.811"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:15:47.812" status="PASS" endtime="20161208 13:15:47.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.817">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:47.817" status="PASS" endtime="20161208 13:15:47.818"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:47.818">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:47.818" status="PASS" endtime="20161208 13:15:47.818"></status>
</kw>
<status starttime="20161208 13:15:47.818" status="PASS" endtime="20161208 13:15:47.819"></status>
</kw>
<status starttime="20161208 13:15:47.816" status="PASS" endtime="20161208 13:15:47.819"></status>
</kw>
<status starttime="20161208 13:15:47.813" status="PASS" endtime="20161208 13:15:47.819"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:47.819">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:15:47.819" status="PASS" endtime="20161208 13:15:47.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.820">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:47.820" status="PASS" endtime="20161208 13:15:47.820"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.821">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:15:47.821" status="PASS" endtime="20161208 13:15:47.821"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:47.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:15:47.821" status="PASS" endtime="20161208 13:15:47.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:48.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:48.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:47.822" status="PASS" endtime="20161208 13:15:48.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:48.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:48.170" status="PASS" endtime="20161208 13:15:48.170"></status>
</kw>
<status starttime="20161208 13:15:47.819" status="PASS" endtime="20161208 13:15:48.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:48.435">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:48.435">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:48.170" status="PASS" endtime="20161208 13:15:48.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:48.440">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:48.440" status="PASS" endtime="20161208 13:15:48.440"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:48.441">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:48.441" status="PASS" endtime="20161208 13:15:48.441"></status>
</kw>
<status starttime="20161208 13:15:48.441" status="PASS" endtime="20161208 13:15:48.441"></status>
</kw>
<status starttime="20161208 13:15:48.438" status="PASS" endtime="20161208 13:15:48.442"></status>
</kw>
<status starttime="20161208 13:15:48.435" status="PASS" endtime="20161208 13:15:48.442"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:48.442">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:47.808" status="PASS" endtime="20161208 13:15:48.442"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:48.442">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:47.806" status="PASS" endtime="20161208 13:15:48.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:48.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:48.442" status="PASS" endtime="20161208 13:15:48.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:48.443">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:15:48.443">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:15:48.443">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:15:48.443" status="PASS" endtime="20161208 13:15:48.443"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:48.443">${state} = 0</msg>
<status starttime="20161208 13:15:47.803" status="PASS" endtime="20161208 13:15:48.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:15:48.444">0 != 1</msg>
<status starttime="20161208 13:15:48.444" status="FAIL" endtime="20161208 13:15:48.444"></status>
</kw>
<status starttime="20161208 13:15:47.803" status="FAIL" endtime="20161208 13:15:48.444"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.447">@{arglist} = [ ]</msg>
<status starttime="20161208 13:15:58.446" status="PASS" endtime="20161208 13:15:58.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.448">${args} = {u'data': []}</msg>
<status starttime="20161208 13:15:58.447" status="PASS" endtime="20161208 13:15:58.448"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.450">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:15:58.449" status="PASS" endtime="20161208 13:15:58.450"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.452">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:15:58.452" status="PASS" endtime="20161208 13:15:58.452"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:58.453" status="PASS" endtime="20161208 13:15:58.453"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:15:58.454" status="PASS" endtime="20161208 13:15:58.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.461">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:58.460" status="PASS" endtime="20161208 13:15:58.461"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:58.462">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:15:58.462" status="PASS" endtime="20161208 13:15:58.462"></status>
</kw>
<status starttime="20161208 13:15:58.461" status="PASS" endtime="20161208 13:15:58.462"></status>
</kw>
<status starttime="20161208 13:15:58.459" status="PASS" endtime="20161208 13:15:58.463"></status>
</kw>
<status starttime="20161208 13:15:58.454" status="PASS" endtime="20161208 13:15:58.463"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:58.465">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:15:58.464" status="PASS" endtime="20161208 13:15:58.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.495">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:15:58.465" status="PASS" endtime="20161208 13:15:58.495"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.496">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:15:58.495" status="PASS" endtime="20161208 13:15:58.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:58.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:15:58.496" status="PASS" endtime="20161208 13:15:58.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:59.116">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:59.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:58.497" status="PASS" endtime="20161208 13:15:59.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:59.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:59.116" status="PASS" endtime="20161208 13:15:59.117"></status>
</kw>
<status starttime="20161208 13:15:58.463" status="PASS" endtime="20161208 13:15:59.117"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:59.589">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:15:59.589">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:59.117" status="PASS" endtime="20161208 13:15:59.589"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:59.593">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:59.593" status="PASS" endtime="20161208 13:15:59.593"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:59.594">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:15:59.594" status="PASS" endtime="20161208 13:15:59.594"></status>
</kw>
<status starttime="20161208 13:15:59.593" status="PASS" endtime="20161208 13:15:59.595"></status>
</kw>
<status starttime="20161208 13:15:59.592" status="PASS" endtime="20161208 13:15:59.595"></status>
</kw>
<status starttime="20161208 13:15:59.589" status="PASS" endtime="20161208 13:15:59.595"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:59.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:58.450" status="PASS" endtime="20161208 13:15:59.595"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:59.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:15:58.448" status="PASS" endtime="20161208 13:15:59.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:15:59.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:15:59.595" status="PASS" endtime="20161208 13:15:59.596"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:15:59.596">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:15:59.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:15:59.597">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:15:59.596" status="PASS" endtime="20161208 13:15:59.597"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:15:59.597">${state} = 0</msg>
<status starttime="20161208 13:15:58.446" status="PASS" endtime="20161208 13:15:59.597"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:15:59.597">0 != 1</msg>
<status starttime="20161208 13:15:59.597" status="FAIL" endtime="20161208 13:15:59.597"></status>
</kw>
<status starttime="20161208 13:15:58.445" status="FAIL" endtime="20161208 13:15:59.598"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.600">@{arglist} = [ ]</msg>
<status starttime="20161208 13:16:09.600" status="PASS" endtime="20161208 13:16:09.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.601">${args} = {u'data': []}</msg>
<status starttime="20161208 13:16:09.601" status="PASS" endtime="20161208 13:16:09.601"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.604">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:16:09.603" status="PASS" endtime="20161208 13:16:09.604"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.607">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:16:09.607" status="PASS" endtime="20161208 13:16:09.607"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.608">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:09.608" status="PASS" endtime="20161208 13:16:09.608"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:16:09.609" status="PASS" endtime="20161208 13:16:09.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.617">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:09.616" status="PASS" endtime="20161208 13:16:09.617"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:09.618">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:09.618" status="PASS" endtime="20161208 13:16:09.618"></status>
</kw>
<status starttime="20161208 13:16:09.617" status="PASS" endtime="20161208 13:16:09.618"></status>
</kw>
<status starttime="20161208 13:16:09.615" status="PASS" endtime="20161208 13:16:09.618"></status>
</kw>
<status starttime="20161208 13:16:09.610" status="PASS" endtime="20161208 13:16:09.618"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:09.619">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:09.619" status="PASS" endtime="20161208 13:16:09.620"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.621">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:09.621" status="PASS" endtime="20161208 13:16:09.621"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.621">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:09.621" status="PASS" endtime="20161208 13:16:09.621"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:09.622">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:09.622" status="PASS" endtime="20161208 13:16:09.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:10.071">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:10.071">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:09.622" status="PASS" endtime="20161208 13:16:10.071"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:10.072">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:10.071" status="PASS" endtime="20161208 13:16:10.072"></status>
</kw>
<status starttime="20161208 13:16:09.618" status="PASS" endtime="20161208 13:16:10.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:10.343">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:10.344">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:10.073" status="PASS" endtime="20161208 13:16:10.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:10.350">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:10.350" status="PASS" endtime="20161208 13:16:10.350"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:10.352">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:10.351" status="PASS" endtime="20161208 13:16:10.352"></status>
</kw>
<status starttime="20161208 13:16:10.351" status="PASS" endtime="20161208 13:16:10.353"></status>
</kw>
<status starttime="20161208 13:16:10.349" status="PASS" endtime="20161208 13:16:10.353"></status>
</kw>
<status starttime="20161208 13:16:10.344" status="PASS" endtime="20161208 13:16:10.353"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:10.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:09.604" status="PASS" endtime="20161208 13:16:10.353"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:10.354">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:09.602" status="PASS" endtime="20161208 13:16:10.354"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:10.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:10.354" status="PASS" endtime="20161208 13:16:10.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:10.355">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:10.355">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:16:10.355">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:16:10.355" status="PASS" endtime="20161208 13:16:10.355"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:10.356">${state} = 0</msg>
<status starttime="20161208 13:16:09.599" status="PASS" endtime="20161208 13:16:10.356"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:10.356">0 != 1</msg>
<status starttime="20161208 13:16:10.356" status="FAIL" endtime="20161208 13:16:10.356"></status>
</kw>
<status starttime="20161208 13:16:09.598" status="FAIL" endtime="20161208 13:16:10.357"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.359">@{arglist} = [ ]</msg>
<status starttime="20161208 13:16:20.359" status="PASS" endtime="20161208 13:16:20.359"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.360">${args} = {u'data': []}</msg>
<status starttime="20161208 13:16:20.360" status="PASS" endtime="20161208 13:16:20.360"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.362">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:16:20.362" status="PASS" endtime="20161208 13:16:20.363"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.365">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:16:20.365" status="PASS" endtime="20161208 13:16:20.365"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.366">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:20.365" status="PASS" endtime="20161208 13:16:20.366"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:16:20.366" status="PASS" endtime="20161208 13:16:20.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.372">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:20.371" status="PASS" endtime="20161208 13:16:20.372"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:20.374">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:20.373" status="PASS" endtime="20161208 13:16:20.374"></status>
</kw>
<status starttime="20161208 13:16:20.373" status="PASS" endtime="20161208 13:16:20.374"></status>
</kw>
<status starttime="20161208 13:16:20.371" status="PASS" endtime="20161208 13:16:20.374"></status>
</kw>
<status starttime="20161208 13:16:20.367" status="PASS" endtime="20161208 13:16:20.374"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:20.375">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:20.375" status="PASS" endtime="20161208 13:16:20.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:20.376" status="PASS" endtime="20161208 13:16:20.377"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:20.377" status="PASS" endtime="20161208 13:16:20.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:20.377" status="PASS" endtime="20161208 13:16:20.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.718">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:20.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:20.378" status="PASS" endtime="20161208 13:16:20.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:20.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:20.718" status="PASS" endtime="20161208 13:16:20.719"></status>
</kw>
<status starttime="20161208 13:16:20.374" status="PASS" endtime="20161208 13:16:20.719"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.979">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:20.979">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:20.719" status="PASS" endtime="20161208 13:16:20.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.984">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:20.983" status="PASS" endtime="20161208 13:16:20.984"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:20.984">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:20.984" status="PASS" endtime="20161208 13:16:20.985"></status>
</kw>
<status starttime="20161208 13:16:20.984" status="PASS" endtime="20161208 13:16:20.985"></status>
</kw>
<status starttime="20161208 13:16:20.983" status="PASS" endtime="20161208 13:16:20.985"></status>
</kw>
<status starttime="20161208 13:16:20.980" status="PASS" endtime="20161208 13:16:20.985"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:20.985">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:20.363" status="PASS" endtime="20161208 13:16:20.985"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:20.986">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:20.361" status="PASS" endtime="20161208 13:16:20.986"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:20.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:20.986" status="PASS" endtime="20161208 13:16:20.987"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:20.987">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:20.988">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:16:20.988">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:16:20.987" status="PASS" endtime="20161208 13:16:20.988"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:20.988">${state} = 0</msg>
<status starttime="20161208 13:16:20.358" status="PASS" endtime="20161208 13:16:20.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:20.989">0 != 1</msg>
<status starttime="20161208 13:16:20.989" status="FAIL" endtime="20161208 13:16:20.989"></status>
</kw>
<status starttime="20161208 13:16:20.357" status="FAIL" endtime="20161208 13:16:20.990"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:30.992">@{arglist} = [ ]</msg>
<status starttime="20161208 13:16:30.992" status="PASS" endtime="20161208 13:16:30.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:30.993">${args} = {u'data': []}</msg>
<status starttime="20161208 13:16:30.993" status="PASS" endtime="20161208 13:16:30.993"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:30.995">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161208 13:16:30.995" status="PASS" endtime="20161208 13:16:30.995"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:30.998">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161208 13:16:30.997" status="PASS" endtime="20161208 13:16:30.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:30.999">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:30.998" status="PASS" endtime="20161208 13:16:30.999"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:16:30.999" status="PASS" endtime="20161208 13:16:31.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.006">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:31.006" status="PASS" endtime="20161208 13:16:31.006"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.008">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:31.008" status="PASS" endtime="20161208 13:16:31.008"></status>
</kw>
<status starttime="20161208 13:16:31.006" status="PASS" endtime="20161208 13:16:31.008"></status>
</kw>
<status starttime="20161208 13:16:31.005" status="PASS" endtime="20161208 13:16:31.008"></status>
</kw>
<status starttime="20161208 13:16:31.000" status="PASS" endtime="20161208 13:16:31.008"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.009">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:31.009" status="PASS" endtime="20161208 13:16:31.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:31.010" status="PASS" endtime="20161208 13:16:31.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.011">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:31.011" status="PASS" endtime="20161208 13:16:31.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.011">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:31.011" status="PASS" endtime="20161208 13:16:31.011"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.338">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:31.339">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:31.012" status="PASS" endtime="20161208 13:16:31.339"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:31.339" status="PASS" endtime="20161208 13:16:31.339"></status>
</kw>
<status starttime="20161208 13:16:31.008" status="PASS" endtime="20161208 13:16:31.339"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.601">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:31.601">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:31.340" status="PASS" endtime="20161208 13:16:31.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.605">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:31.604" status="PASS" endtime="20161208 13:16:31.605"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.607">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:31.606" status="PASS" endtime="20161208 13:16:31.607"></status>
</kw>
<status starttime="20161208 13:16:31.605" status="PASS" endtime="20161208 13:16:31.607"></status>
</kw>
<status starttime="20161208 13:16:31.604" status="PASS" endtime="20161208 13:16:31.607"></status>
</kw>
<status starttime="20161208 13:16:31.601" status="PASS" endtime="20161208 13:16:31.607"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:31.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:30.996" status="PASS" endtime="20161208 13:16:31.607"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:31.608">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:30.993" status="PASS" endtime="20161208 13:16:31.608"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:31.608" status="PASS" endtime="20161208 13:16:31.608"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.609">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:31.609">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:16:31.609">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:16:31.608" status="PASS" endtime="20161208 13:16:31.609"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:31.609">${state} = 0</msg>
<status starttime="20161208 13:16:30.991" status="PASS" endtime="20161208 13:16:31.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:31.610">0 != 1</msg>
<status starttime="20161208 13:16:31.609" status="FAIL" endtime="20161208 13:16:31.610"></status>
</kw>
<status starttime="20161208 13:16:30.990" status="FAIL" endtime="20161208 13:16:31.610"></status>
</kw>
<msg level="FAIL" timestamp="20161208 13:16:31.610">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</msg>
<status starttime="20161208 13:13:23.825" status="FAIL" endtime="20161208 13:16:31.610"></status>
</kw>
<status starttime="20161208 13:13:23.178" status="FAIL" endtime="20161208 13:16:31.610"></status>
</kw>
<status starttime="20161208 13:13:20.878" status="FAIL" endtime="20161208 13:16:31.611"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="FFDC">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.615">${cur_time} = 2016-12-08 13:16:31:615135</msg>
<status starttime="20161208 13:16:31.615" status="PASS" endtime="20161208 13:16:31.615"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.616">${cur_time} = 20161208131631615135</msg>
<status starttime="20161208 13:16:31.616" status="PASS" endtime="20161208 13:16:31.616"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:31.616">${cur_time} = 20161208131631615135</msg>
<status starttime="20161208 13:16:31.615" status="PASS" endtime="20161208 13:16:31.616"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.620">${FFDC_TIME} = 20161208131631615135</msg>
<status starttime="20161208 13:16:31.616" status="PASS" endtime="20161208 13:16:31.620"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status starttime="20161208 13:16:31.620" status="PASS" endtime="20161208 13:16:31.620"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.621">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20161208 13:16:31.621" status="PASS" endtime="20161208 13:16:31.621"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.622">${suite_name} = 20161208131631615135_TestsTestBasicPoweron</msg>
<status starttime="20161208 13:16:31.621" status="PASS" endtime="20161208 13:16:31.622"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.622">${test_name} = powerontest</msg>
<status starttime="20161208 13:16:31.622" status="PASS" endtime="20161208 13:16:31.622"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.623">${test_name} = 20161208131631615135_powerontest</msg>
<status starttime="20161208 13:16:31.622" status="PASS" endtime="20161208 13:16:31.623"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:31.623">${suitename} = 20161208131631615135_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161208 13:16:31.623">${testname} = 20161208131631615135_powerontest</msg>
<status starttime="20161208 13:16:31.620" status="PASS" endtime="20161208 13:16:31.623"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.626">${FFDC_DIR_PATH} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest</msg>
<status starttime="20161208 13:16:31.623" status="PASS" endtime="20161208 13:16:31.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.627">${prefix} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_</msg>
<status starttime="20161208 13:16:31.626" status="PASS" endtime="20161208 13:16:31.627"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.631">${LOG_PREFIX} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_</msg>
<status starttime="20161208 13:16:31.627" status="PASS" endtime="20161208 13:16:31.631"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.632">Created directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.631" status="PASS" endtime="20161208 13:16:31.632"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.635">${FFDC_FILE_PATH} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt</msg>
<status starttime="20161208 13:16:31.633" status="PASS" endtime="20161208 13:16:31.636"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.636">Created file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.636" status="PASS" endtime="20161208 13:16:31.636"></status>
</kw>
<status starttime="20161208 13:16:31.632" status="PASS" endtime="20161208 13:16:31.636"></status>
</kw>
<status starttime="20161208 13:16:31.631" status="PASS" endtime="20161208 13:16:31.637"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.638">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.638" status="PASS" endtime="20161208 13:16:31.638"></status>
</kw>
<status starttime="20161208 13:16:31.637" status="PASS" endtime="20161208 13:16:31.638"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.639">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.639" status="PASS" endtime="20161208 13:16:31.639"></status>
</kw>
<status starttime="20161208 13:16:31.638" status="PASS" endtime="20161208 13:16:31.639"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.640">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.640" status="PASS" endtime="20161208 13:16:31.641"></status>
</kw>
<status starttime="20161208 13:16:31.639" status="PASS" endtime="20161208 13:16:31.641"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.642">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.641" status="PASS" endtime="20161208 13:16:31.642"></status>
</kw>
<status starttime="20161208 13:16:31.641" status="PASS" endtime="20161208 13:16:31.642"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.643">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.643" status="PASS" endtime="20161208 13:16:31.643"></status>
</kw>
<status starttime="20161208 13:16:31.642" status="PASS" endtime="20161208 13:16:31.643"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.644">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.644" status="PASS" endtime="20161208 13:16:31.644"></status>
</kw>
<status starttime="20161208 13:16:31.643" status="PASS" endtime="20161208 13:16:31.645"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.646">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.645" status="PASS" endtime="20161208 13:16:31.646"></status>
</kw>
<status starttime="20161208 13:16:31.645" status="PASS" endtime="20161208 13:16:31.646"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.647">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.647" status="PASS" endtime="20161208 13:16:31.647"></status>
</kw>
<status starttime="20161208 13:16:31.646" status="PASS" endtime="20161208 13:16:31.647"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.648">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.648" status="PASS" endtime="20161208 13:16:31.648"></status>
</kw>
<status starttime="20161208 13:16:31.647" status="PASS" endtime="20161208 13:16:31.648"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.650">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.649" status="PASS" endtime="20161208 13:16:31.650"></status>
</kw>
<status starttime="20161208 13:16:31.649" status="PASS" endtime="20161208 13:16:31.650"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.651">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.650" status="PASS" endtime="20161208 13:16:31.651"></status>
</kw>
<status starttime="20161208 13:16:31.650" status="PASS" endtime="20161208 13:16:31.651"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.652">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.652" status="PASS" endtime="20161208 13:16:31.652"></status>
</kw>
<status starttime="20161208 13:16:31.651" status="PASS" endtime="20161208 13:16:31.652"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.653">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.653" status="PASS" endtime="20161208 13:16:31.653"></status>
</kw>
<status starttime="20161208 13:16:31.652" status="PASS" endtime="20161208 13:16:31.653"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.654">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.654" status="PASS" endtime="20161208 13:16:31.655"></status>
</kw>
<status starttime="20161208 13:16:31.653" status="PASS" endtime="20161208 13:16:31.655"></status>
</kw>
<status starttime="20161208 13:16:31.649" status="PASS" endtime="20161208 13:16:31.655"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.657">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.656" status="PASS" endtime="20161208 13:16:31.657"></status>
</kw>
<status starttime="20161208 13:16:31.655" status="PASS" endtime="20161208 13:16:31.657"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.657">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20161208 13:16:31.657" status="PASS" endtime="20161208 13:16:31.657"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.660">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.659" status="PASS" endtime="20161208 13:16:31.660"></status>
</kw>
<status starttime="20161208 13:16:31.658" status="PASS" endtime="20161208 13:16:31.660"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.661">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.661" status="PASS" endtime="20161208 13:16:31.661"></status>
</kw>
<status starttime="20161208 13:16:31.660" status="PASS" endtime="20161208 13:16:31.661"></status>
</kw>
<status starttime="20161208 13:16:31.657" status="PASS" endtime="20161208 13:16:31.661"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.662">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.662" status="PASS" endtime="20161208 13:16:31.662"></status>
</kw>
<status starttime="20161208 13:16:31.661" status="PASS" endtime="20161208 13:16:31.662"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.663">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.663" status="PASS" endtime="20161208 13:16:31.663"></status>
</kw>
<status starttime="20161208 13:16:31.663" status="PASS" endtime="20161208 13:16:31.664"></status>
</kw>
<status starttime="20161208 13:16:31.661" status="PASS" endtime="20161208 13:16:31.664"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.665">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.664" status="PASS" endtime="20161208 13:16:31.665"></status>
</kw>
<status starttime="20161208 13:16:31.664" status="PASS" endtime="20161208 13:16:31.665"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.666">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.666" status="PASS" endtime="20161208 13:16:31.666"></status>
</kw>
<status starttime="20161208 13:16:31.665" status="PASS" endtime="20161208 13:16:31.666"></status>
</kw>
<status starttime="20161208 13:16:31.664" status="PASS" endtime="20161208 13:16:31.666"></status>
</kw>
<status starttime="20161208 13:16:31.657" status="PASS" endtime="20161208 13:16:31.666"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:31.667">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:31.667" status="PASS" endtime="20161208 13:16:31.667"></status>
</kw>
<status starttime="20161208 13:16:31.666" status="PASS" endtime="20161208 13:16:31.668"></status>
</kw>
<status starttime="20161208 13:16:31.637" status="PASS" endtime="20161208 13:16:31.668"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.668">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20161208 13:16:31.668" status="PASS" endtime="20161208 13:16:31.668"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.670">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') ]</msg>
<status starttime="20161208 13:16:31.669" status="PASS" endtime="20161208 13:16:31.670"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:31.673">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:16:31.673" status="FAIL" endtime="20161208 13:16:31.673"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:31.673">${has_host} = False</msg>
<status starttime="20161208 13:16:31.672" status="PASS" endtime="20161208 13:16:31.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:16:31.676" status="PASS" endtime="20161208 13:16:31.677"></status>
</kw>
<status starttime="20161208 13:16:31.673" status="PASS" endtime="20161208 13:16:31.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.680">${port_num} = 22</msg>
<status starttime="20161208 13:16:31.680" status="PASS" endtime="20161208 13:16:31.680"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.681">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:16:31.681" status="PASS" endtime="20161208 13:16:31.681"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:31.681">${https_num} = 443</msg>
<status starttime="20161208 13:16:31.681" status="PASS" endtime="20161208 13:16:31.681"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.682">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:16:31.682" status="PASS" endtime="20161208 13:16:31.682"></status>
</kw>
<status starttime="20161208 13:16:31.680" status="PASS" endtime="20161208 13:16:31.682"></status>
</kw>
<status starttime="20161208 13:16:31.677" status="PASS" endtime="20161208 13:16:31.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:31.683">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:16:31.683" status="FAIL" endtime="20161208 13:16:31.683"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:31.683">${has_port} = False</msg>
<status starttime="20161208 13:16:31.683" status="PASS" endtime="20161208 13:16:31.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:16:31.687" status="PASS" endtime="20161208 13:16:31.687"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:16:31.688" status="PASS" endtime="20161208 13:16:31.688"></status>
</kw>
<status starttime="20161208 13:16:31.687" status="PASS" endtime="20161208 13:16:31.688"></status>
</kw>
<status starttime="20161208 13:16:31.684" status="PASS" endtime="20161208 13:16:31.688"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:31.689">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:16:33.881">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:16:31.689" status="PASS" endtime="20161208 13:16:33.881"></status>
</kw>
<status starttime="20161208 13:16:31.671" status="PASS" endtime="20161208 13:16:33.882"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:33.883">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20161208 13:16:33.882" status="PASS" endtime="20161208 13:16:33.883"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:33.885">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_sensor_list', '...</msg>
<status starttime="20161208 13:16:33.885" status="PASS" endtime="20161208 13:16:33.885"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:33.887">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_record_log.txt</msg>
<status starttime="20161208 13:16:33.886" status="PASS" endtime="20161208 13:16:33.887"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:33.889">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20161208 13:16:33.888" status="PASS" endtime="20161208 13:16:33.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 13:16:33.889" status="PASS" endtime="20161208 13:16:33.895"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:33.896">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:33.896" status="PASS" endtime="20161208 13:16:33.897"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:33.897">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:33.897" status="PASS" endtime="20161208 13:16:33.897"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:33.898">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:33.898" status="PASS" endtime="20161208 13:16:33.898"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:33.899">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:33.898" status="PASS" endtime="20161208 13:16:33.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.234">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:34.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:33.899" status="PASS" endtime="20161208 13:16:34.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:34.235">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:34.235" status="PASS" endtime="20161208 13:16:34.235"></status>
</kw>
<status starttime="20161208 13:16:33.895" status="PASS" endtime="20161208 13:16:34.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.433">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:16:34.433">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:34.235" status="PASS" endtime="20161208 13:16:34.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 13:16:34.434" status="PASS" endtime="20161208 13:16:34.437"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:34.437">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:33.887" status="PASS" endtime="20161208 13:16:34.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:34.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:34.438" status="PASS" endtime="20161208 13:16:34.438"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:34.438">${status} = True</msg>
<status starttime="20161208 13:16:34.437" status="PASS" endtime="20161208 13:16:34.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 13:16:34.438" status="PASS" endtime="20161208 13:16:34.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.442">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:34.442">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 13:16:34.442">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status starttime="20161208 13:16:34.441" status="PASS" endtime="20161208 13:16:34.442"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:34.443">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_record_log.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_record_log.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:34.443" status="PASS" endtime="20161208 13:16:34.443"></status>
</kw>
<status starttime="20161208 13:16:34.442" status="PASS" endtime="20161208 13:16:34.443"></status>
</kw>
<status starttime="20161208 13:16:33.886" status="PASS" endtime="20161208 13:16:34.443"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.444">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_led.txt</msg>
<status starttime="20161208 13:16:34.444" status="PASS" endtime="20161208 13:16:34.444"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.445">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20161208 13:16:34.445" status="PASS" endtime="20161208 13:16:34.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 13:16:34.445" status="PASS" endtime="20161208 13:16:34.448"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:34.449">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:34.449" status="PASS" endtime="20161208 13:16:34.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:34.450" status="PASS" endtime="20161208 13:16:34.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.450">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:34.450" status="PASS" endtime="20161208 13:16:34.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:34.451" status="PASS" endtime="20161208 13:16:34.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:34.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:34.781">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:34.451" status="PASS" endtime="20161208 13:16:34.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:34.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:34.781" status="PASS" endtime="20161208 13:16:34.782"></status>
</kw>
<status starttime="20161208 13:16:34.448" status="PASS" endtime="20161208 13:16:34.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.003">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:16:35.004">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:34.782" status="PASS" endtime="20161208 13:16:35.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 13:16:35.004" status="PASS" endtime="20161208 13:16:35.008"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:35.009">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:34.444" status="PASS" endtime="20161208 13:16:35.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:35.010">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:35.010" status="PASS" endtime="20161208 13:16:35.010"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:35.011">${status} = True</msg>
<status starttime="20161208 13:16:35.009" status="PASS" endtime="20161208 13:16:35.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 13:16:35.011" status="PASS" endtime="20161208 13:16:35.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.016">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/231": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:11:21 06:12:45"
    }, 
    "/org/openbmc/records/events/231/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/233": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:11:21 06:12:47"
    }, 
    "/org/openbmc/records/events/233/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:35.016">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 13:16:35.017">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/231": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status starttime="20161208 13:16:35.016" status="PASS" endtime="20161208 13:16:35.017"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:35.018">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_led.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:35.017" status="PASS" endtime="20161208 13:16:35.018"></status>
</kw>
<status starttime="20161208 13:16:35.017" status="PASS" endtime="20161208 13:16:35.018"></status>
</kw>
<status starttime="20161208 13:16:34.443" status="PASS" endtime="20161208 13:16:35.018"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.019">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_inventory.txt</msg>
<status starttime="20161208 13:16:35.018" status="PASS" endtime="20161208 13:16:35.019"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.020">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status starttime="20161208 13:16:35.020" status="PASS" endtime="20161208 13:16:35.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 13:16:35.020" status="PASS" endtime="20161208 13:16:35.023"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:35.024">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:35.023" status="PASS" endtime="20161208 13:16:35.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.025">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:35.024" status="PASS" endtime="20161208 13:16:35.025"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.025">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:35.025" status="PASS" endtime="20161208 13:16:35.025"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.026">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:35.026" status="PASS" endtime="20161208 13:16:35.026"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:35.355">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:35.355">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:35.026" status="PASS" endtime="20161208 13:16:35.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:35.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:35.356" status="PASS" endtime="20161208 13:16:35.356"></status>
</kw>
<status starttime="20161208 13:16:35.023" status="PASS" endtime="20161208 13:16:35.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:38.519">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:16:38.519">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:35.356" status="PASS" endtime="20161208 13:16:38.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 13:16:38.520" status="PASS" endtime="20161208 13:16:38.525"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:38.525">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:35.019" status="PASS" endtime="20161208 13:16:38.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:38.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:38.526" status="PASS" endtime="20161208 13:16:38.527"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:38.527">${status} = True</msg>
<status starttime="20161208 13:16:38.526" status="PASS" endtime="20161208 13:16:38.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 13:16:38.528" status="PASS" endtime="20161208 13:16:38.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:38.538">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-312-gfa4fd8f-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/231"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/233"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/233"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:38.539">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 13:16:38.540">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-fda20bd",
            "Custom Field 2": "\tskiboot-5.2.0-opdirty...</msg>
<status starttime="20161208 13:16:38.533" status="PASS" endtime="20161208 13:16:38.540"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:38.542">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_inventory.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:38.541" status="PASS" endtime="20161208 13:16:38.542"></status>
</kw>
<status starttime="20161208 13:16:38.540" status="PASS" endtime="20161208 13:16:38.542"></status>
</kw>
<status starttime="20161208 13:16:35.018" status="PASS" endtime="20161208 13:16:38.542"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:38.543">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_sensor_list.txt</msg>
<status starttime="20161208 13:16:38.542" status="PASS" endtime="20161208 13:16:38.543"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:38.544">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20161208 13:16:38.543" status="PASS" endtime="20161208 13:16:38.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161208 13:16:38.544" status="PASS" endtime="20161208 13:16:38.547"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:38.548">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:38.547" status="PASS" endtime="20161208 13:16:38.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:38.548">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:38.548" status="PASS" endtime="20161208 13:16:38.548"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:38.549">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:38.549" status="PASS" endtime="20161208 13:16:38.549"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:38.550">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:38.549" status="PASS" endtime="20161208 13:16:38.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:39.060">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:39.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:38.550" status="PASS" endtime="20161208 13:16:39.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:39.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:39.060" status="PASS" endtime="20161208 13:16:39.061"></status>
</kw>
<status starttime="20161208 13:16:38.547" status="PASS" endtime="20161208 13:16:39.061"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:41.722">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:16:41.723">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:39.061" status="PASS" endtime="20161208 13:16:41.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161208 13:16:41.723" status="PASS" endtime="20161208 13:16:41.727"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:41.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:38.543" status="PASS" endtime="20161208 13:16:41.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:41.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:41.728" status="PASS" endtime="20161208 13:16:41.729"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:41.729">${status} = True</msg>
<status starttime="20161208 13:16:41.728" status="PASS" endtime="20161208 13:16:41.729"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161208 13:16:41.729" status="PASS" endtime="20161208 13:16:41.732"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:41.736">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": -124, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": -172, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 5, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 25500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 27000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:41.737">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161208 13:16:41.737">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status starttime="20161208 13:16:41.732" status="PASS" endtime="20161208 13:16:41.737"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:41.739">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_sensor_list.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:41.738" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:41.737" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:38.542" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:33.886" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:33.884" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:33.883" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:33.883" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:31.671" status="PASS" endtime="20161208 13:16:41.739"></status>
</kw>
<status starttime="20161208 13:16:31.671" status="PASS" endtime="20161208 13:16:41.740"></status>
</kw>
<status starttime="20161208 13:16:31.670" status="PASS" endtime="20161208 13:16:41.740"></status>
</kw>
<status starttime="20161208 13:16:31.670" status="PASS" endtime="20161208 13:16:41.740"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:41.742">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:16:41.742" status="FAIL" endtime="20161208 13:16:41.742"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:41.742">${has_host} = False</msg>
<status starttime="20161208 13:16:41.742" status="PASS" endtime="20161208 13:16:41.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:16:41.746" status="PASS" endtime="20161208 13:16:41.746"></status>
</kw>
<status starttime="20161208 13:16:41.743" status="PASS" endtime="20161208 13:16:41.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:41.750">${port_num} = 22</msg>
<status starttime="20161208 13:16:41.750" status="PASS" endtime="20161208 13:16:41.750"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:41.750">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:16:41.750" status="PASS" endtime="20161208 13:16:41.750"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:41.751">${https_num} = 443</msg>
<status starttime="20161208 13:16:41.751" status="PASS" endtime="20161208 13:16:41.751"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:41.752">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:16:41.751" status="PASS" endtime="20161208 13:16:41.752"></status>
</kw>
<status starttime="20161208 13:16:41.749" status="PASS" endtime="20161208 13:16:41.752"></status>
</kw>
<status starttime="20161208 13:16:41.746" status="PASS" endtime="20161208 13:16:41.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:41.753">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:16:41.752" status="FAIL" endtime="20161208 13:16:41.753"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:41.753">${has_port} = False</msg>
<status starttime="20161208 13:16:41.752" status="PASS" endtime="20161208 13:16:41.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:16:41.757" status="PASS" endtime="20161208 13:16:41.757"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:16:41.757" status="PASS" endtime="20161208 13:16:41.758"></status>
</kw>
<status starttime="20161208 13:16:41.756" status="PASS" endtime="20161208 13:16:41.758"></status>
</kw>
<status starttime="20161208 13:16:41.753" status="PASS" endtime="20161208 13:16:41.758"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:41.758">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:16:43.941">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:16:41.758" status="PASS" endtime="20161208 13:16:43.941"></status>
</kw>
<status starttime="20161208 13:16:41.741" status="PASS" endtime="20161208 13:16:43.942"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:43.942">@{entries} = [ BMC FILES ]</msg>
<status starttime="20161208 13:16:43.942" status="PASS" endtime="20161208 13:16:43.943"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:43.944">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20161208 13:16:43.944" status="PASS" endtime="20161208 13:16:43.945"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:43.946">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_journalctl.txt</msg>
<status starttime="20161208 13:16:43.945" status="PASS" endtime="20161208 13:16:43.946"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 13:16:43.948" status="PASS" endtime="20161208 13:16:43.952"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:43.953">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161208 13:16:45.813">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:45.814">${stdout} = -- Logs begin at Mon 2016-11-21 06:08:11 UTC, end at Mon 2016-11-21 06:16:24 UTC. --
Nov 21 06:08:11 barreleye systemd-journald[415]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161208 13:16:45.815">${stderr} = </msg>
<status starttime="20161208 13:16:43.953" status="PASS" endtime="20161208 13:16:45.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:45.825">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_journalctl.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:45.824" status="PASS" endtime="20161208 13:16:45.826"></status>
</kw>
<status starttime="20161208 13:16:45.822" status="PASS" endtime="20161208 13:16:45.826"></status>
</kw>
<status starttime="20161208 13:16:45.815" status="PASS" endtime="20161208 13:16:45.826"></status>
</kw>
<status starttime="20161208 13:16:43.946" status="PASS" endtime="20161208 13:16:45.826"></status>
</kw>
<status starttime="20161208 13:16:43.945" status="PASS" endtime="20161208 13:16:45.826"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:45.827">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_dmesg.txt</msg>
<status starttime="20161208 13:16:45.826" status="PASS" endtime="20161208 13:16:45.827"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 13:16:45.827" status="PASS" endtime="20161208 13:16:45.830"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:45.831">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161208 13:16:45.921">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:45.921">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-74268a3a99db82b2af4fb8029d6a014a41404513 (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Thu Dec 8 11:58:42 UTC 2016
CPU: ARM926EJ-S [41069265] re...</msg>
<msg level="INFO" timestamp="20161208 13:16:45.921">${stderr} = </msg>
<status starttime="20161208 13:16:45.831" status="PASS" endtime="20161208 13:16:45.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:45.926">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_dmesg.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:45.925" status="PASS" endtime="20161208 13:16:45.926"></status>
</kw>
<status starttime="20161208 13:16:45.924" status="PASS" endtime="20161208 13:16:45.926"></status>
</kw>
<status starttime="20161208 13:16:45.921" status="PASS" endtime="20161208 13:16:45.926"></status>
</kw>
<status starttime="20161208 13:16:45.827" status="PASS" endtime="20161208 13:16:45.926"></status>
</kw>
<status starttime="20161208 13:16:45.826" status="PASS" endtime="20161208 13:16:45.926"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:45.927">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_proc_list.txt</msg>
<status starttime="20161208 13:16:45.927" status="PASS" endtime="20161208 13:16:45.927"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 13:16:45.928" status="PASS" endtime="20161208 13:16:45.931"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:45.931">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161208 13:16:46.270">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:46.270">${stdout} = Mem: 133260K used, 365760K free, 9148K shrd, 10404K buff, 43196K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 0.35 1.56 1.22 1/117 986
  PID  PPID USER    ...</msg>
<msg level="INFO" timestamp="20161208 13:16:46.271">${stderr} = </msg>
<status starttime="20161208 13:16:45.931" status="PASS" endtime="20161208 13:16:46.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:46.277">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_proc_list.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:46.276" status="PASS" endtime="20161208 13:16:46.277"></status>
</kw>
<status starttime="20161208 13:16:46.275" status="PASS" endtime="20161208 13:16:46.277"></status>
</kw>
<status starttime="20161208 13:16:46.271" status="PASS" endtime="20161208 13:16:46.277"></status>
</kw>
<status starttime="20161208 13:16:45.927" status="PASS" endtime="20161208 13:16:46.277"></status>
</kw>
<status starttime="20161208 13:16:45.927" status="PASS" endtime="20161208 13:16:46.277"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:46.278">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_meminfo.txt</msg>
<status starttime="20161208 13:16:46.277" status="PASS" endtime="20161208 13:16:46.278"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 13:16:46.279" status="PASS" endtime="20161208 13:16:46.281"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:46.282">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161208 13:16:46.447">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:46.447">${stdout} = MemTotal:         499020 kB
MemFree:          365636 kB
MemAvailable:     404852 kB
Buffers:           10404 kB
Cached:            43196 kB
SwapCached:            0 kB
Active:            93828 kB
Inac...</msg>
<msg level="INFO" timestamp="20161208 13:16:46.447">${stderr} = </msg>
<status starttime="20161208 13:16:46.282" status="PASS" endtime="20161208 13:16:46.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:46.451">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_meminfo.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:46.451" status="PASS" endtime="20161208 13:16:46.451"></status>
</kw>
<status starttime="20161208 13:16:46.450" status="PASS" endtime="20161208 13:16:46.451"></status>
</kw>
<status starttime="20161208 13:16:46.447" status="PASS" endtime="20161208 13:16:46.451"></status>
</kw>
<status starttime="20161208 13:16:46.278" status="PASS" endtime="20161208 13:16:46.452"></status>
</kw>
<status starttime="20161208 13:16:46.277" status="PASS" endtime="20161208 13:16:46.452"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:46.452">${logpath} = /tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_procinfo.txt</msg>
<status starttime="20161208 13:16:46.452" status="PASS" endtime="20161208 13:16:46.452"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161208 13:16:46.453" status="PASS" endtime="20161208 13:16:46.456"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:46.456">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161208 13:16:46.584">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:46.585">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161208 13:16:46.585">${stderr} = </msg>
<status starttime="20161208 13:16:46.456" status="PASS" endtime="20161208 13:16:46.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:46.589">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_procinfo.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:46.589" status="PASS" endtime="20161208 13:16:46.589"></status>
</kw>
<status starttime="20161208 13:16:46.588" status="PASS" endtime="20161208 13:16:46.589"></status>
</kw>
<status starttime="20161208 13:16:46.585" status="PASS" endtime="20161208 13:16:46.589"></status>
</kw>
<status starttime="20161208 13:16:46.452" status="PASS" endtime="20161208 13:16:46.589"></status>
</kw>
<status starttime="20161208 13:16:46.452" status="PASS" endtime="20161208 13:16:46.589"></status>
</kw>
<status starttime="20161208 13:16:43.945" status="PASS" endtime="20161208 13:16:46.589"></status>
</kw>
<status starttime="20161208 13:16:43.943" status="PASS" endtime="20161208 13:16:46.590"></status>
</kw>
<status starttime="20161208 13:16:43.943" status="PASS" endtime="20161208 13:16:46.590"></status>
</kw>
<status starttime="20161208 13:16:43.943" status="PASS" endtime="20161208 13:16:46.590"></status>
</kw>
<status starttime="20161208 13:16:41.741" status="PASS" endtime="20161208 13:16:46.590"></status>
</kw>
<status starttime="20161208 13:16:41.740" status="PASS" endtime="20161208 13:16:46.590"></status>
</kw>
<status starttime="20161208 13:16:41.740" status="PASS" endtime="20161208 13:16:46.590"></status>
</kw>
<status starttime="20161208 13:16:41.740" status="PASS" endtime="20161208 13:16:46.590"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:46.593">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:16:46.592" status="FAIL" endtime="20161208 13:16:46.593"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:46.593">${has_host} = False</msg>
<status starttime="20161208 13:16:46.592" status="PASS" endtime="20161208 13:16:46.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:16:46.596" status="PASS" endtime="20161208 13:16:46.597"></status>
</kw>
<status starttime="20161208 13:16:46.593" status="PASS" endtime="20161208 13:16:46.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:46.601">${port_num} = 22</msg>
<status starttime="20161208 13:16:46.600" status="PASS" endtime="20161208 13:16:46.601"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:46.601">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:16:46.601" status="PASS" endtime="20161208 13:16:46.601"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:46.602">${https_num} = 443</msg>
<status starttime="20161208 13:16:46.601" status="PASS" endtime="20161208 13:16:46.602"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:46.602">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:16:46.602" status="PASS" endtime="20161208 13:16:46.602"></status>
</kw>
<status starttime="20161208 13:16:46.600" status="PASS" endtime="20161208 13:16:46.602"></status>
</kw>
<status starttime="20161208 13:16:46.597" status="PASS" endtime="20161208 13:16:46.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:46.603">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:16:46.603" status="FAIL" endtime="20161208 13:16:46.603"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:46.604">${has_port} = False</msg>
<status starttime="20161208 13:16:46.603" status="PASS" endtime="20161208 13:16:46.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:16:46.607" status="PASS" endtime="20161208 13:16:46.608"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:16:46.608" status="PASS" endtime="20161208 13:16:46.608"></status>
</kw>
<status starttime="20161208 13:16:46.607" status="PASS" endtime="20161208 13:16:46.608"></status>
</kw>
<status starttime="20161208 13:16:46.604" status="PASS" endtime="20161208 13:16:46.609"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:46.609">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:16:48.954">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:16:46.609" status="PASS" endtime="20161208 13:16:48.955"></status>
</kw>
<status starttime="20161208 13:16:46.591" status="PASS" endtime="20161208 13:16:48.955"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:48.956">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20161208 13:16:48.955" status="PASS" endtime="20161208 13:16:48.956"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:48.958">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20161208 13:16:48.957" status="PASS" endtime="20161208 13:16:48.958"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:48.964">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20161208 13:16:48.958" status="PASS" endtime="20161208 13:16:48.964"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:48.970">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:48.970" status="PASS" endtime="20161208 13:16:48.970"></status>
</kw>
<status starttime="20161208 13:16:48.969" status="PASS" endtime="20161208 13:16:48.970"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:48.971">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:48.971" status="PASS" endtime="20161208 13:16:48.971"></status>
</kw>
<status starttime="20161208 13:16:48.970" status="PASS" endtime="20161208 13:16:48.972"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:48.973">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:48.972" status="PASS" endtime="20161208 13:16:48.973"></status>
</kw>
<status starttime="20161208 13:16:48.972" status="PASS" endtime="20161208 13:16:48.973"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:48.974">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:48.973" status="PASS" endtime="20161208 13:16:48.974"></status>
</kw>
<status starttime="20161208 13:16:48.973" status="PASS" endtime="20161208 13:16:48.974"></status>
</kw>
<status starttime="20161208 13:16:48.969" status="PASS" endtime="20161208 13:16:48.974"></status>
</kw>
<status starttime="20161208 13:16:48.966" status="PASS" endtime="20161208 13:16:48.974"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:48.974">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.514">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.514">${stdout} =  = HOST_POWERING_ON</msg>
<msg level="INFO" timestamp="20161208 13:16:51.514">${stderr} = </msg>
<status starttime="20161208 13:16:48.974" status="PASS" endtime="20161208 13:16:51.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.522">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.521" status="PASS" endtime="20161208 13:16:51.522"></status>
</kw>
<status starttime="20161208 13:16:51.520" status="PASS" endtime="20161208 13:16:51.522"></status>
</kw>
<status starttime="20161208 13:16:51.515" status="PASS" endtime="20161208 13:16:51.522"></status>
</kw>
<status starttime="20161208 13:16:48.965" status="PASS" endtime="20161208 13:16:51.522"></status>
</kw>
<status starttime="20161208 13:16:48.964" status="PASS" endtime="20161208 13:16:51.522"></status>
</kw>
<status starttime="20161208 13:16:48.964" status="PASS" endtime="20161208 13:16:51.523"></status>
</kw>
<status starttime="20161208 13:16:48.957" status="PASS" endtime="20161208 13:16:51.523"></status>
</kw>
<status starttime="20161208 13:16:48.956" status="PASS" endtime="20161208 13:16:51.523"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:51.524">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20161208 13:16:51.524" status="PASS" endtime="20161208 13:16:51.525"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:51.526">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20161208 13:16:51.525" status="PASS" endtime="20161208 13:16:51.526"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.531">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.531" status="PASS" endtime="20161208 13:16:51.531"></status>
</kw>
<status starttime="20161208 13:16:51.530" status="PASS" endtime="20161208 13:16:51.531"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.532">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.532" status="PASS" endtime="20161208 13:16:51.532"></status>
</kw>
<status starttime="20161208 13:16:51.531" status="PASS" endtime="20161208 13:16:51.533"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.534">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.533" status="PASS" endtime="20161208 13:16:51.534"></status>
</kw>
<status starttime="20161208 13:16:51.533" status="PASS" endtime="20161208 13:16:51.534"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.535">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.535" status="PASS" endtime="20161208 13:16:51.535"></status>
</kw>
<status starttime="20161208 13:16:51.534" status="PASS" endtime="20161208 13:16:51.535"></status>
</kw>
<status starttime="20161208 13:16:51.530" status="PASS" endtime="20161208 13:16:51.536"></status>
</kw>
<status starttime="20161208 13:16:51.527" status="PASS" endtime="20161208 13:16:51.536"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:51.536">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.664">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.664">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-312"
VERSION_ID="v1.99.0-312-gfa4fd8f-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161208 13:16:51.664">${stderr} = </msg>
<status starttime="20161208 13:16:51.536" status="PASS" endtime="20161208 13:16:51.664"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.669">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.668" status="PASS" endtime="20161208 13:16:51.669"></status>
</kw>
<status starttime="20161208 13:16:51.668" status="PASS" endtime="20161208 13:16:51.669"></status>
</kw>
<status starttime="20161208 13:16:51.665" status="PASS" endtime="20161208 13:16:51.669"></status>
</kw>
<status starttime="20161208 13:16:51.526" status="PASS" endtime="20161208 13:16:51.669"></status>
</kw>
<status starttime="20161208 13:16:51.526" status="PASS" endtime="20161208 13:16:51.669"></status>
</kw>
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.674">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.674" status="PASS" endtime="20161208 13:16:51.674"></status>
</kw>
<status starttime="20161208 13:16:51.673" status="PASS" endtime="20161208 13:16:51.674"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.676">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.675" status="PASS" endtime="20161208 13:16:51.676"></status>
</kw>
<status starttime="20161208 13:16:51.674" status="PASS" endtime="20161208 13:16:51.676"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.677">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.677" status="PASS" endtime="20161208 13:16:51.677"></status>
</kw>
<status starttime="20161208 13:16:51.676" status="PASS" endtime="20161208 13:16:51.677"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.678">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.678" status="PASS" endtime="20161208 13:16:51.678"></status>
</kw>
<status starttime="20161208 13:16:51.677" status="PASS" endtime="20161208 13:16:51.678"></status>
</kw>
<status starttime="20161208 13:16:51.673" status="PASS" endtime="20161208 13:16:51.679"></status>
</kw>
<status starttime="20161208 13:16:51.670" status="PASS" endtime="20161208 13:16:51.679"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:51.679">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.775">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.775">${stdout} = 20161208115012</msg>
<msg level="INFO" timestamp="20161208 13:16:51.775">${stderr} = </msg>
<status starttime="20161208 13:16:51.679" status="PASS" endtime="20161208 13:16:51.775"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.782">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.781" status="PASS" endtime="20161208 13:16:51.782"></status>
</kw>
<status starttime="20161208 13:16:51.780" status="PASS" endtime="20161208 13:16:51.782"></status>
</kw>
<status starttime="20161208 13:16:51.776" status="PASS" endtime="20161208 13:16:51.782"></status>
</kw>
<status starttime="20161208 13:16:51.669" status="PASS" endtime="20161208 13:16:51.783"></status>
</kw>
<status starttime="20161208 13:16:51.669" status="PASS" endtime="20161208 13:16:51.783"></status>
</kw>
<status starttime="20161208 13:16:51.526" status="PASS" endtime="20161208 13:16:51.783"></status>
</kw>
<status starttime="20161208 13:16:51.523" status="PASS" endtime="20161208 13:16:51.783"></status>
</kw>
<status starttime="20161208 13:16:51.523" status="PASS" endtime="20161208 13:16:51.783"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:51.785">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20161208 13:16:51.784" status="PASS" endtime="20161208 13:16:51.785"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:51.786">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20161208 13:16:51.785" status="PASS" endtime="20161208 13:16:51.786"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.792">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.791" status="PASS" endtime="20161208 13:16:51.792"></status>
</kw>
<status starttime="20161208 13:16:51.791" status="PASS" endtime="20161208 13:16:51.792"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.793">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.793" status="PASS" endtime="20161208 13:16:51.793"></status>
</kw>
<status starttime="20161208 13:16:51.792" status="PASS" endtime="20161208 13:16:51.793"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.794">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.794" status="PASS" endtime="20161208 13:16:51.794"></status>
</kw>
<status starttime="20161208 13:16:51.793" status="PASS" endtime="20161208 13:16:51.794"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.795">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.795" status="PASS" endtime="20161208 13:16:51.795"></status>
</kw>
<status starttime="20161208 13:16:51.794" status="PASS" endtime="20161208 13:16:51.795"></status>
</kw>
<status starttime="20161208 13:16:51.790" status="PASS" endtime="20161208 13:16:51.795"></status>
</kw>
<status starttime="20161208 13:16:51.787" status="PASS" endtime="20161208 13:16:51.796"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:51.796">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.878">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.878">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M      8.9...</msg>
<msg level="INFO" timestamp="20161208 13:16:51.878">${stderr} = </msg>
<status starttime="20161208 13:16:51.796" status="PASS" endtime="20161208 13:16:51.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.882">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.882" status="PASS" endtime="20161208 13:16:51.882"></status>
</kw>
<status starttime="20161208 13:16:51.881" status="PASS" endtime="20161208 13:16:51.883"></status>
</kw>
<status starttime="20161208 13:16:51.878" status="PASS" endtime="20161208 13:16:51.883"></status>
</kw>
<status starttime="20161208 13:16:51.787" status="PASS" endtime="20161208 13:16:51.883"></status>
</kw>
<status starttime="20161208 13:16:51.786" status="PASS" endtime="20161208 13:16:51.883"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.888">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.888" status="PASS" endtime="20161208 13:16:51.888"></status>
</kw>
<status starttime="20161208 13:16:51.887" status="PASS" endtime="20161208 13:16:51.888"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.889">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.889" status="PASS" endtime="20161208 13:16:51.890"></status>
</kw>
<status starttime="20161208 13:16:51.889" status="PASS" endtime="20161208 13:16:51.890"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.891">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.890" status="PASS" endtime="20161208 13:16:51.891"></status>
</kw>
<status starttime="20161208 13:16:51.890" status="PASS" endtime="20161208 13:16:51.891"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.892">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.891" status="PASS" endtime="20161208 13:16:51.892"></status>
</kw>
<status starttime="20161208 13:16:51.891" status="PASS" endtime="20161208 13:16:51.892"></status>
</kw>
<status starttime="20161208 13:16:51.886" status="PASS" endtime="20161208 13:16:51.892"></status>
</kw>
<status starttime="20161208 13:16:51.884" status="PASS" endtime="20161208 13:16:51.892"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:51.893">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.988">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:51.989">${stdout} =  06:16:33 up 8 min,  load average: 0.32, 1.53, 1.21</msg>
<msg level="INFO" timestamp="20161208 13:16:51.989">${stderr} = </msg>
<status starttime="20161208 13:16:51.892" status="PASS" endtime="20161208 13:16:51.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.993">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.992" status="PASS" endtime="20161208 13:16:51.993"></status>
</kw>
<status starttime="20161208 13:16:51.992" status="PASS" endtime="20161208 13:16:51.993"></status>
</kw>
<status starttime="20161208 13:16:51.989" status="PASS" endtime="20161208 13:16:51.993"></status>
</kw>
<status starttime="20161208 13:16:51.883" status="PASS" endtime="20161208 13:16:51.993"></status>
</kw>
<status starttime="20161208 13:16:51.883" status="PASS" endtime="20161208 13:16:51.993"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.998">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.998" status="PASS" endtime="20161208 13:16:51.998"></status>
</kw>
<status starttime="20161208 13:16:51.997" status="PASS" endtime="20161208 13:16:51.998"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:51.999">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:51.999" status="PASS" endtime="20161208 13:16:51.999"></status>
</kw>
<status starttime="20161208 13:16:51.998" status="PASS" endtime="20161208 13:16:52.000"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:52.001">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:52.000" status="PASS" endtime="20161208 13:16:52.001"></status>
</kw>
<status starttime="20161208 13:16:52.000" status="PASS" endtime="20161208 13:16:52.001"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:52.002">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:52.001" status="PASS" endtime="20161208 13:16:52.002"></status>
</kw>
<status starttime="20161208 13:16:52.001" status="PASS" endtime="20161208 13:16:52.002"></status>
</kw>
<status starttime="20161208 13:16:51.997" status="PASS" endtime="20161208 13:16:52.002"></status>
</kw>
<status starttime="20161208 13:16:51.994" status="PASS" endtime="20161208 13:16:52.002"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.003">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161208 13:16:52.099">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:52.099">${stdout} = Linux barreleye 4.7.10-74268a3a99db82b2af4fb8029d6a014a41404513 #1 Thu Dec 8 11:58:42 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161208 13:16:52.099">${stderr} = </msg>
<status starttime="20161208 13:16:52.003" status="PASS" endtime="20161208 13:16:52.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:52.103">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt"&gt;/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest/20161208131631615135_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:52.103" status="PASS" endtime="20161208 13:16:52.103"></status>
</kw>
<status starttime="20161208 13:16:52.102" status="PASS" endtime="20161208 13:16:52.103"></status>
</kw>
<status starttime="20161208 13:16:52.099" status="PASS" endtime="20161208 13:16:52.103"></status>
</kw>
<status starttime="20161208 13:16:51.993" status="PASS" endtime="20161208 13:16:52.103"></status>
</kw>
<status starttime="20161208 13:16:51.993" status="PASS" endtime="20161208 13:16:52.103"></status>
</kw>
<status starttime="20161208 13:16:51.786" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<status starttime="20161208 13:16:51.783" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<status starttime="20161208 13:16:51.783" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<status starttime="20161208 13:16:48.956" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<status starttime="20161208 13:16:46.591" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<status starttime="20161208 13:16:46.591" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<status starttime="20161208 13:16:46.590" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<status starttime="20161208 13:16:46.590" status="PASS" endtime="20161208 13:16:52.104"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:52.108">Returning from the enclosing user keyword.</msg>
<status starttime="20161208 13:16:52.106" status="PASS" endtime="20161208 13:16:52.108"></status>
</kw>
<status starttime="20161208 13:16:52.105" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:52.105" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:52.104" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:52.104" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:31.670" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:31.669" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:31.669" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:31.669" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<status starttime="20161208 13:16:31.668" status="PASS" endtime="20161208 13:16:52.109"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.110">${cur_time} = 2016-12-08 13:16:52:109771</msg>
<status starttime="20161208 13:16:52.110" status="PASS" endtime="20161208 13:16:52.110"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.110">${cur_time} = 20161208131652109771</msg>
<status starttime="20161208 13:16:52.110" status="PASS" endtime="20161208 13:16:52.110"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:52.111">${cur_time} = 20161208131652109771</msg>
<status starttime="20161208 13:16:52.109" status="PASS" endtime="20161208 13:16:52.111"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status starttime="20161208 13:16:52.111" status="PASS" endtime="20161208 13:16:52.111"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:52.112">
/tmp/root/27234/obmc-robot/logs/20161208131631615135_TestsTestBasicPoweron/20161208131631615135_powerontest</msg>
<status starttime="20161208 13:16:52.111" status="PASS" endtime="20161208 13:16:52.112"></status>
</kw>
<status starttime="20161208 13:16:31.614" status="PASS" endtime="20161208 13:16:52.112"></status>
</kw>
<status starttime="20161208 13:16:31.612" status="PASS" endtime="20161208 13:16:52.112"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:52.113">Directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs"&gt;/tmp/root/27234/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 13:16:52.112" status="PASS" endtime="20161208 13:16:52.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:52.114">File '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 13:16:52.113" status="PASS" endtime="20161208 13:16:52.114"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:52.114">${exist} = True</msg>
<status starttime="20161208 13:16:52.113" status="PASS" endtime="20161208 13:16:52.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 13:16:52.114" status="PASS" endtime="20161208 13:16:52.117"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.117">${cur_time} = 2016-12-08 13:16:52:117374</msg>
<status starttime="20161208 13:16:52.117" status="PASS" endtime="20161208 13:16:52.118"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.118">${cur_time} = 20161208131652117374</msg>
<status starttime="20161208 13:16:52.118" status="PASS" endtime="20161208 13:16:52.118"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:52.118">${cur_time} = 20161208131652117374</msg>
<status starttime="20161208 13:16:52.117" status="PASS" endtime="20161208 13:16:52.118"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:52.119">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:52.118" status="PASS" endtime="20161208 13:16:52.119"></status>
</kw>
<status starttime="20161208 13:16:52.112" status="PASS" endtime="20161208 13:16:52.119"></status>
</kw>
<status starttime="20161208 13:16:31.611" status="PASS" endtime="20161208 13:16:52.119"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:52.121">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:16:52.121" status="FAIL" endtime="20161208 13:16:52.121"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:52.121">${has_host} = False</msg>
<status starttime="20161208 13:16:52.120" status="PASS" endtime="20161208 13:16:52.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:16:52.124" status="PASS" endtime="20161208 13:16:52.125"></status>
</kw>
<status starttime="20161208 13:16:52.121" status="PASS" endtime="20161208 13:16:52.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.129">${port_num} = 22</msg>
<status starttime="20161208 13:16:52.128" status="PASS" endtime="20161208 13:16:52.129"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.129">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:16:52.129" status="PASS" endtime="20161208 13:16:52.129"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:52.130">${https_num} = 443</msg>
<status starttime="20161208 13:16:52.129" status="PASS" endtime="20161208 13:16:52.130"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:52.130">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:16:52.130" status="PASS" endtime="20161208 13:16:52.130"></status>
</kw>
<status starttime="20161208 13:16:52.128" status="PASS" endtime="20161208 13:16:52.130"></status>
</kw>
<status starttime="20161208 13:16:52.125" status="PASS" endtime="20161208 13:16:52.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:52.132">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:16:52.131" status="FAIL" endtime="20161208 13:16:52.132"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:52.132">${has_port} = False</msg>
<status starttime="20161208 13:16:52.131" status="PASS" endtime="20161208 13:16:52.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:16:52.136" status="PASS" endtime="20161208 13:16:52.136"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:16:52.136" status="PASS" endtime="20161208 13:16:52.137"></status>
</kw>
<status starttime="20161208 13:16:52.135" status="PASS" endtime="20161208 13:16:52.137"></status>
</kw>
<status starttime="20161208 13:16:52.132" status="PASS" endtime="20161208 13:16:52.137"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:52.138">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.323">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:16:52.137" status="PASS" endtime="20161208 13:16:54.323"></status>
</kw>
<status starttime="20161208 13:16:52.120" status="PASS" endtime="20161208 13:16:54.323"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:54.324">Executing command 'ls /tmp/obmc-console.log-20161208131311932876_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.433">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.433">${pid} = 932</msg>
<msg level="INFO" timestamp="20161208 13:16:54.434">${stderr} = </msg>
<status starttime="20161208 13:16:54.324" status="PASS" endtime="20161208 13:16:54.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:54.434">Length is 0</msg>
<status starttime="20161208 13:16:54.434" status="PASS" endtime="20161208 13:16:54.434"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:54.435">Executing command 'ps ax | grep 932 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.676">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.676">${rc} = 0</msg>
<status starttime="20161208 13:16:54.435" status="PASS" endtime="20161208 13:16:54.676"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status starttime="20161208 13:16:54.677" status="PASS" endtime="20161208 13:16:54.681"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:54.682">Executing command 'kill -s KILL 932'.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.769">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.769">${console} = </msg>
<msg level="INFO" timestamp="20161208 13:16:54.769">${stderr} = </msg>
<status starttime="20161208 13:16:54.682" status="PASS" endtime="20161208 13:16:54.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:54.770">Length is 0</msg>
<status starttime="20161208 13:16:54.769" status="PASS" endtime="20161208 13:16:54.770"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:54.771">Current Client PID:932</msg>
<status starttime="20161208 13:16:54.770" status="PASS" endtime="20161208 13:16:54.771"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:54.772">Executing command 'cat /tmp/obmc-console.log-20161208131311932876_932'.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.868">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161208 13:16:54.869">${console} = </msg>
<msg level="INFO" timestamp="20161208 13:16:54.869">${stderr} = </msg>
<status starttime="20161208 13:16:54.771" status="PASS" endtime="20161208 13:16:54.869"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:54.869">Length is 0</msg>
<status starttime="20161208 13:16:54.869" status="PASS" endtime="20161208 13:16:54.870"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:54.870">${sol_log} = </msg>
<status starttime="20161208 13:16:52.119" status="PASS" endtime="20161208 13:16:54.870"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:54.871"></msg>
<status starttime="20161208 13:16:54.870" status="PASS" endtime="20161208 13:16:54.871"></status>
</kw>
<status starttime="20161208 13:16:31.611" status="PASS" endtime="20161208 13:16:54.871"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status critical="yes" starttime="20161208 13:13:09.567" status="FAIL" endtime="20161208 13:16:54.871">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status starttime="20161208 13:13:09.542" status="FAIL" endtime="20161208 13:16:54.872"></status>
</suite>
<suite source="/tmp/root/27234/obmc-robot/tests/test_eventlog.robot" name="Test Eventlog" id="s1-s4">
<kw library="connection_client" type="setup" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:54.910">Dictionary does not contain key 'host'.</msg>
<status starttime="20161208 13:16:54.910" status="FAIL" endtime="20161208 13:16:54.910"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:54.910">${has_host} = False</msg>
<status starttime="20161208 13:16:54.909" status="PASS" endtime="20161208 13:16:54.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161208 13:16:54.913" status="PASS" endtime="20161208 13:16:54.914"></status>
</kw>
<status starttime="20161208 13:16:54.910" status="PASS" endtime="20161208 13:16:54.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:54.917">${port_num} = 22</msg>
<status starttime="20161208 13:16:54.917" status="PASS" endtime="20161208 13:16:54.917"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:54.918">${SSH_PORT} = 22</msg>
<status starttime="20161208 13:16:54.918" status="PASS" endtime="20161208 13:16:54.918"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:54.919">${https_num} = 443</msg>
<status starttime="20161208 13:16:54.918" status="PASS" endtime="20161208 13:16:54.919"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:54.919">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161208 13:16:54.919" status="PASS" endtime="20161208 13:16:54.919"></status>
</kw>
<status starttime="20161208 13:16:54.917" status="PASS" endtime="20161208 13:16:54.919"></status>
</kw>
<status starttime="20161208 13:16:54.914" status="PASS" endtime="20161208 13:16:54.919"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161208 13:16:54.920">Dictionary does not contain key 'port'.</msg>
<status starttime="20161208 13:16:54.920" status="FAIL" endtime="20161208 13:16:54.920"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:54.920">${has_port} = False</msg>
<status starttime="20161208 13:16:54.920" status="PASS" endtime="20161208 13:16:54.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161208 13:16:54.924" status="PASS" endtime="20161208 13:16:54.925"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161208 13:16:54.925" status="PASS" endtime="20161208 13:16:54.925"></status>
</kw>
<status starttime="20161208 13:16:54.924" status="PASS" endtime="20161208 13:16:54.925"></status>
</kw>
<status starttime="20161208 13:16:54.921" status="PASS" endtime="20161208 13:16:54.925"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:54.926">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161208 13:16:57.110">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161208 13:16:54.926" status="PASS" endtime="20161208 13:16:57.110"></status>
</kw>
<status starttime="20161208 13:16:54.909" status="PASS" endtime="20161208 13:16:57.110"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.113">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161208 13:16:57.113" status="PASS" endtime="20161208 13:16:57.113"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.114">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:57.114" status="PASS" endtime="20161208 13:16:57.114"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:16:57.114" status="PASS" endtime="20161208 13:16:57.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.122">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:57.121" status="PASS" endtime="20161208 13:16:57.122"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:57.123">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:57.123" status="PASS" endtime="20161208 13:16:57.124"></status>
</kw>
<status starttime="20161208 13:16:57.122" status="PASS" endtime="20161208 13:16:57.124"></status>
</kw>
<status starttime="20161208 13:16:57.120" status="PASS" endtime="20161208 13:16:57.124"></status>
</kw>
<status starttime="20161208 13:16:57.115" status="PASS" endtime="20161208 13:16:57.124"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:57.125">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:57.125" status="PASS" endtime="20161208 13:16:57.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:57.126" status="PASS" endtime="20161208 13:16:57.127"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.127">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:57.127" status="PASS" endtime="20161208 13:16:57.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:57.127" status="PASS" endtime="20161208 13:16:57.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.456">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:57.456">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:57.128" status="PASS" endtime="20161208 13:16:57.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:57.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:57.457" status="PASS" endtime="20161208 13:16:57.457"></status>
</kw>
<status starttime="20161208 13:16:57.124" status="PASS" endtime="20161208 13:16:57.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.864">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:57.864">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:57.457" status="PASS" endtime="20161208 13:16:57.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.870">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:57.869" status="PASS" endtime="20161208 13:16:57.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:57.871">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:57.871" status="PASS" endtime="20161208 13:16:57.871"></status>
</kw>
<status starttime="20161208 13:16:57.870" status="PASS" endtime="20161208 13:16:57.872"></status>
</kw>
<status starttime="20161208 13:16:57.868" status="PASS" endtime="20161208 13:16:57.872"></status>
</kw>
<status starttime="20161208 13:16:57.864" status="PASS" endtime="20161208 13:16:57.872"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:57.872">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:57.112" status="PASS" endtime="20161208 13:16:57.872"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:57.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:57.873" status="PASS" endtime="20161208 13:16:57.873"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.875">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161208 13:16:57.874" status="PASS" endtime="20161208 13:16:57.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.880">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:16:57.879" status="PASS" endtime="20161208 13:16:57.880"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:57.881">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161208 13:16:57.881" status="PASS" endtime="20161208 13:16:57.881"></status>
</kw>
<status starttime="20161208 13:16:57.880" status="PASS" endtime="20161208 13:16:57.881"></status>
</kw>
<status starttime="20161208 13:16:57.879" status="PASS" endtime="20161208 13:16:57.881"></status>
</kw>
<status starttime="20161208 13:16:57.876" status="PASS" endtime="20161208 13:16:57.881"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:57.882">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:57.882" status="PASS" endtime="20161208 13:16:57.883"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.883">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:57.883" status="PASS" endtime="20161208 13:16:57.883"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.884">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:57.883" status="PASS" endtime="20161208 13:16:57.884"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:57.884">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:57.884" status="PASS" endtime="20161208 13:16:57.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:58.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:57.885" status="PASS" endtime="20161208 13:16:58.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:58.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:58.434" status="PASS" endtime="20161208 13:16:58.435"></status>
</kw>
<status starttime="20161208 13:16:57.882" status="PASS" endtime="20161208 13:16:58.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.492">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:16:58.492">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:58.435" status="PASS" endtime="20161208 13:16:58.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.497">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:58.496" status="PASS" endtime="20161208 13:16:58.497"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:58.498">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:58.497" status="PASS" endtime="20161208 13:16:58.498"></status>
</kw>
<status starttime="20161208 13:16:58.497" status="PASS" endtime="20161208 13:16:58.498"></status>
</kw>
<status starttime="20161208 13:16:58.496" status="PASS" endtime="20161208 13:16:58.498"></status>
</kw>
<status starttime="20161208 13:16:58.493" status="PASS" endtime="20161208 13:16:58.498"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:58.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:57.874" status="PASS" endtime="20161208 13:16:58.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.499">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:58.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:16:58.499">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:16:58.498" status="PASS" endtime="20161208 13:16:58.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:58.499">Length is 0</msg>
<status starttime="20161208 13:16:58.499" status="PASS" endtime="20161208 13:16:58.499"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 13:16:58.500" status="PASS" endtime="20161208 13:16:58.503"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:58.504">Directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs"&gt;/tmp/root/27234/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 13:16:58.503" status="PASS" endtime="20161208 13:16:58.504"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:58.505">File '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 13:16:58.504" status="PASS" endtime="20161208 13:16:58.505"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:58.505">${exist} = True</msg>
<status starttime="20161208 13:16:58.504" status="PASS" endtime="20161208 13:16:58.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 13:16:58.505" status="PASS" endtime="20161208 13:16:58.509"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.509">${cur_time} = 2016-12-08 13:16:58:509212</msg>
<status starttime="20161208 13:16:58.509" status="PASS" endtime="20161208 13:16:58.509"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.510">${cur_time} = 20161208131658509212</msg>
<status starttime="20161208 13:16:58.510" status="PASS" endtime="20161208 13:16:58.510"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:58.510">${cur_time} = 20161208131658509212</msg>
<status starttime="20161208 13:16:58.509" status="PASS" endtime="20161208 13:16:58.510"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:58.511">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:58.510" status="PASS" endtime="20161208 13:16:58.511"></status>
</kw>
<status starttime="20161208 13:16:58.503" status="PASS" endtime="20161208 13:16:58.511"></status>
</kw>
<status starttime="20161208 13:16:58.500" status="PASS" endtime="20161208 13:16:58.511"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status critical="yes" starttime="20161208 13:16:57.110" status="PASS" endtime="20161208 13:16:58.511"></status>
</test>
<test name="write a log" id="s1-s4-t2">
<kw name="create a test log">
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.513">${data} = {u'data': []}</msg>
<status starttime="20161208 13:16:58.512" status="PASS" endtime="20161208 13:16:58.513"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.514">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161208 13:16:58.513" status="PASS" endtime="20161208 13:16:58.514"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:58.514" status="PASS" endtime="20161208 13:16:58.514"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161208 13:16:58.514" status="PASS" endtime="20161208 13:16:58.515"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.519">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:58.518" status="PASS" endtime="20161208 13:16:58.519"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:58.520">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161208 13:16:58.520" status="PASS" endtime="20161208 13:16:58.520"></status>
</kw>
<status starttime="20161208 13:16:58.519" status="PASS" endtime="20161208 13:16:58.520"></status>
</kw>
<status starttime="20161208 13:16:58.518" status="PASS" endtime="20161208 13:16:58.520"></status>
</kw>
<status starttime="20161208 13:16:58.515" status="PASS" endtime="20161208 13:16:58.520"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:58.521">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:58.521" status="PASS" endtime="20161208 13:16:58.521"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.522">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:58.522" status="PASS" endtime="20161208 13:16:58.522"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.522">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:58.522" status="PASS" endtime="20161208 13:16:58.522"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:58.523">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:58.523" status="PASS" endtime="20161208 13:16:58.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.003">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:59.004">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:58.523" status="PASS" endtime="20161208 13:16:59.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:59.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:59.004" status="PASS" endtime="20161208 13:16:59.005"></status>
</kw>
<status starttime="20161208 13:16:58.520" status="PASS" endtime="20161208 13:16:59.005"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.513">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:16:59.513">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:59.006" status="PASS" endtime="20161208 13:16:59.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.519">${msg} = Response code:200, Content:{
  "data": 234, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:59.519" status="PASS" endtime="20161208 13:16:59.520"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:59.521">Response code:200, Content:{
  "data": 234, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:16:59.520" status="PASS" endtime="20161208 13:16:59.521"></status>
</kw>
<status starttime="20161208 13:16:59.520" status="PASS" endtime="20161208 13:16:59.521"></status>
</kw>
<status starttime="20161208 13:16:59.518" status="PASS" endtime="20161208 13:16:59.521"></status>
</kw>
<status starttime="20161208 13:16:59.514" status="PASS" endtime="20161208 13:16:59.521"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:59.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:58.513" status="PASS" endtime="20161208 13:16:59.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:59.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:16:59.522" status="PASS" endtime="20161208 13:16:59.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.523">To JSON using : content={
  "data": 234, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:16:59.523">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:16:59.523">${json} = {u'data': 234, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:16:59.523" status="PASS" endtime="20161208 13:16:59.523"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.524">${LOGID} = 234</msg>
<status starttime="20161208 13:16:59.523" status="PASS" endtime="20161208 13:16:59.524"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.525">${uri} = /org/openbmc/records/events/234</msg>
<status starttime="20161208 13:16:59.524" status="PASS" endtime="20161208 13:16:59.525"></status>
</kw>
<status starttime="20161208 13:16:58.512" status="PASS" endtime="20161208 13:16:59.525"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 13:16:59.526" status="PASS" endtime="20161208 13:16:59.529"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:59.530">Directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs"&gt;/tmp/root/27234/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 13:16:59.530" status="PASS" endtime="20161208 13:16:59.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:59.531">File '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 13:16:59.531" status="PASS" endtime="20161208 13:16:59.531"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:59.531">${exist} = True</msg>
<status starttime="20161208 13:16:59.531" status="PASS" endtime="20161208 13:16:59.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 13:16:59.531" status="PASS" endtime="20161208 13:16:59.534"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.535">${cur_time} = 2016-12-08 13:16:59:534869</msg>
<status starttime="20161208 13:16:59.535" status="PASS" endtime="20161208 13:16:59.535"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.536">${cur_time} = 20161208131659534869</msg>
<status starttime="20161208 13:16:59.535" status="PASS" endtime="20161208 13:16:59.536"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:16:59.536">${cur_time} = 20161208131659534869</msg>
<status starttime="20161208 13:16:59.534" status="PASS" endtime="20161208 13:16:59.536"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:16:59.537">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:16:59.536" status="PASS" endtime="20161208 13:16:59.537"></status>
</kw>
<status starttime="20161208 13:16:59.529" status="PASS" endtime="20161208 13:16:59.537"></status>
</kw>
<status starttime="20161208 13:16:59.525" status="PASS" endtime="20161208 13:16:59.537"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status critical="yes" starttime="20161208 13:16:58.512" status="PASS" endtime="20161208 13:16:59.537"></status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20161208 13:16:59.538" status="PASS" endtime="20161208 13:16:59.769"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status starttime="20161208 13:16:54.875" status="PASS" endtime="20161208 13:16:59.769"></status>
</suite>
<suite source="/tmp/root/27234/obmc-robot/tests/test_obmcrest.robot" name="Test Obmcrest" id="s1-s5">
<test name="Get a Property" id="s1-s5-t1">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>/org/openbmc/inventory/system/chassis/motherboard/cpu0</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.801">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status starttime="20161208 13:16:59.800" status="PASS" endtime="20161208 13:16:59.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.805">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161208 13:16:59.804" status="PASS" endtime="20161208 13:16:59.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:59.806">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161208 13:16:59.806" status="PASS" endtime="20161208 13:16:59.806"></status>
</kw>
<status starttime="20161208 13:16:59.805" status="PASS" endtime="20161208 13:16:59.806"></status>
</kw>
<status starttime="20161208 13:16:59.804" status="PASS" endtime="20161208 13:16:59.806"></status>
</kw>
<status starttime="20161208 13:16:59.801" status="PASS" endtime="20161208 13:16:59.806"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:16:59.807">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161208 13:16:59.807" status="PASS" endtime="20161208 13:16:59.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.809">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161208 13:16:59.808" status="PASS" endtime="20161208 13:16:59.809"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.809">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161208 13:16:59.809" status="PASS" endtime="20161208 13:16:59.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:16:59.810">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161208 13:16:59.809" status="PASS" endtime="20161208 13:16:59.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:17:00.942">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161208 13:17:00.942">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:59.810" status="PASS" endtime="20161208 13:17:00.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:17:00.943">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161208 13:17:00.943" status="PASS" endtime="20161208 13:17:00.943"></status>
</kw>
<status starttime="20161208 13:16:59.806" status="PASS" endtime="20161208 13:17:00.944"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:17:01.056">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg level="INFO" timestamp="20161208 13:17:01.056">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:17:00.944" status="PASS" endtime="20161208 13:17:01.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:17:01.063">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:17:01.062" status="PASS" endtime="20161208 13:17:01.063"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161208 13:17:01.065">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161208 13:17:01.064" status="PASS" endtime="20161208 13:17:01.065"></status>
</kw>
<status starttime="20161208 13:17:01.063" status="PASS" endtime="20161208 13:17:01.065"></status>
</kw>
<status starttime="20161208 13:17:01.062" status="PASS" endtime="20161208 13:17:01.065"></status>
</kw>
<status starttime="20161208 13:17:01.057" status="PASS" endtime="20161208 13:17:01.065"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:17:01.066">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161208 13:16:59.799" status="PASS" endtime="20161208 13:17:01.066"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:17:01.066">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161208 13:17:01.066">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161208 13:17:01.066">${content} = {u'data': 1, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20161208 13:17:01.066" status="PASS" endtime="20161208 13:17:01.066"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:17:01.067">${resp} = 1</msg>
<status starttime="20161208 13:16:59.799" status="PASS" endtime="20161208 13:17:01.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status starttime="20161208 13:17:01.067" status="PASS" endtime="20161208 13:17:01.067"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161208 13:17:01.068" status="PASS" endtime="20161208 13:17:01.070"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:17:01.071">Directory '&lt;a href="file:///tmp/root/27234/obmc-robot/logs"&gt;/tmp/root/27234/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161208 13:17:01.071" status="PASS" endtime="20161208 13:17:01.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:17:01.072">File '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161208 13:17:01.072" status="PASS" endtime="20161208 13:17:01.072"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:17:01.072">${exist} = True</msg>
<status starttime="20161208 13:17:01.071" status="PASS" endtime="20161208 13:17:01.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161208 13:17:01.072" status="PASS" endtime="20161208 13:17:01.075"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:17:01.076">${cur_time} = 2016-12-08 13:17:01:076029</msg>
<status starttime="20161208 13:17:01.076" status="PASS" endtime="20161208 13:17:01.076"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161208 13:17:01.077">${cur_time} = 20161208131701076029</msg>
<status starttime="20161208 13:17:01.076" status="PASS" endtime="20161208 13:17:01.077"></status>
</kw>
<msg level="INFO" timestamp="20161208 13:17:01.077">${cur_time} = 20161208131701076029</msg>
<status starttime="20161208 13:17:01.075" status="PASS" endtime="20161208 13:17:01.077"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161208 13:17:01.078">Appended to file '&lt;a href="file:///tmp/root/27234/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27234/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161208 13:17:01.077" status="PASS" endtime="20161208 13:17:01.078"></status>
</kw>
<status starttime="20161208 13:17:01.071" status="PASS" endtime="20161208 13:17:01.078"></status>
</kw>
<status starttime="20161208 13:17:01.067" status="PASS" endtime="20161208 13:17:01.078"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status critical="yes" starttime="20161208 13:16:59.799" status="PASS" endtime="20161208 13:17:01.078"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status starttime="20161208 13:16:59.772" status="PASS" endtime="20161208 13:17:01.079"></status>
</suite>
<status starttime="20161208 13:12:57.267" status="FAIL" endtime="20161208 13:17:01.083"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="6">Critical Tests</stat>
<stat fail="1" pass="6">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="0" pass="2">CI</stat>
<stat fail="0" pass="1">clear_any_logs</stat>
<stat fail="0" pass="1">Create_error_log_on_single_FRU</stat>
<stat fail="0" pass="1">Delete_error_log</stat>
<stat fail="0" pass="1">Get_a_Property</stat>
<stat fail="1" pass="0">power_on_test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
<stat fail="0" pass="1">write_a_log</stat>
</tag>
<suite>
<stat fail="1" pass="6" id="s1" name="Tests">Tests</stat>
<stat fail="0" pass="1" id="s1-s1" name="Security">Tests.Security</stat>
<stat fail="0" pass="1" id="s1-s1-s1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="0" pass="2" id="s1-s2" name="Test Association">Tests.Test Association</stat>
<stat fail="1" pass="0" id="s1-s3" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
<stat fail="0" pass="2" id="s1-s4" name="Test Eventlog">Tests.Test Eventlog</stat>
<stat fail="0" pass="1" id="s1-s5" name="Test Obmcrest">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
