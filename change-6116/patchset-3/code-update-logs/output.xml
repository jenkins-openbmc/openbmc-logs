<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170822 17:03:14.877" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170822 17:03:15.966" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170822 17:03:15.966" starttime="20170822 17:03:15.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:15.967" starttime="20170822 17:03:15.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170822 17:03:15.971" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170822 17:03:15.971" starttime="20170822 17:03:15.970"></status>
</kw>
<msg timestamp="20170822 17:03:15.971" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170822 17:03:15.971" starttime="20170822 17:03:15.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:15.972" starttime="20170822 17:03:15.972"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:15.972" starttime="20170822 17:03:15.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:15.973" starttime="20170822 17:03:15.973"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170822 17:03:15.974" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170822 17:03:15.974" starttime="20170822 17:03:15.974"></status>
</kw>
<msg timestamp="20170822 17:03:15.974" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170822 17:03:15.974" starttime="20170822 17:03:15.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:15.976" starttime="20170822 17:03:15.976"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:15.976" starttime="20170822 17:03:15.975"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:15.976" starttime="20170822 17:03:15.975"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170822 17:03:15.977" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170822 17:03:17.689" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170822 17:03:17.690" starttime="20170822 17:03:15.977"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:17.690" starttime="20170822 17:03:15.969"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:03:17.691" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170822 17:03:17.769" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:03:17.769" level="INFO">${output} = 1500635612</msg>
<msg timestamp="20170822 17:03:17.769" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:03:17.769" starttime="20170822 17:03:17.691"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:03:17.770" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:03:17.770" starttime="20170822 17:03:17.769"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170822 17:03:17.770" level="INFO">${btime} = 1500635612</msg>
<status status="PASS" endtime="20170822 17:03:17.770" starttime="20170822 17:03:17.770"></status>
</kw>
<msg timestamp="20170822 17:03:17.771" level="INFO">${cur_btime} = 1500635612</msg>
<status status="PASS" endtime="20170822 17:03:17.771" starttime="20170822 17:03:15.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170822 17:03:17.773" level="INFO">${BOOT_TIME} = 1500635612</msg>
<status status="PASS" endtime="20170822 17:03:17.773" starttime="20170822 17:03:17.772"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:17.773" starttime="20170822 17:03:17.771"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:17.773" starttime="20170822 17:03:15.968"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:17.774" starttime="20170822 17:03:17.773"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:17.775" starttime="20170822 17:03:17.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:17.776" starttime="20170822 17:03:17.776"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:17.776" starttime="20170822 17:03:15.968"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170822 17:03:17.779" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170822 17:03:17.779" starttime="20170822 17:03:17.778"></status>
</kw>
<msg timestamp="20170822 17:03:17.779" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170822 17:03:17.779" starttime="20170822 17:03:17.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:17.780" starttime="20170822 17:03:17.780"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:17.780" starttime="20170822 17:03:17.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:17.781" starttime="20170822 17:03:17.781"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170822 17:03:17.782" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170822 17:03:17.782" starttime="20170822 17:03:17.782"></status>
</kw>
<msg timestamp="20170822 17:03:17.782" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170822 17:03:17.782" starttime="20170822 17:03:17.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:17.784" starttime="20170822 17:03:17.784"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:17.784" starttime="20170822 17:03:17.783"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:17.784" starttime="20170822 17:03:17.783"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170822 17:03:17.785" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170822 17:03:19.477" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170822 17:03:19.477" starttime="20170822 17:03:17.784"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.477" starttime="20170822 17:03:17.777"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170822 17:03:19.478" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170822 17:03:19.555" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:03:19.555" level="INFO">${output} = </msg>
<msg timestamp="20170822 17:03:19.555" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170822 17:03:19.555" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170822 17:03:19.555" starttime="20170822 17:03:19.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:19.556" starttime="20170822 17:03:19.556"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.556" starttime="20170822 17:03:17.777"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170822 17:03:19.559" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170822 17:03:19.559" starttime="20170822 17:03:19.558"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:19.560" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170822 17:03:19.560" starttime="20170822 17:03:19.560"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:19.563" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:19.564" starttime="20170822 17:03:19.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:19.564" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:19.564" starttime="20170822 17:03:19.564"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:19.565" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:19.565" starttime="20170822 17:03:19.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:19.566" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:19.566" starttime="20170822 17:03:19.565"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:19.774" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:03:19.775" starttime="20170822 17:03:19.566"></status>
</kw>
<msg timestamp="20170822 17:03:19.775" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:03:19.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:19.775" starttime="20170822 17:03:19.566"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:19.776" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:19.776" starttime="20170822 17:03:19.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:19.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:19.777" starttime="20170822 17:03:19.776"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.777" starttime="20170822 17:03:19.562"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.777" starttime="20170822 17:03:19.562"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.777" starttime="20170822 17:03:19.561"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:19.778" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170822 17:03:19.778" starttime="20170822 17:03:19.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:19.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:19.778" starttime="20170822 17:03:19.778"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:19.779" starttime="20170822 17:03:19.779"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:03:19.781" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170822 17:03:19.781" starttime="20170822 17:03:19.780"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:03:19.782" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170822 17:03:19.782" starttime="20170822 17:03:19.781"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.782" starttime="20170822 17:03:19.781"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.783" starttime="20170822 17:03:19.779"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:03:19.965" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170822 17:03:19.965" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:19.965" starttime="20170822 17:03:19.783"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:03:19.966" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:03:19.966" starttime="20170822 17:03:19.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:03:19.967" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:03:19.967" starttime="20170822 17:03:19.967"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.968" starttime="20170822 17:03:19.967"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.968" starttime="20170822 17:03:19.965"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:03:19.969" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:03:19.969" starttime="20170822 17:03:19.969"></status>
</kw>
<msg timestamp="20170822 17:03:19.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:19.970" starttime="20170822 17:03:19.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:19.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:19.971" starttime="20170822 17:03:19.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170822 17:03:19.972" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:03:19.972" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:03:19.972" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170822 17:03:19.972" starttime="20170822 17:03:19.971"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:19.972" starttime="20170822 17:03:19.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:19.973" starttime="20170822 17:03:19.973"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:19.981" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:19.981" starttime="20170822 17:03:19.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:19.982" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:19.982" starttime="20170822 17:03:19.982"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:19.983" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:19.983" starttime="20170822 17:03:19.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:19.984" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:19.984" starttime="20170822 17:03:19.983"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:20.441" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:03:20.441" starttime="20170822 17:03:19.985"></status>
</kw>
<msg timestamp="20170822 17:03:20.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:03:20.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:20.441" starttime="20170822 17:03:19.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:20.442" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:20.442" starttime="20170822 17:03:20.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:20.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:20.443" starttime="20170822 17:03:20.442"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:20.443" starttime="20170822 17:03:19.979"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:20.443" starttime="20170822 17:03:19.979"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:20.443" starttime="20170822 17:03:19.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:20.444" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170822 17:03:20.444" starttime="20170822 17:03:20.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:20.445" starttime="20170822 17:03:20.444"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:03:20.704" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170822 17:03:20.704" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:20.704" starttime="20170822 17:03:20.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:20.705" starttime="20170822 17:03:20.704"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:03:20.705" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:03:20.705" starttime="20170822 17:03:20.705"></status>
</kw>
<msg timestamp="20170822 17:03:20.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:20.706" starttime="20170822 17:03:19.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:20.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:20.706" starttime="20170822 17:03:20.706"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:03:20.707" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:03:20.707" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:03:20.707" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170822 17:03:20.707" starttime="20170822 17:03:20.707"></status>
</kw>
<msg timestamp="20170822 17:03:20.707" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170822 17:03:20.707" starttime="20170822 17:03:19.976"></status>
</kw>
<msg timestamp="20170822 17:03:20.708" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170822 17:03:20.708" starttime="20170822 17:03:19.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:20.708" starttime="20170822 17:03:20.708"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:20.708" starttime="20170822 17:03:19.975"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:20.715" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:20.715" starttime="20170822 17:03:20.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:20.716" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:20.716" starttime="20170822 17:03:20.716"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:20.717" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:20.717" starttime="20170822 17:03:20.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:20.717" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:20.717" starttime="20170822 17:03:20.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.141" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:03:21.141" starttime="20170822 17:03:20.718"></status>
</kw>
<msg timestamp="20170822 17:03:21.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:03:21.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.141" starttime="20170822 17:03:20.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.142" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.142" starttime="20170822 17:03:21.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.143" starttime="20170822 17:03:21.142"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.143" starttime="20170822 17:03:20.712"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.143" starttime="20170822 17:03:20.711"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.143" starttime="20170822 17:03:20.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:21.144" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170822 17:03:21.144" starttime="20170822 17:03:21.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:21.144" starttime="20170822 17:03:21.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:03:21.296" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170822 17:03:21.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.296" starttime="20170822 17:03:21.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:21.297" starttime="20170822 17:03:21.296"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:03:21.297" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:03:21.297" starttime="20170822 17:03:21.297"></status>
</kw>
<msg timestamp="20170822 17:03:21.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.297" starttime="20170822 17:03:20.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.298" starttime="20170822 17:03:21.298"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:03:21.299" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:03:21.299" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:03:21.299" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170822 17:03:21.299" starttime="20170822 17:03:21.298"></status>
</kw>
<msg timestamp="20170822 17:03:21.299" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170822 17:03:21.299" starttime="20170822 17:03:20.709"></status>
</kw>
<msg timestamp="20170822 17:03:21.300" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170822 17:03:21.300" starttime="20170822 17:03:20.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:21.300" starttime="20170822 17:03:21.300"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.300" starttime="20170822 17:03:19.974"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.300" starttime="20170822 17:03:19.974"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.301" starttime="20170822 17:03:19.558"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.301" starttime="20170822 17:03:19.557"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.301" starttime="20170822 17:03:19.557"></status>
</kw>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:21.314" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:21.314" starttime="20170822 17:03:21.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:21.315" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:21.315" starttime="20170822 17:03:21.314"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:21.315" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:21.315" starttime="20170822 17:03:21.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:21.316" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:21.316" starttime="20170822 17:03:21.316"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.513" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:03:21.513" starttime="20170822 17:03:21.317"></status>
</kw>
<msg timestamp="20170822 17:03:21.513" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:03:21.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.514" starttime="20170822 17:03:21.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.514" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.514" starttime="20170822 17:03:21.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.515" starttime="20170822 17:03:21.515"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.515" starttime="20170822 17:03:21.312"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.515" starttime="20170822 17:03:21.312"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.515" starttime="20170822 17:03:21.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:21.516" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170822 17:03:21.516" starttime="20170822 17:03:21.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:21.517" starttime="20170822 17:03:21.516"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:03:21.595" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170822 17:03:21.595" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.595" starttime="20170822 17:03:21.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:21.596" starttime="20170822 17:03:21.596"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:03:21.597" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:03:21.597" starttime="20170822 17:03:21.597"></status>
</kw>
<msg timestamp="20170822 17:03:21.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.597" starttime="20170822 17:03:21.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.598" starttime="20170822 17:03:21.597"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:03:21.598" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:03:21.598" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:03:21.598" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170822 17:03:21.599" starttime="20170822 17:03:21.598"></status>
</kw>
<msg timestamp="20170822 17:03:21.599" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:03:21.599" starttime="20170822 17:03:21.310"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.599" starttime="20170822 17:03:21.310"></status>
</kw>
<msg timestamp="20170822 17:03:21.599" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20170822 17:03:21.600" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20170822 17:03:21.600" starttime="20170822 17:03:21.302"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:21.601" starttime="20170822 17:03:21.601"></status>
</kw>
<msg timestamp="20170822 17:03:21.601" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:03:21.601" starttime="20170822 17:03:21.600"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170822 17:03:21.613" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170822 17:03:21.613" starttime="20170822 17:03:21.613"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:21.614" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20170822 17:03:21.614" starttime="20170822 17:03:21.614"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:21.618" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:21.618" starttime="20170822 17:03:21.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:21.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:21.619" starttime="20170822 17:03:21.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:21.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:21.620" starttime="20170822 17:03:21.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:21.620" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:21.620" starttime="20170822 17:03:21.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:03:21.878" starttime="20170822 17:03:21.621"></status>
</kw>
<msg timestamp="20170822 17:03:21.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:03:21.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.878" starttime="20170822 17:03:21.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.879" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.879" starttime="20170822 17:03:21.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:21.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:21.879" starttime="20170822 17:03:21.879"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.880" starttime="20170822 17:03:21.617"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.880" starttime="20170822 17:03:21.617"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.880" starttime="20170822 17:03:21.615"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:21.880" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170822 17:03:21.880" starttime="20170822 17:03:21.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:21.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:21.881" starttime="20170822 17:03:21.881"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:21.882" starttime="20170822 17:03:21.881"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:03:21.883" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.R...</msg>
<status status="PASS" endtime="20170822 17:03:21.884" starttime="20170822 17:03:21.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:03:21.884" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170822 17:03:21.885" starttime="20170822 17:03:21.884"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.885" starttime="20170822 17:03:21.884"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:21.885" starttime="20170822 17:03:21.882"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:03:22.024" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170822 17:03:22.024" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.024" starttime="20170822 17:03:21.887"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:03:22.026" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:03:22.026" starttime="20170822 17:03:22.025"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:03:22.027" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:03:22.027" starttime="20170822 17:03:22.027"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.028" starttime="20170822 17:03:22.026"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.028" starttime="20170822 17:03:22.024"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:03:22.029" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:03:22.029" starttime="20170822 17:03:22.029"></status>
</kw>
<msg timestamp="20170822 17:03:22.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.029" starttime="20170822 17:03:21.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.030" starttime="20170822 17:03:22.029"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170822 17:03:22.031" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:03:22.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:03:22.031" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170822 17:03:22.031" starttime="20170822 17:03:22.030"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.031" starttime="20170822 17:03:21.613"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.031" starttime="20170822 17:03:21.612"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.031" starttime="20170822 17:03:21.601"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20170822 17:03:22.032" starttime="20170822 17:03:22.032"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:03:22.033" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20170822 17:03:22.033" starttime="20170822 17:03:22.033"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:22.037" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:22.038" starttime="20170822 17:03:22.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:22.038" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:22.038" starttime="20170822 17:03:22.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:22.039" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:22.039" starttime="20170822 17:03:22.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:22.040" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:22.040" starttime="20170822 17:03:22.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:03:22.243" starttime="20170822 17:03:22.040"></status>
</kw>
<msg timestamp="20170822 17:03:22.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:03:22.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.243" starttime="20170822 17:03:22.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.244" starttime="20170822 17:03:22.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.244" starttime="20170822 17:03:22.244"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.245" starttime="20170822 17:03:22.036"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.245" starttime="20170822 17:03:22.036"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.245" starttime="20170822 17:03:22.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:22.245" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170822 17:03:22.245" starttime="20170822 17:03:22.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:22.246" starttime="20170822 17:03:22.246"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:03:22.308" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170822 17:03:22.308" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.308" starttime="20170822 17:03:22.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:22.309" starttime="20170822 17:03:22.309"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:03:22.309" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:03:22.309" starttime="20170822 17:03:22.309"></status>
</kw>
<msg timestamp="20170822 17:03:22.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.310" starttime="20170822 17:03:22.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.310" starttime="20170822 17:03:22.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:03:22.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:03:22.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:03:22.311" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170822 17:03:22.311" starttime="20170822 17:03:22.311"></status>
</kw>
<msg timestamp="20170822 17:03:22.311" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:03:22.311" starttime="20170822 17:03:22.034"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.312" starttime="20170822 17:03:22.034"></status>
</kw>
<msg timestamp="20170822 17:03:22.312" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:03:22.312" starttime="20170822 17:03:22.033"></status>
</kw>
<msg timestamp="20170822 17:03:22.312" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:03:22.312" starttime="20170822 17:03:22.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.313" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.313" starttime="20170822 17:03:22.312"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.313" starttime="20170822 17:03:21.301"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:22.314" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170822 17:03:22.314" starttime="20170822 17:03:22.313"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:22.317" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:22.317" starttime="20170822 17:03:22.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:22.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:22.318" starttime="20170822 17:03:22.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:22.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:22.318" starttime="20170822 17:03:22.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:22.319" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:22.319" starttime="20170822 17:03:22.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.523" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:03:22.523" starttime="20170822 17:03:22.320"></status>
</kw>
<msg timestamp="20170822 17:03:22.523" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:03:22.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.523" starttime="20170822 17:03:22.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.524" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.524" starttime="20170822 17:03:22.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.525" starttime="20170822 17:03:22.525"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.525" starttime="20170822 17:03:22.316"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.525" starttime="20170822 17:03:22.315"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:22.525" starttime="20170822 17:03:22.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:03:22.526" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170822 17:03:22.526" starttime="20170822 17:03:22.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:22.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:22.527" starttime="20170822 17:03:22.526"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:22.527" starttime="20170822 17:03:22.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:22.528" starttime="20170822 17:03:22.527"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:03:22.986" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170822 17:03:22.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.986" starttime="20170822 17:03:22.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:22.987" starttime="20170822 17:03:22.987"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:03:22.988" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:03:22.988" starttime="20170822 17:03:22.988"></status>
</kw>
<msg timestamp="20170822 17:03:22.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.988" starttime="20170822 17:03:22.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:03:22.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:03:22.989" starttime="20170822 17:03:22.988"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170822 17:03:32.989" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170822 17:03:32.990" starttime="20170822 17:03:22.989"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:32.990" starttime="20170822 17:03:22.313"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170822 17:03:32.993" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170822 17:03:32.993" starttime="20170822 17:03:32.993"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170822 17:03:32.999" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170822 17:03:36.011" level="INFO">${RC} = 0</msg>
<msg timestamp="20170822 17:03:36.011" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.73 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.15 ms
64 bytes from 9.41.166.169:...</msg>
<status status="PASS" endtime="20170822 17:03:36.011" starttime="20170822 17:03:32.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170822 17:03:36.014" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.73 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.15 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.706 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.80 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.706/1.347/1.802/0.449 ms</msg>
<status status="PASS" endtime="20170822 17:03:36.014" starttime="20170822 17:03:36.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:36.015" starttime="20170822 17:03:36.015"></status>
</kw>
<status status="PASS" endtime="20170822 17:03:36.016" starttime="20170822 17:03:32.992"></status>
</kw>
<msg timestamp="20170822 17:03:36.016" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170822 17:03:36.016" starttime="20170822 17:03:32.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170822 17:03:36.017" starttime="20170822 17:03:36.016"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:36.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:36.020" starttime="20170822 17:03:36.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:36.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:36.021" starttime="20170822 17:03:36.021"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:36.022" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:36.022" starttime="20170822 17:03:36.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:36.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:36.022" starttime="20170822 17:03:36.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:03:36.775" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170822 17:03:36.775" starttime="20170822 17:03:36.023"></status>
</kw>
<msg timestamp="20170822 17:03:36.775" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170822 17:03:36.775" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170822 17:03:36.776" starttime="20170822 17:03:36.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:03:36.776" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:03:36.776" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:03:36.777" starttime="20170822 17:03:36.776"></status>
</kw>
<status status="FAIL" endtime="20170822 17:03:36.778" starttime="20170822 17:03:36.018"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:03:56.780" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:03:56.780" starttime="20170822 17:03:56.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:03:56.781" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:03:56.781" starttime="20170822 17:03:56.781"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:03:56.782" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:03:56.782" starttime="20170822 17:03:56.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:03:56.782" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:03:56.782" starttime="20170822 17:03:56.782"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:04:14.817" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80385610&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170822 17:04:18.017" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80385750&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170822 17:04:21.217" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80385890&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170822 17:04:23.817" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff803859d0&gt;: Failed to establish a new connection: [Errno 113] No route to host',))</msg>
<status status="FAIL" endtime="20170822 17:04:23.817" starttime="20170822 17:03:56.783"></status>
</kw>
<msg timestamp="20170822 17:04:23.818" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170822 17:04:23.818" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80...</msg>
<status status="PASS" endtime="20170822 17:04:23.818" starttime="20170822 17:03:56.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:04:23.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:04:23.819" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff803859d0&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:04:23.819" starttime="20170822 17:04:23.818"></status>
</kw>
<status status="FAIL" endtime="20170822 17:04:23.819" starttime="20170822 17:03:56.778"></status>
</kw>
<msg timestamp="20170822 17:04:23.819" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff803859d0&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:04:23.819" starttime="20170822 17:03:36.018"></status>
</kw>
<status status="FAIL" endtime="20170822 17:04:23.819" starttime="20170822 17:03:36.017"></status>
</kw>
<msg timestamp="20170822 17:04:23.820" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170822 17:04:23.820" starttime="20170822 17:03:36.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170822 17:04:23.821" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170822 17:04:23.821" starttime="20170822 17:04:23.821"></status>
</kw>
<status status="FAIL" endtime="20170822 17:04:23.821" starttime="20170822 17:04:23.820"></status>
</kw>
<status status="FAIL" endtime="20170822 17:04:23.821" starttime="20170822 17:03:32.992"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170822 17:04:33.824" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170822 17:04:33.824" starttime="20170822 17:04:33.824"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170822 17:04:33.829" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170822 17:04:39.846" level="INFO">${RC} = 1</msg>
<msg timestamp="20170822 17:04:39.847" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Des...</msg>
<status status="PASS" endtime="20170822 17:04:39.847" starttime="20170822 17:04:33.825"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170822 17:04:39.851" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Destination Host Unreachable
From 9.41.165.94 icmp_seq=4 Destination Host Unreachable

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 3015ms
pipe 3</msg>
<status status="PASS" endtime="20170822 17:04:39.851" starttime="20170822 17:04:39.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170822 17:04:39.852" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170822 17:04:39.852" starttime="20170822 17:04:39.851"></status>
</kw>
<status status="FAIL" endtime="20170822 17:04:39.852" starttime="20170822 17:04:33.823"></status>
</kw>
<msg timestamp="20170822 17:04:39.853" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170822 17:04:39.853" starttime="20170822 17:04:33.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170822 17:04:39.854" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170822 17:04:39.854" starttime="20170822 17:04:39.854"></status>
</kw>
<status status="FAIL" endtime="20170822 17:04:39.854" starttime="20170822 17:04:39.853"></status>
</kw>
<status status="FAIL" endtime="20170822 17:04:39.854" starttime="20170822 17:04:33.822"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170822 17:04:49.857" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170822 17:04:49.857" starttime="20170822 17:04:49.856"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170822 17:04:49.862" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170822 17:04:52.867" level="INFO">${RC} = 0</msg>
<msg timestamp="20170822 17:04:52.868" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.26 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.569 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170822 17:04:52.868" starttime="20170822 17:04:49.857"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170822 17:04:52.871" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.26 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.569 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.555 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.20 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.555/0.899/1.266/0.340 ms</msg>
<status status="PASS" endtime="20170822 17:04:52.871" starttime="20170822 17:04:52.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:04:52.872" starttime="20170822 17:04:52.872"></status>
</kw>
<status status="PASS" endtime="20170822 17:04:52.872" starttime="20170822 17:04:49.856"></status>
</kw>
<msg timestamp="20170822 17:04:52.872" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170822 17:04:52.872" starttime="20170822 17:04:49.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170822 17:04:52.873" starttime="20170822 17:04:52.873"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:04:52.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:04:52.877" starttime="20170822 17:04:52.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:04:52.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:04:52.878" starttime="20170822 17:04:52.877"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:04:52.879" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:04:52.879" starttime="20170822 17:04:52.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:04:52.879" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:04:52.879" starttime="20170822 17:04:52.879"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:05:12.905" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170822 17:05:12.906" starttime="20170822 17:04:52.880"></status>
</kw>
<msg timestamp="20170822 17:05:12.906" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170822 17:05:12.906" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170822 17:05:12.906" starttime="20170822 17:04:52.880"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:05:12.907" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:05:12.907" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:05:12.907" starttime="20170822 17:05:12.906"></status>
</kw>
<status status="FAIL" endtime="20170822 17:05:12.907" starttime="20170822 17:04:52.875"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:05:32.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:05:32.910" starttime="20170822 17:05:32.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:05:32.910" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:05:32.911" starttime="20170822 17:05:32.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:05:32.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:05:32.911" starttime="20170822 17:05:32.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:05:32.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:05:32.912" starttime="20170822 17:05:32.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:05:41.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:05:41.970" starttime="20170822 17:05:32.913"></status>
</kw>
<msg timestamp="20170822 17:05:41.970" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:05:41.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:41.971" starttime="20170822 17:05:32.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:05:41.971" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:41.971" starttime="20170822 17:05:41.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:05:41.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:41.972" starttime="20170822 17:05:41.972"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:41.972" starttime="20170822 17:05:32.908"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:41.972" starttime="20170822 17:04:52.875"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:41.973" starttime="20170822 17:04:52.874"></status>
</kw>
<msg timestamp="20170822 17:05:41.973" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170822 17:05:41.973" starttime="20170822 17:04:52.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:41.973" starttime="20170822 17:05:41.973"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170822 17:05:41.975" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170822 17:05:41.975" starttime="20170822 17:05:41.975"></status>
</kw>
<msg timestamp="20170822 17:05:41.975" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170822 17:05:41.975" starttime="20170822 17:05:41.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:41.976" starttime="20170822 17:05:41.976"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:41.977" starttime="20170822 17:05:41.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:41.977" starttime="20170822 17:05:41.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170822 17:05:41.978" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170822 17:05:41.978" starttime="20170822 17:05:41.978"></status>
</kw>
<msg timestamp="20170822 17:05:41.978" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170822 17:05:41.978" starttime="20170822 17:05:41.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:41.981" starttime="20170822 17:05:41.980"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:41.981" starttime="20170822 17:05:41.980"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:41.981" starttime="20170822 17:05:41.979"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170822 17:05:41.981" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170822 17:05:45.153" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170822 17:05:45.153" starttime="20170822 17:05:41.981"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:45.154" starttime="20170822 17:05:41.974"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:05:45.154" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170822 17:05:45.322" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:05:45.323" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170822 17:05:45.323" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:05:45.323" starttime="20170822 17:05:45.154"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:05:45.323" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:05:45.323" starttime="20170822 17:05:45.323"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:45.323" starttime="20170822 17:04:49.855"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:45.324" starttime="20170822 17:03:32.991"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:45.324" starttime="20170822 17:03:32.990"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170822 17:05:45.327" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170822 17:05:45.327" starttime="20170822 17:05:45.326"></status>
</kw>
<msg timestamp="20170822 17:05:45.327" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170822 17:05:45.327" starttime="20170822 17:05:45.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:45.328" starttime="20170822 17:05:45.328"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:45.329" starttime="20170822 17:05:45.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:45.329" starttime="20170822 17:05:45.329"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170822 17:05:45.330" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170822 17:05:45.330" starttime="20170822 17:05:45.330"></status>
</kw>
<msg timestamp="20170822 17:05:45.331" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170822 17:05:45.331" starttime="20170822 17:05:45.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:45.332" starttime="20170822 17:05:45.332"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:45.332" starttime="20170822 17:05:45.332"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:45.333" starttime="20170822 17:05:45.331"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170822 17:05:45.333" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170822 17:05:47.680" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170822 17:05:47.680" starttime="20170822 17:05:45.333"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:47.681" starttime="20170822 17:05:45.325"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:05:47.681" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170822 17:05:47.769" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:05:47.769" level="INFO">${output} = 1500635606</msg>
<msg timestamp="20170822 17:05:47.769" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:05:47.769" starttime="20170822 17:05:47.681"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:05:47.770" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:05:47.770" starttime="20170822 17:05:47.769"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170822 17:05:47.770" level="INFO">${btime} = 1500635606</msg>
<status status="PASS" endtime="20170822 17:05:47.770" starttime="20170822 17:05:47.770"></status>
</kw>
<msg timestamp="20170822 17:05:47.771" level="INFO">${cur_btime} = 1500635606</msg>
<status status="PASS" endtime="20170822 17:05:47.771" starttime="20170822 17:05:45.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:47.772" starttime="20170822 17:05:47.771"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:47.772" starttime="20170822 17:05:45.324"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:47.773" starttime="20170822 17:05:47.772"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:47.773" starttime="20170822 17:05:47.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:47.774" starttime="20170822 17:05:47.773"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:47.774" starttime="20170822 17:05:45.324"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:05:47.778" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:05:47.778" starttime="20170822 17:05:47.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:05:47.779" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:05:47.779" starttime="20170822 17:05:47.778"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:05:47.779" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:05:47.779" starttime="20170822 17:05:47.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:05:47.780" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:05:47.780" starttime="20170822 17:05:47.780"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:05:48.109" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:05:48.109" starttime="20170822 17:05:47.781"></status>
</kw>
<msg timestamp="20170822 17:05:48.109" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:05:48.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.109" starttime="20170822 17:05:47.780"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:05:48.110" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.110" starttime="20170822 17:05:48.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:05:48.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.111" starttime="20170822 17:05:48.110"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:48.111" starttime="20170822 17:05:47.777"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:48.111" starttime="20170822 17:05:47.776"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:48.111" starttime="20170822 17:05:47.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:05:48.112" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170822 17:05:48.112" starttime="20170822 17:05:48.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:48.112" starttime="20170822 17:05:48.112"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:05:48.559" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170822 17:05:48.559" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.560" starttime="20170822 17:05:48.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:48.560" starttime="20170822 17:05:48.560"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:05:48.561" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:05:48.561" starttime="20170822 17:05:48.561"></status>
</kw>
<msg timestamp="20170822 17:05:48.562" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.562" starttime="20170822 17:05:47.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:05:48.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:05:48.563" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:05:48.563" starttime="20170822 17:05:48.562"></status>
</kw>
<status status="FAIL" endtime="20170822 17:05:48.563" starttime="20170822 17:05:47.774"></status>
</kw>
<msg timestamp="20170822 17:05:48.563" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:05:48.563" starttime="20170822 17:05:47.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170822 17:05:48.564" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170822 17:05:48.565" starttime="20170822 17:05:48.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:05:48.571" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:05:48.572" starttime="20170822 17:05:48.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:05:48.573" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:05:48.573" starttime="20170822 17:05:48.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:05:48.573" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:05:48.573" starttime="20170822 17:05:48.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:05:48.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:05:48.574" starttime="20170822 17:05:48.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:05:48.903" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:05:48.903" starttime="20170822 17:05:48.575"></status>
</kw>
<msg timestamp="20170822 17:05:48.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:05:48.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.903" starttime="20170822 17:05:48.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:05:48.904" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.904" starttime="20170822 17:05:48.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:05:48.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:48.905" starttime="20170822 17:05:48.904"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:48.905" starttime="20170822 17:05:48.570"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:48.905" starttime="20170822 17:05:48.569"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:48.905" starttime="20170822 17:05:48.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:05:48.906" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170822 17:05:48.906" starttime="20170822 17:05:48.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:48.906" starttime="20170822 17:05:48.906"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:05:49.718" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170822 17:05:49.718" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:49.719" starttime="20170822 17:05:48.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:49.719" starttime="20170822 17:05:49.719"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:05:49.720" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:05:49.720" starttime="20170822 17:05:49.720"></status>
</kw>
<msg timestamp="20170822 17:05:49.720" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:49.720" starttime="20170822 17:05:48.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:05:49.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:05:49.721" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:05:49.721" starttime="20170822 17:05:49.720"></status>
</kw>
<status status="FAIL" endtime="20170822 17:05:49.721" starttime="20170822 17:05:48.567"></status>
</kw>
<status status="FAIL" endtime="20170822 17:05:49.721" starttime="20170822 17:05:48.567"></status>
</kw>
<status status="FAIL" endtime="20170822 17:05:49.721" starttime="20170822 17:05:48.566"></status>
</kw>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:05:59.731" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:05:59.731" starttime="20170822 17:05:59.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:05:59.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:05:59.732" starttime="20170822 17:05:59.732"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:05:59.733" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:05:59.733" starttime="20170822 17:05:59.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:05:59.734" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:05:59.734" starttime="20170822 17:05:59.733"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:05:59.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:05:59.957" starttime="20170822 17:05:59.735"></status>
</kw>
<msg timestamp="20170822 17:05:59.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:05:59.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:05:59.957" starttime="20170822 17:05:59.734"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:05:59.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:59.958" starttime="20170822 17:05:59.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:05:59.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:05:59.959" starttime="20170822 17:05:59.958"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:59.959" starttime="20170822 17:05:59.725"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:59.959" starttime="20170822 17:05:59.725"></status>
</kw>
<status status="PASS" endtime="20170822 17:05:59.959" starttime="20170822 17:05:59.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:05:59.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170822 17:05:59.960" starttime="20170822 17:05:59.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:05:59.960" starttime="20170822 17:05:59.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:00.038" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170822 17:06:00.039" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.039" starttime="20170822 17:05:59.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:00.040" starttime="20170822 17:06:00.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:00.040" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:00.040" starttime="20170822 17:06:00.040"></status>
</kw>
<msg timestamp="20170822 17:06:00.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.040" starttime="20170822 17:05:59.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.041" starttime="20170822 17:06:00.041"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:00.042" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:00.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:00.042" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170822 17:06:00.042" starttime="20170822 17:06:00.042"></status>
</kw>
<msg timestamp="20170822 17:06:00.043" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170822 17:06:00.043" starttime="20170822 17:05:59.723"></status>
</kw>
<msg timestamp="20170822 17:06:00.043" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170822 17:06:00.043" starttime="20170822 17:05:59.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:00.044" starttime="20170822 17:06:00.044"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.044" starttime="20170822 17:05:59.722"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.044" starttime="20170822 17:05:48.566"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.045" starttime="20170822 17:05:48.565"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.045" starttime="20170822 17:05:48.564"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.045" starttime="20170822 17:05:48.563"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.045" starttime="20170822 17:03:15.967"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.045" starttime="20170822 17:03:15.967"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170822 17:06:00.052" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170822 17:06:00.052" starttime="20170822 17:06:00.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170822 17:06:00.052" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170822 17:06:00.052" starttime="20170822 17:06:00.052"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:00.054" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170822 17:06:00.054" starttime="20170822 17:06:00.053"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:00.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:00.057" starttime="20170822 17:06:00.056"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:00.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:00.058" starttime="20170822 17:06:00.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:00.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:00.059" starttime="20170822 17:06:00.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:00.059" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:00.059" starttime="20170822 17:06:00.059"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.235" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:00.236" starttime="20170822 17:06:00.060"></status>
</kw>
<msg timestamp="20170822 17:06:00.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:00.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.236" starttime="20170822 17:06:00.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.236" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.237" starttime="20170822 17:06:00.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.237" starttime="20170822 17:06:00.237"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.237" starttime="20170822 17:06:00.056"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.238" starttime="20170822 17:06:00.055"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.238" starttime="20170822 17:06:00.054"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:00.238" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170822 17:06:00.238" starttime="20170822 17:06:00.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:00.239" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:00.239" starttime="20170822 17:06:00.239"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:00.239" starttime="20170822 17:06:00.239"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:06:00.241" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170822 17:06:00.241" starttime="20170822 17:06:00.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:06:00.242" level="INFO">URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170822 17:06:00.242" starttime="20170822 17:06:00.242"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.243" starttime="20170822 17:06:00.241"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.243" starttime="20170822 17:06:00.240"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:00.535" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170822 17:06:00.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.535" starttime="20170822 17:06:00.244"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:06:00.537" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:06:00.537" starttime="20170822 17:06:00.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:06:00.538" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:06:00.538" starttime="20170822 17:06:00.537"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.538" starttime="20170822 17:06:00.537"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.538" starttime="20170822 17:06:00.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:00.539" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:00.539" starttime="20170822 17:06:00.539"></status>
</kw>
<msg timestamp="20170822 17:06:00.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.539" starttime="20170822 17:06:00.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.540" starttime="20170822 17:06:00.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170822 17:06:00.541" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:00.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:00.541" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170822 17:06:00.541" starttime="20170822 17:06:00.540"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.541" starttime="20170822 17:06:00.053"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:00.545" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:00.546" starttime="20170822 17:06:00.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:00.546" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:00.546" starttime="20170822 17:06:00.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:00.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:00.547" starttime="20170822 17:06:00.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:00.548" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:00.548" starttime="20170822 17:06:00.548"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:00.748" starttime="20170822 17:06:00.550"></status>
</kw>
<msg timestamp="20170822 17:06:00.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:00.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.749" starttime="20170822 17:06:00.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.749" starttime="20170822 17:06:00.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.750" starttime="20170822 17:06:00.750"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.750" starttime="20170822 17:06:00.544"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.750" starttime="20170822 17:06:00.544"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.750" starttime="20170822 17:06:00.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:00.751" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170822 17:06:00.751" starttime="20170822 17:06:00.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:00.752" starttime="20170822 17:06:00.752"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:00.853" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170822 17:06:00.853" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.853" starttime="20170822 17:06:00.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:00.854" starttime="20170822 17:06:00.854"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:00.854" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:00.854" starttime="20170822 17:06:00.854"></status>
</kw>
<msg timestamp="20170822 17:06:00.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.855" starttime="20170822 17:06:00.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:00.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:00.855" starttime="20170822 17:06:00.855"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:00.856" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:00.856" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:00.856" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170822 17:06:00.856" starttime="20170822 17:06:00.856"></status>
</kw>
<msg timestamp="20170822 17:06:00.857" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170822 17:06:00.857" starttime="20170822 17:06:00.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:00.857" starttime="20170822 17:06:00.857"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.857" starttime="20170822 17:06:00.051"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:00.858" starttime="20170822 17:06:00.046"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170822140102.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:00.878" starttime="20170822 17:06:00.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:01.710" starttime="20170822 17:06:00.879"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:01.710" starttime="20170822 17:06:00.878"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:01.710" starttime="20170822 17:06:00.867"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170822 17:06:01.712" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170822 17:06:01.712" starttime="20170822 17:06:01.712"></status>
</kw>
<msg timestamp="20170822 17:06:01.712" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170822 17:06:01.712" starttime="20170822 17:06:01.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:01.713" starttime="20170822 17:06:01.713"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:01.713" starttime="20170822 17:06:01.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:01.714" starttime="20170822 17:06:01.714"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170822 17:06:01.715" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170822 17:06:01.715" starttime="20170822 17:06:01.715"></status>
</kw>
<msg timestamp="20170822 17:06:01.716" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170822 17:06:01.716" starttime="20170822 17:06:01.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:01.717" starttime="20170822 17:06:01.717"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:01.717" starttime="20170822 17:06:01.717"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:01.717" starttime="20170822 17:06:01.716"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170822 17:06:01.718" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170822 17:06:04.107" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170822 17:06:04.107" starttime="20170822 17:06:01.718"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:04.107" starttime="20170822 17:06:01.710"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170822 17:06:04.109" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170822 17:06:04.109" starttime="20170822 17:06:04.109"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:06:04.110" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170822 17:06:04.167" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:06:04.167" level="INFO">${stdout} = </msg>
<msg timestamp="20170822 17:06:04.167" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:06:04.167" starttime="20170822 17:06:04.110"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:06:04.168" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:06:04.168" starttime="20170822 17:06:04.167"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:04.168" starttime="20170822 17:06:04.109"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:19.138" starttime="20170822 17:06:04.168"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:06:19.140" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170822 17:06:19.196" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:06:19.196" level="INFO">${stdout} = -rw-r--r--    1 root     root       32.0M Jul 21 11:15 /tmp/flashimg</msg>
<msg timestamp="20170822 17:06:19.196" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:06:19.196" starttime="20170822 17:06:19.139"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:06:19.197" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:06:19.197" starttime="20170822 17:06:19.197"></status>
</kw>
<msg timestamp="20170822 17:06:19.197" level="INFO">${file_size} = -rw-r--r--    1 root     root       32.0M Jul 21 11:15 /tmp/flashimg</msg>
<status status="PASS" endtime="20170822 17:06:19.197" starttime="20170822 17:06:19.138"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:19.198" starttime="20170822 17:06:19.198"></status>
</kw>
<msg timestamp="20170822 17:06:19.198" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170822 17:06:19.198" starttime="20170822 17:06:19.198"></status>
</kw>
<msg timestamp="20170822 17:06:19.199" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170822 17:06:19.199" starttime="20170822 17:06:04.108"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<msg timestamp="20170822 17:06:19.199" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170822 17:06:19.200" starttime="20170822 17:06:19.199"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.200" starttime="20170822 17:06:04.108"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.200" starttime="20170822 17:06:04.108"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.200" starttime="20170822 17:06:04.108"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.200" starttime="20170822 17:06:00.867"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.200" starttime="20170822 17:06:00.858"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170822 17:06:19.210" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170822 17:06:19.210" starttime="20170822 17:06:19.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:19.211" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170822 17:06:19.211" starttime="20170822 17:06:19.211"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:19.215" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:19.215" starttime="20170822 17:06:19.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:19.216" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:19.216" starttime="20170822 17:06:19.216"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:19.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:19.217" starttime="20170822 17:06:19.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:19.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:19.218" starttime="20170822 17:06:19.218"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:19.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:19.436" starttime="20170822 17:06:19.219"></status>
</kw>
<msg timestamp="20170822 17:06:19.436" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:19.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:19.436" starttime="20170822 17:06:19.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:19.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:19.437" starttime="20170822 17:06:19.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:19.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:19.438" starttime="20170822 17:06:19.437"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.438" starttime="20170822 17:06:19.214"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.438" starttime="20170822 17:06:19.212"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:19.438" starttime="20170822 17:06:19.212"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:19.438" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170822 17:06:19.438" starttime="20170822 17:06:19.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:19.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:19.439" starttime="20170822 17:06:19.439"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:19.440" starttime="20170822 17:06:19.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:19.440" starttime="20170822 17:06:19.440"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:23.228" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170822 17:06:23.228" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.228" starttime="20170822 17:06:19.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:23.229" starttime="20170822 17:06:23.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:23.230" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:23.230" starttime="20170822 17:06:23.229"></status>
</kw>
<msg timestamp="20170822 17:06:23.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.230" starttime="20170822 17:06:19.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:23.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.231" starttime="20170822 17:06:23.230"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:23.234" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:23.235" starttime="20170822 17:06:23.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:23.235" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:23.235" starttime="20170822 17:06:23.235"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:23.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:23.236" starttime="20170822 17:06:23.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:23.237" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:23.237" starttime="20170822 17:06:23.236"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:23.430" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:23.430" starttime="20170822 17:06:23.238"></status>
</kw>
<msg timestamp="20170822 17:06:23.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:23.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.430" starttime="20170822 17:06:23.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:23.431" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.431" starttime="20170822 17:06:23.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:23.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.432" starttime="20170822 17:06:23.431"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:23.432" starttime="20170822 17:06:23.233"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:23.432" starttime="20170822 17:06:23.233"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:23.432" starttime="20170822 17:06:23.232"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:23.433" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170822 17:06:23.433" starttime="20170822 17:06:23.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:23.433" starttime="20170822 17:06:23.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:23.527" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170822 17:06:23.528" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.528" starttime="20170822 17:06:23.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:23.528" starttime="20170822 17:06:23.528"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:23.529" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:23.529" starttime="20170822 17:06:23.529"></status>
</kw>
<msg timestamp="20170822 17:06:23.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.529" starttime="20170822 17:06:23.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:23.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:23.530" starttime="20170822 17:06:23.529"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:23.530" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Image ready to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:23.531" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:23.531" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Image ready to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'...</msg>
<status status="PASS" endtime="20170822 17:06:23.531" starttime="20170822 17:06:23.530"></status>
</kw>
<msg timestamp="20170822 17:06:23.531" level="INFO">${data} = {u'status': u'Image ready to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'preserve_network_settings': 1, u'restore_applicatio...</msg>
<status status="PASS" endtime="20170822 17:06:23.531" starttime="20170822 17:06:23.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:23.532" starttime="20170822 17:06:23.531"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:23.532" starttime="20170822 17:06:23.532"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:23.532" starttime="20170822 17:06:19.209"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:23.532" starttime="20170822 17:06:19.200"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ OBMC Reboot (off)</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170822 17:06:23.539" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170822 17:06:23.611" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:06:23.612" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170822 17:06:24.410" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170822 17:06:24.410" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170822 17:06:24.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:06:24.510" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170822 17:06:24.510" level="INFO">${stderr} = </msg>
<msg timestamp="20170822 17:06:24.510" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170822 17:06:24.511" starttime="20170822 17:06:23.590"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:06:24.511" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:06:24.511" starttime="20170822 17:06:24.511"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170822 17:06:24.512" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170822 17:06:24.512" starttime="20170822 17:06:24.512"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:24.512" starttime="20170822 17:06:23.589"></status>
</kw>
<msg timestamp="20170822 17:06:24.512" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170822 17:06:24.904" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20170822 17:06:24.920" starttime="20170822 17:06:24.919"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:24.921" starttime="20170822 17:06:24.921"></status>
</kw>
<msg timestamp="20170822 17:06:24.921" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:06:24.921" starttime="20170822 17:06:24.920"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170822 17:06:24.938" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170822 17:06:24.938" starttime="20170822 17:06:24.936"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:24.939" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20170822 17:06:24.939" starttime="20170822 17:06:24.939"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:24.942" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:24.943" starttime="20170822 17:06:24.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:24.944" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:24.944" starttime="20170822 17:06:24.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:24.945" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:24.945" starttime="20170822 17:06:24.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:24.945" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:24.945" starttime="20170822 17:06:24.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:25.181" starttime="20170822 17:06:24.946"></status>
</kw>
<msg timestamp="20170822 17:06:25.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:25.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.181" starttime="20170822 17:06:24.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.182" starttime="20170822 17:06:25.181"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.183" starttime="20170822 17:06:25.182"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.183" starttime="20170822 17:06:24.941"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.183" starttime="20170822 17:06:24.941"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.183" starttime="20170822 17:06:24.940"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:25.184" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170822 17:06:25.184" starttime="20170822 17:06:25.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:25.184" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:25.184" starttime="20170822 17:06:25.184"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:25.185" starttime="20170822 17:06:25.185"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:06:25.186" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.R...</msg>
<status status="PASS" endtime="20170822 17:06:25.187" starttime="20170822 17:06:25.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:06:25.187" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170822 17:06:25.188" starttime="20170822 17:06:25.187"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.188" starttime="20170822 17:06:25.187"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.188" starttime="20170822 17:06:25.185"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:25.315" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170822 17:06:25.315" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.315" starttime="20170822 17:06:25.189"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170822 17:06:25.316" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:06:25.316" starttime="20170822 17:06:25.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170822 17:06:25.317" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170822 17:06:25.317" starttime="20170822 17:06:25.317"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.318" starttime="20170822 17:06:25.316"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.318" starttime="20170822 17:06:25.315"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:25.319" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:25.319" starttime="20170822 17:06:25.319"></status>
</kw>
<msg timestamp="20170822 17:06:25.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.320" starttime="20170822 17:06:24.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.320" starttime="20170822 17:06:25.320"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170822 17:06:25.321" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:25.321" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:25.322" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170822 17:06:25.322" starttime="20170822 17:06:25.321"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.322" starttime="20170822 17:06:24.938"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.322" starttime="20170822 17:06:24.935"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.322" starttime="20170822 17:06:24.921"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20170822 17:06:25.323" starttime="20170822 17:06:25.323"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:06:25.324" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20170822 17:06:25.324" starttime="20170822 17:06:25.323"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:25.328" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:25.328" starttime="20170822 17:06:25.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:25.329" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:25.329" starttime="20170822 17:06:25.329"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:25.330" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:25.330" starttime="20170822 17:06:25.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:25.330" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:25.331" starttime="20170822 17:06:25.330"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.562" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:25.562" starttime="20170822 17:06:25.331"></status>
</kw>
<msg timestamp="20170822 17:06:25.562" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:25.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.562" starttime="20170822 17:06:25.331"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.563" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.563" starttime="20170822 17:06:25.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.564" starttime="20170822 17:06:25.564"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.564" starttime="20170822 17:06:25.327"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.564" starttime="20170822 17:06:25.327"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.564" starttime="20170822 17:06:25.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:25.565" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170822 17:06:25.565" starttime="20170822 17:06:25.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:25.566" starttime="20170822 17:06:25.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:25.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170822 17:06:25.628" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.628" starttime="20170822 17:06:25.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:25.629" starttime="20170822 17:06:25.628"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:25.629" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:25.629" starttime="20170822 17:06:25.629"></status>
</kw>
<msg timestamp="20170822 17:06:25.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.629" starttime="20170822 17:06:25.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.630" starttime="20170822 17:06:25.630"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:25.631" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:25.631" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:25.631" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170822 17:06:25.631" starttime="20170822 17:06:25.631"></status>
</kw>
<msg timestamp="20170822 17:06:25.632" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:06:25.632" starttime="20170822 17:06:25.325"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.632" starttime="20170822 17:06:25.324"></status>
</kw>
<msg timestamp="20170822 17:06:25.632" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:06:25.632" starttime="20170822 17:06:25.324"></status>
</kw>
<msg timestamp="20170822 17:06:25.633" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170822 17:06:25.633" starttime="20170822 17:06:25.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170822 17:06:25.634" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:25.634" starttime="20170822 17:06:25.633"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:25.634" starttime="20170822 17:06:24.918"></status>
</kw>
<msg timestamp="20170822 17:06:25.687" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170822 17:06:25.708" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170822 17:06:25.717" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170822 17:06:25.717" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:25.794" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:25.794" starttime="20170822 17:06:25.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:25.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:25.795" starttime="20170822 17:06:25.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:25.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:25.796" starttime="20170822 17:06:25.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:25.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:25.796" starttime="20170822 17:06:25.796"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.003" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:26.003" starttime="20170822 17:06:25.797"></status>
</kw>
<msg timestamp="20170822 17:06:26.003" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:26.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.003" starttime="20170822 17:06:25.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.004" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.004" starttime="20170822 17:06:26.004"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.005" starttime="20170822 17:06:26.004"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.005" starttime="20170822 17:06:25.787"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.005" starttime="20170822 17:06:25.786"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.005" starttime="20170822 17:06:25.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:26.006" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170822 17:06:26.006" starttime="20170822 17:06:26.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.007" starttime="20170822 17:06:26.006"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:26.083" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170822 17:06:26.083" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.083" starttime="20170822 17:06:26.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.084" starttime="20170822 17:06:26.083"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:26.084" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:26.084" starttime="20170822 17:06:26.084"></status>
</kw>
<msg timestamp="20170822 17:06:26.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.085" starttime="20170822 17:06:25.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.086" starttime="20170822 17:06:26.085"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:26.086" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:26.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:26.086" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170822 17:06:26.086" starttime="20170822 17:06:26.086"></status>
</kw>
<msg timestamp="20170822 17:06:26.087" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170822 17:06:26.087" starttime="20170822 17:06:25.782"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.087" starttime="20170822 17:06:25.773"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:26.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:26.095" starttime="20170822 17:06:26.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:26.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:26.095" starttime="20170822 17:06:26.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:26.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:26.096" starttime="20170822 17:06:26.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:26.097" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:26.097" starttime="20170822 17:06:26.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.326" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:26.327" starttime="20170822 17:06:26.098"></status>
</kw>
<msg timestamp="20170822 17:06:26.327" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:26.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.327" starttime="20170822 17:06:26.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.328" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.328" starttime="20170822 17:06:26.327"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.328" starttime="20170822 17:06:26.328"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.329" starttime="20170822 17:06:26.092"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.329" starttime="20170822 17:06:26.091"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.329" starttime="20170822 17:06:26.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:26.329" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170822 17:06:26.329" starttime="20170822 17:06:26.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.330" starttime="20170822 17:06:26.330"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:26.398" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170822 17:06:26.399" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.399" starttime="20170822 17:06:26.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.400" starttime="20170822 17:06:26.399"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:26.400" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:26.400" starttime="20170822 17:06:26.400"></status>
</kw>
<msg timestamp="20170822 17:06:26.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.400" starttime="20170822 17:06:26.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.401" starttime="20170822 17:06:26.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:26.402" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:26.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:26.402" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170822 17:06:26.402" starttime="20170822 17:06:26.401"></status>
</kw>
<msg timestamp="20170822 17:06:26.402" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170822 17:06:26.402" starttime="20170822 17:06:26.089"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.402" starttime="20170822 17:06:26.088"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.404" starttime="20170822 17:06:26.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:26.409" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:26.409" starttime="20170822 17:06:26.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:26.410" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:26.410" starttime="20170822 17:06:26.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:26.411" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:26.411" starttime="20170822 17:06:26.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:26.412" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:26.412" starttime="20170822 17:06:26.412"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:26.724" starttime="20170822 17:06:26.414"></status>
</kw>
<msg timestamp="20170822 17:06:26.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:26.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.724" starttime="20170822 17:06:26.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.725" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.725" starttime="20170822 17:06:26.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.726" starttime="20170822 17:06:26.725"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.726" starttime="20170822 17:06:26.408"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.726" starttime="20170822 17:06:26.407"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.726" starttime="20170822 17:06:26.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:26.727" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170822 17:06:26.727" starttime="20170822 17:06:26.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.727" starttime="20170822 17:06:26.727"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:26.797" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170822 17:06:26.797" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.797" starttime="20170822 17:06:26.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.798" starttime="20170822 17:06:26.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:26.798" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:26.798" starttime="20170822 17:06:26.798"></status>
</kw>
<msg timestamp="20170822 17:06:26.798" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.798" starttime="20170822 17:06:26.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:06:26.799" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:06:26.799" starttime="20170822 17:06:26.799"></status>
</kw>
<status status="FAIL" endtime="20170822 17:06:26.800" starttime="20170822 17:06:26.405"></status>
</kw>
<status status="FAIL" endtime="20170822 17:06:26.800" starttime="20170822 17:06:26.405"></status>
</kw>
<msg timestamp="20170822 17:06:26.800" level="INFO">${new_status} = FAIL</msg>
<msg timestamp="20170822 17:06:26.800" level="INFO">${new_value} = 404 != 200</msg>
<status status="PASS" endtime="20170822 17:06:26.800" starttime="20170822 17:06:26.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.801" starttime="20170822 17:06:26.800"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>Old</arg>
</arguments>
<msg timestamp="20170822 17:06:26.802" level="INFO">${boot_prog_method} = Old</msg>
<status status="PASS" endtime="20170822 17:06:26.802" starttime="20170822 17:06:26.801"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.802" starttime="20170822 17:06:26.802"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.802" starttime="20170822 17:06:26.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Old Get Boot Progress" library="utils">
<doc>Get the boot progress the old way (via org location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:26.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:26.807" starttime="20170822 17:06:26.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:26.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:26.808" starttime="20170822 17:06:26.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:26.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:26.809" starttime="20170822 17:06:26.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:26.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:26.809" starttime="20170822 17:06:26.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:26.992" starttime="20170822 17:06:26.810"></status>
</kw>
<msg timestamp="20170822 17:06:26.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:26.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.992" starttime="20170822 17:06:26.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.993" starttime="20170822 17:06:26.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:26.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:26.994" starttime="20170822 17:06:26.993"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.994" starttime="20170822 17:06:26.806"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.994" starttime="20170822 17:06:26.806"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:26.994" starttime="20170822 17:06:26.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:26.995" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170822 17:06:26.995" starttime="20170822 17:06:26.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:26.996" starttime="20170822 17:06:26.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:27.060" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170822 17:06:27.060" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.060" starttime="20170822 17:06:26.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:27.061" starttime="20170822 17:06:27.061"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:27.061" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:27.062" starttime="20170822 17:06:27.061"></status>
</kw>
<msg timestamp="20170822 17:06:27.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.062" starttime="20170822 17:06:26.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:27.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.062" starttime="20170822 17:06:27.062"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:27.063" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:27.063" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:27.063" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170822 17:06:27.063" starttime="20170822 17:06:27.063"></status>
</kw>
<msg timestamp="20170822 17:06:27.064" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170822 17:06:27.064" starttime="20170822 17:06:26.804"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:27.064" starttime="20170822 17:06:26.803"></status>
</kw>
<msg timestamp="20170822 17:06:27.064" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170822 17:06:27.064" starttime="20170822 17:06:26.803"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:27.064" starttime="20170822 17:06:26.403"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:06:27.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:06:27.069" starttime="20170822 17:06:27.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:06:27.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:06:27.069" starttime="20170822 17:06:27.069"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:06:27.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:06:27.070" starttime="20170822 17:06:27.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:06:27.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:06:27.071" starttime="20170822 17:06:27.070"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:06:27.299" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:06:27.299" starttime="20170822 17:06:27.072"></status>
</kw>
<msg timestamp="20170822 17:06:27.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:06:27.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.300" starttime="20170822 17:06:27.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:06:27.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.300" starttime="20170822 17:06:27.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:27.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.301" starttime="20170822 17:06:27.301"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:27.301" starttime="20170822 17:06:27.067"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:27.301" starttime="20170822 17:06:27.067"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:27.301" starttime="20170822 17:06:27.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:06:27.302" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170822 17:06:27.302" starttime="20170822 17:06:27.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:27.303" starttime="20170822 17:06:27.302"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:06:27.366" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170822 17:06:27.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.366" starttime="20170822 17:06:27.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:06:27.367" starttime="20170822 17:06:27.367"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:06:27.367" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:06:27.367" starttime="20170822 17:06:27.367"></status>
</kw>
<msg timestamp="20170822 17:06:27.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.368" starttime="20170822 17:06:27.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:06:27.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:06:27.368" starttime="20170822 17:06:27.368"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:06:27.369" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:06:27.369" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:06:27.369" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170822 17:06:27.369" starttime="20170822 17:06:27.369"></status>
</kw>
<msg timestamp="20170822 17:06:27.370" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170822 17:06:27.370" starttime="20170822 17:06:27.065"></status>
</kw>
<status status="PASS" endtime="20170822 17:06:27.370" starttime="20170822 17:06:27.064"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20170822 17:06:27.376" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:27.396" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:06:27.397" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20170822 17:06:27.404" starttime="20170822 17:06:27.377"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:31.436" level="FAIL">
#(UTC) 2017/08/22 17:06:31.433250 -    4.061673 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:31.437" starttime="20170822 17:06:27.420"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:35.450" level="FAIL">
#(UTC) 2017/08/22 17:06:35.448632 -    4.015382 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:35.451" starttime="20170822 17:06:31.440"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:39.492" level="FAIL">
#(UTC) 2017/08/22 17:06:39.478489 -    4.029857 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:39.496" starttime="20170822 17:06:35.453"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:43.527" level="FAIL">
#(UTC) 2017/08/22 17:06:43.524882 -    4.046393 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:43.528" starttime="20170822 17:06:39.510"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:47.545" level="FAIL">
#(UTC) 2017/08/22 17:06:47.541983 -    4.017101 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:47.546" starttime="20170822 17:06:43.531"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:51.586" level="FAIL">
#(UTC) 2017/08/22 17:06:51.573438 -    4.031455 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:51.591" starttime="20170822 17:06:47.549"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:55.643" level="FAIL">
#(UTC) 2017/08/22 17:06:55.630637 -    4.057199 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:55.649" starttime="20170822 17:06:51.605"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:06:59.698" level="FAIL">
#(UTC) 2017/08/22 17:06:59.685477 -    4.054840 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:06:59.703" starttime="20170822 17:06:55.661"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:03.732" level="FAIL">
#(UTC) 2017/08/22 17:07:03.729385 -    4.043908 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:03.733" starttime="20170822 17:06:59.717"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:07.748" level="FAIL">
#(UTC) 2017/08/22 17:07:07.745351 -    4.015966 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:07.749" starttime="20170822 17:07:03.736"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:11.763" level="FAIL">
#(UTC) 2017/08/22 17:07:11.760464 -    4.015113 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:11.764" starttime="20170822 17:07:07.752"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:15.801" level="FAIL">
#(UTC) 2017/08/22 17:07:15.786727 -    4.026263 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:15.805" starttime="20170822 17:07:11.767"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:19.855" level="FAIL">
#(UTC) 2017/08/22 17:07:19.842386 -    4.055659 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:19.859" starttime="20170822 17:07:15.819"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:23.891" level="FAIL">
#(UTC) 2017/08/22 17:07:23.887941 -    4.045555 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:23.892" starttime="20170822 17:07:19.873"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:27.910" level="FAIL">
#(UTC) 2017/08/22 17:07:27.905840 -    4.017899 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:27.911" starttime="20170822 17:07:23.894"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:31.928" level="FAIL">
#(UTC) 2017/08/22 17:07:31.925165 -    4.019325 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:31.929" starttime="20170822 17:07:27.914"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:35.965" level="FAIL">
#(UTC) 2017/08/22 17:07:35.951999 -    4.026834 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:35.970" starttime="20170822 17:07:31.932"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:40.002" level="FAIL">
#(UTC) 2017/08/22 17:07:39.999036 -    4.047037 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:40.003" starttime="20170822 17:07:35.983"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:44.018" level="FAIL">
#(UTC) 2017/08/22 17:07:44.015894 -    4.016858 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:44.019" starttime="20170822 17:07:40.006"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:48.035" level="FAIL">
#(UTC) 2017/08/22 17:07:48.031985 -    4.016091 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:48.036" starttime="20170822 17:07:44.022"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:52.051" level="FAIL">
#(UTC) 2017/08/22 17:07:52.047952 -    4.015967 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:52.052" starttime="20170822 17:07:48.038"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:07:56.088" level="FAIL">
#(UTC) 2017/08/22 17:07:56.075986 -    4.028034 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:07:56.093" starttime="20170822 17:07:52.054"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:00.123" level="FAIL">
#(UTC) 2017/08/22 17:08:00.119793 -    4.043807 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:00.124" starttime="20170822 17:07:56.107"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:04.140" level="FAIL">
#(UTC) 2017/08/22 17:08:04.136962 -    4.017169 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:04.141" starttime="20170822 17:08:00.126"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:08.157" level="FAIL">
#(UTC) 2017/08/22 17:08:08.153785 -    4.016823 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:08.158" starttime="20170822 17:08:04.143"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:12.172" level="FAIL">
#(UTC) 2017/08/22 17:08:12.168929 -    4.015144 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:12.173" starttime="20170822 17:08:08.160"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:16.187" level="FAIL">
#(UTC) 2017/08/22 17:08:16.184053 -    4.015124 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:16.188" starttime="20170822 17:08:12.175"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:20.208" level="FAIL">
#(UTC) 2017/08/22 17:08:20.202993 -    4.018940 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:20.208" starttime="20170822 17:08:16.190"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:24.228" level="FAIL">
#(UTC) 2017/08/22 17:08:24.225394 -    4.022401 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:24.229" starttime="20170822 17:08:20.216"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:28.243" level="FAIL">
#(UTC) 2017/08/22 17:08:28.240732 -    4.015338 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:28.244" starttime="20170822 17:08:24.232"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:32.267" level="FAIL">
#(UTC) 2017/08/22 17:08:32.264534 -    4.023802 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:32.268" starttime="20170822 17:08:28.247"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:36.309" level="FAIL">
#(UTC) 2017/08/22 17:08:36.296665 -    4.032131 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:36.315" starttime="20170822 17:08:32.271"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:40.349" level="FAIL">
#(UTC) 2017/08/22 17:08:40.346405 -    4.049740 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:40.350" starttime="20170822 17:08:36.329"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:44.390" level="FAIL">
#(UTC) 2017/08/22 17:08:44.376619 -    4.030214 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:44.395" starttime="20170822 17:08:40.353"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:48.423" level="FAIL">
#(UTC) 2017/08/22 17:08:48.420113 -    4.043494 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:48.424" starttime="20170822 17:08:44.408"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:52.440" level="FAIL">
#(UTC) 2017/08/22 17:08:52.436850 -    4.016737 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:52.441" starttime="20170822 17:08:48.427"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:08:56.484" level="FAIL">
#(UTC) 2017/08/22 17:08:56.470169 -    4.033319 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:08:56.489" starttime="20170822 17:08:52.443"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:00.516" level="FAIL">
#(UTC) 2017/08/22 17:09:00.512972 -    4.042803 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:00.516" starttime="20170822 17:08:56.501"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:04.551" level="FAIL">
#(UTC) 2017/08/22 17:09:04.538710 -    4.025738 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:04.556" starttime="20170822 17:09:00.519"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:08.605" level="FAIL">
#(UTC) 2017/08/22 17:09:08.592151 -    4.053441 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:08.610" starttime="20170822 17:09:04.569"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:12.645" level="FAIL">
#(UTC) 2017/08/22 17:09:12.640351 -    4.048200 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:12.646" starttime="20170822 17:09:08.623"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:16.685" level="FAIL">
#(UTC) 2017/08/22 17:09:16.672587 -    4.032236 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:16.689" starttime="20170822 17:09:12.651"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:20.716" level="FAIL">
#(UTC) 2017/08/22 17:09:20.713155 -    4.040568 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:20.717" starttime="20170822 17:09:16.703"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:24.757" level="FAIL">
#(UTC) 2017/08/22 17:09:24.745062 -    4.031907 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:24.763" starttime="20170822 17:09:20.720"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:28.817" level="FAIL">
#(UTC) 2017/08/22 17:09:28.801723 -    4.056661 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:28.821" starttime="20170822 17:09:24.776"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:32.849" level="FAIL">
#(UTC) 2017/08/22 17:09:32.846710 -    4.044987 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:32.850" starttime="20170822 17:09:28.835"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:36.886" level="FAIL">
#(UTC) 2017/08/22 17:09:36.872996 -    4.026286 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:36.890" starttime="20170822 17:09:32.852"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:40.937" level="FAIL">
#(UTC) 2017/08/22 17:09:40.924692 -    4.051696 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:40.942" starttime="20170822 17:09:36.904"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:44.966" level="FAIL">
#(UTC) 2017/08/22 17:09:44.963742 -    4.039050 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:44.967" starttime="20170822 17:09:40.955"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:48.983" level="FAIL">
#(UTC) 2017/08/22 17:09:48.980679 -    4.016937 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:48.984" starttime="20170822 17:09:44.970"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:53.018" level="FAIL">
#(UTC) 2017/08/22 17:09:53.006107 -    4.025428 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:53.022" starttime="20170822 17:09:48.987"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:09:57.073" level="FAIL">
#(UTC) 2017/08/22 17:09:57.060441 -    4.054334 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:09:57.078" starttime="20170822 17:09:53.036"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:01.113" level="FAIL">
#(UTC) 2017/08/22 17:10:01.108554 -    4.048113 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:10:01.114" starttime="20170822 17:09:57.091"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:05.145" level="FAIL">
#(UTC) 2017/08/22 17:10:05.141682 -    4.033128 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170822 17:10:05.146" starttime="20170822 17:10:01.118"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:10.183" level="FAIL">
#(UTC) 2017/08/22 17:10:10.171374 -    5.029692 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             80
</msg>
<status status="FAIL" endtime="20170822 17:10:10.189" starttime="20170822 17:10:05.148"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:10:15.219" starttime="20170822 17:10:10.203"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:20.270" level="FAIL">
#(UTC) 2017/08/22 17:10:20.260262 -   10.088888 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:20.271" starttime="20170822 17:10:15.233"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:21.271" level="FAIL">
#(UTC) 2017/08/22 17:10:21.268826 -    1.008564 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:21.272" starttime="20170822 17:10:20.273"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:24.287" level="FAIL">
#(UTC) 2017/08/22 17:10:24.283986 -    3.015160 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:24.288" starttime="20170822 17:10:21.274"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:27.303" level="FAIL">
#(UTC) 2017/08/22 17:10:27.300084 -    3.016098 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:27.304" starttime="20170822 17:10:24.290"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:30.319" level="FAIL">
#(UTC) 2017/08/22 17:10:30.315868 -    3.015784 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:30.320" starttime="20170822 17:10:27.306"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:33.335" level="FAIL">
#(UTC) 2017/08/22 17:10:33.331844 -    3.015976 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:33.335" starttime="20170822 17:10:30.322"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:36.351" level="FAIL">
#(UTC) 2017/08/22 17:10:36.348174 -    3.016330 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:36.352" starttime="20170822 17:10:33.338"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:39.366" level="FAIL">
#(UTC) 2017/08/22 17:10:39.363630 -    3.015456 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:39.367" starttime="20170822 17:10:36.354"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:42.365" level="FAIL">
#(UTC) 2017/08/22 17:10:42.363239 -    2.999609 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:42.366" starttime="20170822 17:10:39.369"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:45.403" level="FAIL">
#(UTC) 2017/08/22 17:10:45.390856 -    3.027617 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:45.408" starttime="20170822 17:10:42.369"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:48.441" level="FAIL">
#(UTC) 2017/08/22 17:10:48.438964 -    3.048108 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:48.442" starttime="20170822 17:10:45.421"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:51.455" level="FAIL">
#(UTC) 2017/08/22 17:10:51.452267 -    3.013303 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:51.456" starttime="20170822 17:10:48.444"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:54.471" level="FAIL">
#(UTC) 2017/08/22 17:10:54.467924 -    3.015657 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170822 17:10:54.472" starttime="20170822 17:10:51.459"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:10:59.489" level="FAIL">
#(UTC) 2017/08/22 17:10:59.486290 -    5.018366 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             20
</msg>
<status status="FAIL" endtime="20170822 17:10:59.490" starttime="20170822 17:10:54.474"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:11:04.503" level="FAIL">
#(UTC) 2017/08/22 17:11:04.500652 -    5.014362 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             40
</msg>
<status status="FAIL" endtime="20170822 17:11:04.504" starttime="20170822 17:10:59.492"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:11:08.518" starttime="20170822 17:11:04.506"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/uptime | cut -f 1 -d ' '</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170822 17:11:08.534" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:08.534" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20170822 17:11:08.538" level="FAIL">error: [Errno 104] Connection reset by peer</msg>
<status status="FAIL" endtime="20170822 17:11:08.538" starttime="20170822 17:11:08.522"></status>
</kw>
<msg timestamp="20170822 17:11:08.596" level="FAIL">ValueError: could not convert string to float: </msg>
<status status="FAIL" endtime="20170822 17:11:08.600" starttime="20170822 17:06:27.371"></status>
</kw>
<msg timestamp="20170822 17:11:08.617" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170822 17:11:08.621" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170822 17:11:08.645" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.41.166.169.170822.170627.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170822 17:11:08.678" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170822 17:11:08.678" starttime="20170822 17:11:08.678"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170822 17:11:08.694" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170822 17:11:11.688" level="INFO">${RC} = 0</msg>
<msg timestamp="20170822 17:11:11.688" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.774 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.677 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170822 17:11:11.688" starttime="20170822 17:11:08.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.692" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.774 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.677 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.568 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=2.13 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.568/1.038/2.135/0.638 ms</msg>
<status status="PASS" endtime="20170822 17:11:11.693" starttime="20170822 17:11:11.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:11:11.693" starttime="20170822 17:11:11.693"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.694" starttime="20170822 17:11:08.677"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170822 17:11:11.726" level="INFO">${cur_time} = 2017-08-22 17:11:11:726209</msg>
<status status="PASS" endtime="20170822 17:11:11.726" starttime="20170822 17:11:11.726"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170822 17:11:11.727" level="INFO">${cur_time} = 20170822171111726209</msg>
<status status="PASS" endtime="20170822 17:11:11.727" starttime="20170822 17:11:11.727"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.727" starttime="20170822 17:11:11.725"></status>
</kw>
<msg timestamp="20170822 17:11:11.733" level="INFO">${FFDC_TIME} = 20170822171111726209</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170822 17:11:11.734" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170822 17:11:11.734" starttime="20170822 17:11:11.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170822 17:11:11.735" level="INFO">${suite_name} = 20170822171111726209_UpdateBmc</msg>
<status status="PASS" endtime="20170822 17:11:11.735" starttime="20170822 17:11:11.735"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170822 17:11:11.736" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170822 17:11:11.736" starttime="20170822 17:11:11.735"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170822 17:11:11.736" level="INFO">${test_name} = 20170822171111726209_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170822 17:11:11.736" starttime="20170822 17:11:11.736"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.737" starttime="20170822 17:11:11.734"></status>
</kw>
<msg timestamp="20170822 17:11:11.737" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170822 17:11:11.737" level="INFO">${FFDC_PREFIX} = 9.41.166.169.170822.170627.</msg>
<msg timestamp="20170822 17:11:11.767" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170822 17:11:11.769" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.769" starttime="20170822 17:11:11.767"></status>
</kw>
<msg timestamp="20170822 17:11:11.775" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.792" starttime="20170822 17:11:11.791"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.792" starttime="20170822 17:11:11.790"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.793" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.793" starttime="20170822 17:11:11.793"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.793" starttime="20170822 17:11:11.792"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.794" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.794" starttime="20170822 17:11:11.794"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.795" starttime="20170822 17:11:11.793"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.796" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.796" starttime="20170822 17:11:11.795"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.796" starttime="20170822 17:11:11.795"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.797" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.797" starttime="20170822 17:11:11.797"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.797" starttime="20170822 17:11:11.796"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.799" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.799" starttime="20170822 17:11:11.798"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.799" starttime="20170822 17:11:11.797"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.800" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.800" starttime="20170822 17:11:11.800"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.801" starttime="20170822 17:11:11.799"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.802" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.802" starttime="20170822 17:11:11.802"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.802" starttime="20170822 17:11:11.801"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.803" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.803" starttime="20170822 17:11:11.803"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.804" starttime="20170822 17:11:11.802"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.805" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.806" starttime="20170822 17:11:11.805"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.806" starttime="20170822 17:11:11.804"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.807" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.807" starttime="20170822 17:11:11.806"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.807" starttime="20170822 17:11:11.806"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.809" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.809" starttime="20170822 17:11:11.808"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.809" starttime="20170822 17:11:11.807"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:11.810" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:11.811" starttime="20170822 17:11:11.810"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:11.811" starttime="20170822 17:11:11.809"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170822 17:11:11.836" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:11.837" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170822 17:11:11.838" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:11.838" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170822 17:11:14.684" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170822 17:11:14.684" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170822 17:11:14.841" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:11:14.855" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170822 17:11:14.855" level="INFO">${stderr} = </msg>
<msg timestamp="20170822 17:11:14.855" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170822 17:11:14.855" starttime="20170822 17:11:11.811"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.856" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:11:14.856" starttime="20170822 17:11:14.855"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.856" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170822 17:11:14.856" starttime="20170822 17:11:14.856"></status>
</kw>
<msg timestamp="20170822 17:11:14.856" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170822 17:11:14.856" starttime="20170822 17:11:11.811"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.858" starttime="20170822 17:11:14.857"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.858" starttime="20170822 17:11:14.857"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.858" starttime="20170822 17:11:11.804"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.860" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.860" starttime="20170822 17:11:14.859"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.860" starttime="20170822 17:11:14.859"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:11:14.861" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170822 17:11:14.861" starttime="20170822 17:11:14.861"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.862" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.863" starttime="20170822 17:11:14.862"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.863" starttime="20170822 17:11:14.861"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.864" starttime="20170822 17:11:14.863"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.864" starttime="20170822 17:11:14.863"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.864" starttime="20170822 17:11:14.861"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.865" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.865" starttime="20170822 17:11:14.865"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.865" starttime="20170822 17:11:14.864"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.867" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.867" starttime="20170822 17:11:14.866"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.867" starttime="20170822 17:11:14.866"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.867" starttime="20170822 17:11:14.864"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.868" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.868" starttime="20170822 17:11:14.868"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.868" starttime="20170822 17:11:14.867"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.869" starttime="20170822 17:11:14.869"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.870" starttime="20170822 17:11:14.868"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.870" starttime="20170822 17:11:14.867"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.870" starttime="20170822 17:11:14.861"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.871" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.871" starttime="20170822 17:11:14.870"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.871" starttime="20170822 17:11:14.870"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.871" starttime="20170822 17:11:11.790"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:11:14.880" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170822 17:11:14.880" starttime="20170822 17:11:14.880"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170822 17:11:14.882" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170822 17:11:14.882" starttime="20170822 17:11:14.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:11:14.883" starttime="20170822 17:11:14.883"></status>
</kw>
<msg timestamp="20170822 17:11:14.884" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170822 17:11:14.884" starttime="20170822 17:11:14.882"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:11:14.886" starttime="20170822 17:11:14.886"></status>
</kw>
<msg timestamp="20170822 17:11:14.886" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:14.886" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:11:14.886" starttime="20170822 17:11:14.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:11:14.887" starttime="20170822 17:11:14.886"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:11:14.910" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170822 17:11:14.910" starttime="20170822 17:11:14.910"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:11:14.911" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170822 17:11:14.911" starttime="20170822 17:11:14.911"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.919" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170822 17:11:14.919" starttime="20170822 17:11:14.911"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.924" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.924" starttime="20170822 17:11:14.923"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.924" starttime="20170822 17:11:14.922"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.925" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.925" starttime="20170822 17:11:14.925"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.925" starttime="20170822 17:11:14.924"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.927" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.927" starttime="20170822 17:11:14.926"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.927" starttime="20170822 17:11:14.926"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:14.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:14.928" starttime="20170822 17:11:14.928"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.928" starttime="20170822 17:11:14.927"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.928" starttime="20170822 17:11:14.922"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:14.928" starttime="20170822 17:11:14.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:11:14.929" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:11:14.929" starttime="20170822 17:11:14.929"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:11:14.999" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:14.999" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:14.999" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170822 17:11:33.899" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20170822 17:11:33.899" starttime="20170822 17:11:14.959"></status>
</kw>
<msg timestamp="20170822 17:11:33.899" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:33.899" level="INFO">${ret_values} = (u'', u'Traceback (most recent call last):\n  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;\n    obj = bus.get_object(bus_name, obj_path)\n  File "/usr/lib/python2.7/site-packages/dbus/bus.py", lin...</msg>
<status status="PASS" endtime="20170822 17:11:33.899" starttime="20170822 17:11:14.929"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:11:33.900" level="INFO">${stdout} = </msg>
<status status="PASS" endtime="20170822 17:11:33.900" starttime="20170822 17:11:33.900"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:11:33.901" level="INFO">${stderr} = Traceback (most recent call last):
  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;
    obj = bus.get_object(bus_name, obj_path)
  File "/usr/lib/python2.7/site-packages/dbus/bus.py", line 241, in g...</msg>
<status status="PASS" endtime="20170822 17:11:33.901" starttime="20170822 17:11:33.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:33.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:33.908" starttime="20170822 17:11:33.908"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.909" starttime="20170822 17:11:33.907"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.909" starttime="20170822 17:11:33.901"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.909" starttime="20170822 17:11:14.919"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.909" starttime="20170822 17:11:14.919"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.909" starttime="20170822 17:11:14.919"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.909" starttime="20170822 17:11:14.910"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.909" starttime="20170822 17:11:14.910"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:11:33.911" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170822 17:11:33.911" starttime="20170822 17:11:33.911"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170822 17:11:33.912" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170822 17:11:33.912" starttime="20170822 17:11:33.911"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:33.916" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:33.916" starttime="20170822 17:11:33.915"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.916" starttime="20170822 17:11:33.914"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:33.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:33.918" starttime="20170822 17:11:33.917"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.918" starttime="20170822 17:11:33.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:33.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:33.919" starttime="20170822 17:11:33.919"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.919" starttime="20170822 17:11:33.918"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:33.920" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:33.920" starttime="20170822 17:11:33.920"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.921" starttime="20170822 17:11:33.919"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.921" starttime="20170822 17:11:33.914"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:33.921" starttime="20170822 17:11:33.913"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:11:33.922" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:11:33.922" starttime="20170822 17:11:33.921"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:11:33.995" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:33.995" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:33.996" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170822 17:11:34.700" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:11:34.700" starttime="20170822 17:11:33.954"></status>
</kw>
<msg timestamp="20170822 17:11:34.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:34.700" level="INFO">${ret_values} = (u'20170822140726', u'', 0)</msg>
<status status="PASS" endtime="20170822 17:11:34.700" starttime="20170822 17:11:33.922"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:11:34.701" level="INFO">${stdout} = 20170822140726</msg>
<status status="PASS" endtime="20170822 17:11:34.701" starttime="20170822 17:11:34.701"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:11:34.702" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:11:34.702" starttime="20170822 17:11:34.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:34.709" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:34.709" starttime="20170822 17:11:34.709"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.709" starttime="20170822 17:11:34.708"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.709" starttime="20170822 17:11:34.702"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.710" starttime="20170822 17:11:33.912"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.710" starttime="20170822 17:11:33.912"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:34.713" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:34.713" starttime="20170822 17:11:34.712"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.713" starttime="20170822 17:11:34.712"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:34.714" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:34.714" starttime="20170822 17:11:34.714"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.714" starttime="20170822 17:11:34.713"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:34.717" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:34.717" starttime="20170822 17:11:34.716"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.717" starttime="20170822 17:11:34.715"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:34.718" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:34.718" starttime="20170822 17:11:34.718"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.718" starttime="20170822 17:11:34.717"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.718" starttime="20170822 17:11:34.711"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:34.718" starttime="20170822 17:11:34.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:11:34.719" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:11:34.719" starttime="20170822 17:11:34.719"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:11:34.788" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:34.788" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:34.789" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170822 17:11:35.036" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:11:35.037" starttime="20170822 17:11:34.749"></status>
</kw>
<msg timestamp="20170822 17:11:35.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:35.037" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-14"\nVERSION_ID="v1.99.9-14-g183ac6c"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170822 17:11:35.037" starttime="20170822 17:11:34.720"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:11:35.038" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-14"
VERSION_ID="v1.99.9-14-g183ac6c"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170822 17:11:35.038" starttime="20170822 17:11:35.038"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:11:35.039" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:11:35.039" starttime="20170822 17:11:35.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.047" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:35.046"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:35.046"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:35.040"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:34.710"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:34.710"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:33.912"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:33.909"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.047" starttime="20170822 17:11:33.909"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:11:35.048" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170822 17:11:35.048" starttime="20170822 17:11:35.048"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.049" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170822 17:11:35.049" starttime="20170822 17:11:35.049"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.052" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.053" starttime="20170822 17:11:35.052"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.053" starttime="20170822 17:11:35.051"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.054" starttime="20170822 17:11:35.054"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.054" starttime="20170822 17:11:35.053"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.055" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.055" starttime="20170822 17:11:35.055"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.055" starttime="20170822 17:11:35.054"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.057" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.057" starttime="20170822 17:11:35.056"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.057" starttime="20170822 17:11:35.056"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.057" starttime="20170822 17:11:35.051"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.057" starttime="20170822 17:11:35.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:11:35.058" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:11:35.058" starttime="20170822 17:11:35.058"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:11:35.128" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:35.128" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:35.128" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170822 17:11:35.772" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:11:35.773" starttime="20170822 17:11:35.089"></status>
</kw>
<msg timestamp="20170822 17:11:35.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:35.773" level="INFO">${ret_values} = (u' 15:43:54 up 1 min,  load average: 7.02, 1.96, 0.67', u'', 0)</msg>
<status status="PASS" endtime="20170822 17:11:35.773" starttime="20170822 17:11:35.058"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:11:35.774" level="INFO">${stdout} =  15:43:54 up 1 min,  load average: 7.02, 1.96, 0.67</msg>
<status status="PASS" endtime="20170822 17:11:35.774" starttime="20170822 17:11:35.773"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:11:35.774" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:11:35.774" starttime="20170822 17:11:35.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.782" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.782" starttime="20170822 17:11:35.781"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.782" starttime="20170822 17:11:35.781"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.782" starttime="20170822 17:11:35.775"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.782" starttime="20170822 17:11:35.050"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.782" starttime="20170822 17:11:35.050"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.785" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.785" starttime="20170822 17:11:35.785"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.785" starttime="20170822 17:11:35.784"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.787" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.787" starttime="20170822 17:11:35.786"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.787" starttime="20170822 17:11:35.786"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.788" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.788" starttime="20170822 17:11:35.788"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.788" starttime="20170822 17:11:35.787"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:35.789" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:35.790" starttime="20170822 17:11:35.789"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.790" starttime="20170822 17:11:35.788"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.790" starttime="20170822 17:11:35.784"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:35.790" starttime="20170822 17:11:35.783"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:11:35.791" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:11:35.791" starttime="20170822 17:11:35.790"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:11:35.861" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:35.861" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:35.862" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170822 17:11:36.116" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:11:36.117" starttime="20170822 17:11:35.821"></status>
</kw>
<msg timestamp="20170822 17:11:36.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:36.117" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170822 17:11:36.117" starttime="20170822 17:11:35.791"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:11:36.118" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     13.9...</msg>
<status status="PASS" endtime="20170822 17:11:36.118" starttime="20170822 17:11:36.117"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:11:36.118" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:11:36.118" starttime="20170822 17:11:36.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:36.126" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:36.126" starttime="20170822 17:11:36.125"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.126" starttime="20170822 17:11:36.125"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.126" starttime="20170822 17:11:36.119"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.126" starttime="20170822 17:11:35.783"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.126" starttime="20170822 17:11:35.782"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:36.129" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:36.129" starttime="20170822 17:11:36.129"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.129" starttime="20170822 17:11:36.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:36.131" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:36.131" starttime="20170822 17:11:36.130"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.131" starttime="20170822 17:11:36.130"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:36.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:36.132" starttime="20170822 17:11:36.132"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.132" starttime="20170822 17:11:36.131"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:36.133" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:36.133" starttime="20170822 17:11:36.133"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.133" starttime="20170822 17:11:36.132"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.134" starttime="20170822 17:11:36.128"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.134" starttime="20170822 17:11:36.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:11:36.134" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:11:36.134" starttime="20170822 17:11:36.134"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:11:36.205" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:36.206" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:11:36.206" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170822 17:11:36.857" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:11:36.857" starttime="20170822 17:11:36.164"></status>
</kw>
<msg timestamp="20170822 17:11:36.857" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:36.857" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Tue Aug 22 14:06:12 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170822 17:11:36.857" starttime="20170822 17:11:36.135"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:11:36.858" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Tue Aug 22 14:06:12 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170822 17:11:36.858" starttime="20170822 17:11:36.858"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:11:36.859" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:11:36.859" starttime="20170822 17:11:36.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:11:36.866" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:11:36.866" starttime="20170822 17:11:36.866"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.866" starttime="20170822 17:11:36.865"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:36.859"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:36.126"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:36.126"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:35.049"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:35.048"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:35.047"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:14.910"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:14.909"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:14.887"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:14.884"></status>
</kw>
<status status="PASS" endtime="20170822 17:11:36.867" starttime="20170822 17:11:14.884"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:11:36.869" starttime="20170822 17:11:36.869"></status>
</kw>
<msg timestamp="20170822 17:11:36.869" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:11:36.869" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:11:36.869" starttime="20170822 17:11:36.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:11:36.870" starttime="20170822 17:11:36.870"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:11:36.894" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170822 17:11:36.894" starttime="20170822 17:11:36.894"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:11:36.896" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_xyz_l...</msg>
<status status="PASS" endtime="20170822 17:11:36.896" starttime="20170822 17:11:36.895"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:11:36.897" level="INFO">${logpath} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170822 17:11:36.897" starttime="20170822 17:11:36.897"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:11:36.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:11:36.902" starttime="20170822 17:11:36.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:11:36.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:11:36.902" starttime="20170822 17:11:36.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:11:36.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:11:36.903" starttime="20170822 17:11:36.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:11:36.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:11:36.904" starttime="20170822 17:11:36.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:11:46.919" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170822 17:11:46.919" starttime="20170822 17:11:36.904"></status>
</kw>
<msg timestamp="20170822 17:11:46.919" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170822 17:11:46.919" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170822 17:11:46.919" starttime="20170822 17:11:36.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:11:46.920" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:11:46.920" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:11:46.921" starttime="20170822 17:11:46.920"></status>
</kw>
<status status="FAIL" endtime="20170822 17:11:46.921" starttime="20170822 17:11:36.899"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:06.925" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:06.925" starttime="20170822 17:12:06.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:06.926" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:06.926" starttime="20170822 17:12:06.926"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:06.927" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:06.927" starttime="20170822 17:12:06.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:06.928" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:06.928" starttime="20170822 17:12:06.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:16.945" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170822 17:12:16.945" starttime="20170822 17:12:06.930"></status>
</kw>
<msg timestamp="20170822 17:12:16.945" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170822 17:12:16.945" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170822 17:12:16.945" starttime="20170822 17:12:06.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:16.947" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:12:16.947" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:12:16.947" starttime="20170822 17:12:16.946"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.948" starttime="20170822 17:12:06.922"></status>
</kw>
<msg timestamp="20170822 17:12:16.948" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:12:16.948" starttime="20170822 17:11:36.898"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.948" starttime="20170822 17:11:36.898"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.948" starttime="20170822 17:11:36.897"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.948" starttime="20170822 17:11:36.896"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.948" starttime="20170822 17:11:36.896"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.949" starttime="20170822 17:11:36.895"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.949" starttime="20170822 17:11:36.895"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.949" starttime="20170822 17:11:36.895"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:16.949" starttime="20170822 17:11:36.893"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:16.949" starttime="20170822 17:11:36.870"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:16.949" starttime="20170822 17:11:36.868"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:16.949" starttime="20170822 17:11:36.867"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:16.952" starttime="20170822 17:12:16.951"></status>
</kw>
<msg timestamp="20170822 17:12:16.952" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:16.952" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:12:16.952" starttime="20170822 17:12:16.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:16.953" starttime="20170822 17:12:16.953"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:16.986" starttime="20170822 17:12:16.982"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170822 17:12:16.989" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170822 17:12:16.989" starttime="20170822 17:12:16.986"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:16.989" starttime="20170822 17:12:16.982"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:16.989" starttime="20170822 17:12:16.954"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:16.989" starttime="20170822 17:12:16.950"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:16.989" starttime="20170822 17:12:16.949"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:16.992" starttime="20170822 17:12:16.991"></status>
</kw>
<msg timestamp="20170822 17:12:16.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:16.992" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:12:16.992" starttime="20170822 17:12:16.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:16.993" starttime="20170822 17:12:16.993"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170822 17:12:17.062" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:17.062" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:17.062" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170822 17:12:17.171" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170822 17:12:17.187" level="FAIL">#(UTC) 2017/08/22 17:12:17.185902 -   62.331635 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170822 17:12:17.187" starttime="20170822 17:12:17.023"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:17.187" starttime="20170822 17:12:17.022"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:17.187" starttime="20170822 17:12:16.993"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:17.187" starttime="20170822 17:12:16.990"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:17.187" starttime="20170822 17:12:16.989"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:17.191" starttime="20170822 17:12:17.190"></status>
</kw>
<msg timestamp="20170822 17:12:17.191" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:17.191" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:12:17.191" starttime="20170822 17:12:17.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:17.192" starttime="20170822 17:12:17.191"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:12:17.220" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170822 17:12:17.220" starttime="20170822 17:12:17.219"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:12:17.222" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170822 17:12:17.222" starttime="20170822 17:12:17.221"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:17.223" level="INFO">${logpath} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170822 17:12:17.223" starttime="20170822 17:12:17.223"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:17.227" starttime="20170822 17:12:17.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:17.228" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:17.228" starttime="20170822 17:12:17.227"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:17.307" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:17.307" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:17.307" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170822 17:12:18.585" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:18.586" starttime="20170822 17:12:17.259"></status>
</kw>
<msg timestamp="20170822 17:12:18.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:18.587" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:44 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:44 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170822 17:12:18.587" starttime="20170822 17:12:17.228"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:18.588" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:44 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:44 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170822 17:12:18.588" starttime="20170822 17:12:18.587"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:18.589" level="INFO">${stderr} = ls: /proc/1247/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170822 17:12:18.589" starttime="20170822 17:12:18.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:18.598" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:18.598" starttime="20170822 17:12:18.597"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.598" starttime="20170822 17:12:18.595"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.598" starttime="20170822 17:12:18.589"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.598" starttime="20170822 17:12:17.224"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.598" starttime="20170822 17:12:17.222"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:18.599" level="INFO">${logpath} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170822 17:12:18.599" starttime="20170822 17:12:18.598"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:18.600" starttime="20170822 17:12:18.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:18.601" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:18.601" starttime="20170822 17:12:18.601"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:18.673" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:18.674" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:18.674" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170822 17:12:18.750" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:18.750" starttime="20170822 17:12:18.631"></status>
</kw>
<msg timestamp="20170822 17:12:18.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:18.751" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170822 17:12:18.751" starttime="20170822 17:12:18.601"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:18.752" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170822 17:12:18.752" starttime="20170822 17:12:18.752"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:18.753" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:18.753" starttime="20170822 17:12:18.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:18.767" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:18.767" starttime="20170822 17:12:18.765"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.767" starttime="20170822 17:12:18.764"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.768" starttime="20170822 17:12:18.754"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.768" starttime="20170822 17:12:18.599"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.768" starttime="20170822 17:12:18.598"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:18.769" level="INFO">${logpath} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170822 17:12:18.770" starttime="20170822 17:12:18.769"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:18.772" starttime="20170822 17:12:18.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:18.773" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:18.774" starttime="20170822 17:12:18.773"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:18.852" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:18.852" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:18.853" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170822 17:12:18.920" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:18.920" starttime="20170822 17:12:18.806"></status>
</kw>
<msg timestamp="20170822 17:12:18.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:18.920" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          285540 kB\nMemAvailable:     329548 kB\nBuffers:           10888 kB\nCached:            50388 kB\nSwapCached:            0 kB\nActive:            8859...</msg>
<status status="PASS" endtime="20170822 17:12:18.920" starttime="20170822 17:12:18.774"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:18.922" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          285540 kB
MemAvailable:     329548 kB
Buffers:           10888 kB
Cached:            50388 kB
SwapCached:            0 kB
Active:            88592 kB
Inac...</msg>
<status status="PASS" endtime="20170822 17:12:18.922" starttime="20170822 17:12:18.921"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:18.922" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:18.923" starttime="20170822 17:12:18.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:18.932" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:18.932" starttime="20170822 17:12:18.931"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.932" starttime="20170822 17:12:18.930"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.932" starttime="20170822 17:12:18.923"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.932" starttime="20170822 17:12:18.770"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:18.932" starttime="20170822 17:12:18.768"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:18.933" level="INFO">${logpath} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170822 17:12:18.933" starttime="20170822 17:12:18.933"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:18.935" starttime="20170822 17:12:18.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:18.936" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:18.936" starttime="20170822 17:12:18.935"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:19.011" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:19.012" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:19.013" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170822 17:12:19.463" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:19.463" starttime="20170822 17:12:18.971"></status>
</kw>
<msg timestamp="20170822 17:12:19.463" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:19.464" level="INFO">${ret_values} = (u'Mem: 146956K used, 285292K free, 14448K shrd, 10888K buff, 50392K cached\nCPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 7.37 2.73 0.99 6/150 1250\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170822 17:12:19.464" starttime="20170822 17:12:18.936"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:19.469" level="INFO">${stdout} = Mem: 146956K used, 285292K free, 14448K shrd, 10888K buff, 50392K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 7.37 2.73 0.99 6/150 1250
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170822 17:12:19.469" starttime="20170822 17:12:19.465"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:19.470" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:19.470" starttime="20170822 17:12:19.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:19.481" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:19.481" starttime="20170822 17:12:19.480"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.481" starttime="20170822 17:12:19.479"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.481" starttime="20170822 17:12:19.471"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.481" starttime="20170822 17:12:18.934"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.481" starttime="20170822 17:12:18.932"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:19.482" level="INFO">${logpath} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170822 17:12:19.482" starttime="20170822 17:12:19.482"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:19.484" starttime="20170822 17:12:19.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:19.484" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:19.485" starttime="20170822 17:12:19.484"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:19.568" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:19.568" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:19.569" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170822 17:12:19.657" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:19.657" starttime="20170822 17:12:19.518"></status>
</kw>
<msg timestamp="20170822 17:12:19.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:19.658" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 22 1...</msg>
<status status="PASS" endtime="20170822 17:12:19.658" starttime="20170822 17:12:19.485"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:19.658" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 22 14:06...</msg>
<status status="PASS" endtime="20170822 17:12:19.658" starttime="20170822 17:12:19.658"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:19.659" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:19.659" starttime="20170822 17:12:19.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:19.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:19.667" starttime="20170822 17:12:19.667"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.667" starttime="20170822 17:12:19.665"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.667" starttime="20170822 17:12:19.659"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.667" starttime="20170822 17:12:19.482"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:19.667" starttime="20170822 17:12:19.481"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:19.668" level="INFO">${logpath} = /home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170822 17:12:19.668" starttime="20170822 17:12:19.668"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:19.670" starttime="20170822 17:12:19.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:19.671" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:19.671" starttime="20170822 17:12:19.670"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:19.747" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:19.747" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:19.748" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170822 17:12:20.654" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:20.654" starttime="20170822 17:12:19.699"></status>
</kw>
<msg timestamp="20170822 17:12:20.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:20.656" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:43:00 UTC, end at Thu 2017-08-03 15:44:35 UTC. --\nAug 03 15:43:00 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:43:00 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170822 17:12:20.656" starttime="20170822 17:12:19.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:20.657" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:43:00 UTC, end at Thu 2017-08-03 15:44:35 UTC. --
Aug 03 15:43:00 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:43:00 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170822 17:12:20.657" starttime="20170822 17:12:20.656"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:20.658" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:20.658" starttime="20170822 17:12:20.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:20.666" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170822171111726209_UpdateBmc/20170822171111726209_InitiateCodeUpdateBMC/9.41.166.169.170822.170627.BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:20.666" starttime="20170822 17:12:20.665"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.666" starttime="20170822 17:12:20.664"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.666" starttime="20170822 17:12:20.658"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:19.669"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:19.668"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.222"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.220"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.220"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.220"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.219"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.192"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.188"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:20.667" starttime="20170822 17:12:17.188"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:20.671" starttime="20170822 17:12:20.670"></status>
</kw>
<msg timestamp="20170822 17:12:20.671" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:20.671" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:12:20.671" starttime="20170822 17:12:20.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:20.671" starttime="20170822 17:12:20.671"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:20.702" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:20.703" starttime="20170822 17:12:20.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:20.703" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:20.703" starttime="20170822 17:12:20.703"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:20.704" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:20.704" starttime="20170822 17:12:20.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:20.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:20.705" starttime="20170822 17:12:20.704"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:30.712" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170822 17:12:30.713" starttime="20170822 17:12:20.705"></status>
</kw>
<msg timestamp="20170822 17:12:30.713" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170822 17:12:30.713" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170822 17:12:30.713" starttime="20170822 17:12:20.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:30.714" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:12:30.714" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170822 17:12:30.714" starttime="20170822 17:12:30.714"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:30.715" starttime="20170822 17:12:20.700"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:50.717" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:50.718" starttime="20170822 17:12:50.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:50.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:50.719" starttime="20170822 17:12:50.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:50.719" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:50.719" starttime="20170822 17:12:50.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:50.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:50.720" starttime="20170822 17:12:50.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:50.929" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:50.929" starttime="20170822 17:12:50.721"></status>
</kw>
<msg timestamp="20170822 17:12:50.929" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:50.929" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:50.929" starttime="20170822 17:12:50.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:50.930" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:50.930" starttime="20170822 17:12:50.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:50.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:50.931" starttime="20170822 17:12:50.930"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:50.931" starttime="20170822 17:12:50.716"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:50.931" starttime="20170822 17:12:20.699"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:50.931" starttime="20170822 17:12:20.699"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:50.932" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170822 17:12:50.932" starttime="20170822 17:12:50.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:50.933" starttime="20170822 17:12:50.932"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:50.978" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:12:50.978" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:50.978" starttime="20170822 17:12:50.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:50.979" starttime="20170822 17:12:50.978"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:50.979" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:50.979" starttime="20170822 17:12:50.979"></status>
</kw>
<msg timestamp="20170822 17:12:50.980" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:50.980" starttime="20170822 17:12:20.698"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:50.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:12:50.981" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:12:50.981" starttime="20170822 17:12:50.980"></status>
</kw>
<msg timestamp="20170822 17:12:50.981" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:12:50.981" starttime="20170822 17:12:50.980"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170822 17:12:50.982" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170822 17:12:50.982" starttime="20170822 17:12:50.981"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:50.982" starttime="20170822 17:12:20.698"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:50.982" starttime="20170822 17:12:20.672"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:50.982" starttime="20170822 17:12:20.668"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:50.982" starttime="20170822 17:12:20.668"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:50.984" starttime="20170822 17:12:50.984"></status>
</kw>
<msg timestamp="20170822 17:12:50.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:50.984" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:12:50.984" starttime="20170822 17:12:50.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:50.985" starttime="20170822 17:12:50.985"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170822 17:12:51.007" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:12:51.007"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:12:51.006"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:12:50.985"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:12:50.983"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:12:50.982"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:11:14.884"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:11:14.881"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:11:14.881"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.008" starttime="20170822 17:11:14.881"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170822 17:12:51.019" starttime="20170822 17:12:51.019"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.019" starttime="20170822 17:12:51.008"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.019" starttime="20170822 17:11:14.880"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.020" starttime="20170822 17:11:08.652"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:51.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:51.070" starttime="20170822 17:12:51.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:51.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:51.071" starttime="20170822 17:12:51.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:51.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:51.072" starttime="20170822 17:12:51.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:51.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:51.072" starttime="20170822 17:12:51.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.249" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:51.250" starttime="20170822 17:12:51.073"></status>
</kw>
<msg timestamp="20170822 17:12:51.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:51.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.250" starttime="20170822 17:12:51.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.251" starttime="20170822 17:12:51.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.252" starttime="20170822 17:12:51.251"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.252" starttime="20170822 17:12:51.067"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.252" starttime="20170822 17:12:51.067"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.252" starttime="20170822 17:12:51.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:51.253" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170822 17:12:51.253" starttime="20170822 17:12:51.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:51.254" starttime="20170822 17:12:51.253"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:51.325" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170822 17:12:51.326" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.326" starttime="20170822 17:12:51.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:51.326" starttime="20170822 17:12:51.326"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:51.327" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:51.327" starttime="20170822 17:12:51.327"></status>
</kw>
<msg timestamp="20170822 17:12:51.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.327" starttime="20170822 17:12:51.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.328" starttime="20170822 17:12:51.327"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:12:51.329" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:12:51.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:12:51.329" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170822 17:12:51.329" starttime="20170822 17:12:51.328"></status>
</kw>
<msg timestamp="20170822 17:12:51.329" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170822 17:12:51.329" starttime="20170822 17:12:51.064"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.329" starttime="20170822 17:12:51.061"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:51.333" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:51.334" starttime="20170822 17:12:51.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:51.334" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:51.334" starttime="20170822 17:12:51.334"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:51.335" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:51.335" starttime="20170822 17:12:51.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:51.336" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:51.336" starttime="20170822 17:12:51.335"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.514" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:51.514" starttime="20170822 17:12:51.337"></status>
</kw>
<msg timestamp="20170822 17:12:51.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:51.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.515" starttime="20170822 17:12:51.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.515" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.516" starttime="20170822 17:12:51.515"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.516" starttime="20170822 17:12:51.516"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.516" starttime="20170822 17:12:51.333"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.516" starttime="20170822 17:12:51.332"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.517" starttime="20170822 17:12:51.331"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:51.517" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170822 17:12:51.517" starttime="20170822 17:12:51.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:51.518" starttime="20170822 17:12:51.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:51.583" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170822 17:12:51.583" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.583" starttime="20170822 17:12:51.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:51.584" starttime="20170822 17:12:51.584"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:51.585" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:51.585" starttime="20170822 17:12:51.584"></status>
</kw>
<msg timestamp="20170822 17:12:51.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.585" starttime="20170822 17:12:51.331"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.586" starttime="20170822 17:12:51.585"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:12:51.586" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:12:51.586" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:12:51.586" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170822 17:12:51.586" starttime="20170822 17:12:51.586"></status>
</kw>
<msg timestamp="20170822 17:12:51.587" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170822 17:12:51.587" starttime="20170822 17:12:51.330"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.587" starttime="20170822 17:12:51.330"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170822 17:12:51.589" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170822 17:12:51.589" starttime="20170822 17:12:51.589"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.589" starttime="20170822 17:12:51.588"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.589" starttime="20170822 17:12:51.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Old Get Boot Progress" library="utils">
<doc>Get the boot progress the old way (via org location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:51.594" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:51.594" starttime="20170822 17:12:51.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:51.595" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:51.595" starttime="20170822 17:12:51.595"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:51.596" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:51.596" starttime="20170822 17:12:51.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:51.597" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:51.597" starttime="20170822 17:12:51.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:51.821" starttime="20170822 17:12:51.597"></status>
</kw>
<msg timestamp="20170822 17:12:51.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:51.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.821" starttime="20170822 17:12:51.597"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.822" starttime="20170822 17:12:51.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.823" starttime="20170822 17:12:51.822"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.823" starttime="20170822 17:12:51.593"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.823" starttime="20170822 17:12:51.592"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.824" starttime="20170822 17:12:51.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:51.825" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170822 17:12:51.825" starttime="20170822 17:12:51.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:51.825" starttime="20170822 17:12:51.825"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:51.902" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170822 17:12:51.902" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.902" starttime="20170822 17:12:51.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:51.902" starttime="20170822 17:12:51.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:51.903" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:51.903" starttime="20170822 17:12:51.903"></status>
</kw>
<msg timestamp="20170822 17:12:51.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.903" starttime="20170822 17:12:51.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:51.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:51.904" starttime="20170822 17:12:51.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:12:51.904" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:12:51.905" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:12:51.905" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170822 17:12:51.905" starttime="20170822 17:12:51.904"></status>
</kw>
<msg timestamp="20170822 17:12:51.905" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170822 17:12:51.905" starttime="20170822 17:12:51.590"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.905" starttime="20170822 17:12:51.590"></status>
</kw>
<msg timestamp="20170822 17:12:51.905" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170822 17:12:51.905" starttime="20170822 17:12:51.590"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:51.905" starttime="20170822 17:12:51.587"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:51.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:51.910" starttime="20170822 17:12:51.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:51.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:51.911" starttime="20170822 17:12:51.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:51.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:51.911" starttime="20170822 17:12:51.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:51.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:51.912" starttime="20170822 17:12:51.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.160" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:52.161" starttime="20170822 17:12:51.913"></status>
</kw>
<msg timestamp="20170822 17:12:52.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:52.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.161" starttime="20170822 17:12:51.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.162" starttime="20170822 17:12:52.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.163" starttime="20170822 17:12:52.162"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.163" starttime="20170822 17:12:51.909"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.163" starttime="20170822 17:12:51.908"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.163" starttime="20170822 17:12:51.907"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:52.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170822 17:12:52.164" starttime="20170822 17:12:52.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:52.164" starttime="20170822 17:12:52.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:52.251" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170822 17:12:52.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.252" starttime="20170822 17:12:52.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:52.252" starttime="20170822 17:12:52.252"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:52.253" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:52.253" starttime="20170822 17:12:52.253"></status>
</kw>
<msg timestamp="20170822 17:12:52.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.253" starttime="20170822 17:12:51.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.254" starttime="20170822 17:12:52.253"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:12:52.254" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:12:52.254" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:12:52.255" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170822 17:12:52.255" starttime="20170822 17:12:52.254"></status>
</kw>
<msg timestamp="20170822 17:12:52.255" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170822 17:12:52.255" starttime="20170822 17:12:51.906"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.255" starttime="20170822 17:12:51.906"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.326" starttime="20170822 17:11:08.640"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:52.343" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:52.344" starttime="20170822 17:12:52.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:52.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:52.345" starttime="20170822 17:12:52.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:52.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:52.346" starttime="20170822 17:12:52.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:52.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:52.346" starttime="20170822 17:12:52.346"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.527" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:52.527" starttime="20170822 17:12:52.347"></status>
</kw>
<msg timestamp="20170822 17:12:52.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:52.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.527" starttime="20170822 17:12:52.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.528" starttime="20170822 17:12:52.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.529" starttime="20170822 17:12:52.529"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.529" starttime="20170822 17:12:52.342"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.529" starttime="20170822 17:12:52.342"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.529" starttime="20170822 17:12:52.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:52.530" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170822 17:12:52.530" starttime="20170822 17:12:52.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:52.531" starttime="20170822 17:12:52.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:52.573" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170822 17:12:52.573" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.573" starttime="20170822 17:12:52.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:52.574" starttime="20170822 17:12:52.573"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:52.574" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:52.574" starttime="20170822 17:12:52.574"></status>
</kw>
<msg timestamp="20170822 17:12:52.575" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.575" starttime="20170822 17:12:52.340"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.575" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170822 17:12:52.575" starttime="20170822 17:12:52.575"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.576" starttime="20170822 17:12:52.339"></status>
</kw>
<msg timestamp="20170822 17:12:52.580" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170822 17:12:52.586" starttime="20170822 17:12:52.586"></status>
</kw>
<msg timestamp="20170822 17:12:52.599" level="FAIL">#(UTC) 2017/08/22 17:12:52.598288 -    1.578855 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170822 17:12:52.599" starttime="20170822 17:06:23.539"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170822 17:12:52.603" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170822 17:12:52.605" starttime="20170822 17:12:52.599"></status>
</kw>
<status status="FAIL" endtime="20170822 17:12:52.605" starttime="20170822 17:06:23.538"></status>
</kw>
<msg timestamp="20170822 17:12:52.605" level="FAIL">#(UTC) 2017/08/22 17:12:52.598288 -    1.578855 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170822 17:12:52.605" starttime="20170822 17:06:23.533"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:52.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:52.621" starttime="20170822 17:12:52.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:52.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:52.621" starttime="20170822 17:12:52.621"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:52.622" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:52.622" starttime="20170822 17:12:52.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:52.623" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:52.623" starttime="20170822 17:12:52.622"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:52.800" starttime="20170822 17:12:52.624"></status>
</kw>
<msg timestamp="20170822 17:12:52.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:52.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.800" starttime="20170822 17:12:52.623"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.801" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.801" starttime="20170822 17:12:52.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.801" starttime="20170822 17:12:52.801"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.802" starttime="20170822 17:12:52.619"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.802" starttime="20170822 17:12:52.619"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:52.802" starttime="20170822 17:12:52.618"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:52.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170822 17:12:52.802" starttime="20170822 17:12:52.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:52.803" starttime="20170822 17:12:52.803"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:52.924" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170822 17:12:52.924" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.924" starttime="20170822 17:12:52.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:52.925" starttime="20170822 17:12:52.925"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:52.926" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:52.926" starttime="20170822 17:12:52.926"></status>
</kw>
<msg timestamp="20170822 17:12:52.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.926" starttime="20170822 17:12:52.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:52.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:52.927" starttime="20170822 17:12:52.926"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170822 17:12:52.927" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:12:52.927" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170822 17:12:52.928" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170822 17:12:52.928" starttime="20170822 17:12:52.927"></status>
</kw>
<msg timestamp="20170822 17:12:52.928" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170822 17:12:52.928" starttime="20170822 17:12:52.617"></status>
</kw>
<msg timestamp="20170822 17:12:52.928" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170822 17:12:52.928" starttime="20170822 17:12:52.616"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170822 17:12:52.930" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170822 17:12:52.930" starttime="20170822 17:12:52.929"></status>
</kw>
<msg timestamp="20170822 17:12:52.930" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:12:52.930" starttime="20170822 17:12:52.929"></status>
</kw>
<msg timestamp="20170822 17:12:52.930" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:12:52.930" starttime="20170822 17:12:52.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170822 17:12:52.944" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170822 17:12:52.944" starttime="20170822 17:12:52.944"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170822 17:12:52.948" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170822 17:12:55.951" level="INFO">${RC} = 0</msg>
<msg timestamp="20170822 17:12:55.951" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.951 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.561 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170822 17:12:55.952" starttime="20170822 17:12:52.945"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170822 17:12:55.955" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.951 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.561 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.555 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.41 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.555/0.871/1.419/0.355 ms</msg>
<status status="PASS" endtime="20170822 17:12:55.955" starttime="20170822 17:12:55.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:55.956" starttime="20170822 17:12:55.956"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:55.956" starttime="20170822 17:12:52.943"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170822 17:12:55.972" level="INFO">${cur_time} = 2017-08-22 17:12:55:971244</msg>
<status status="PASS" endtime="20170822 17:12:55.972" starttime="20170822 17:12:55.971"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170822 17:12:55.972" level="INFO">${cur_time} = 20170822171255971244</msg>
<status status="PASS" endtime="20170822 17:12:55.972" starttime="20170822 17:12:55.972"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:55.972" starttime="20170822 17:12:55.970"></status>
</kw>
<msg timestamp="20170822 17:12:55.973" level="INFO">${FFDC_TIME} = 20170822171255971244</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170822 17:12:55.974" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170822 17:12:55.974" starttime="20170822 17:12:55.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170822 17:12:55.975" level="INFO">${suite_name} = 20170822171255971244_UpdateBmc</msg>
<status status="PASS" endtime="20170822 17:12:55.975" starttime="20170822 17:12:55.974"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170822 17:12:55.975" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170822 17:12:55.976" starttime="20170822 17:12:55.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170822 17:12:55.976" level="INFO">${test_name} = 20170822171255971244_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170822 17:12:55.976" starttime="20170822 17:12:55.976"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:55.976" starttime="20170822 17:12:55.973"></status>
</kw>
<msg timestamp="20170822 17:12:55.977" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170822 17:12:55.977" level="INFO">${FFDC_PREFIX} = 20170822171255971244_</msg>
<msg timestamp="20170822 17:12:55.995" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170822 17:12:55.998" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:55.998" starttime="20170822 17:12:55.997"></status>
</kw>
<msg timestamp="20170822 17:12:55.998" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.013" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.013" starttime="20170822 17:12:56.012"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.013" starttime="20170822 17:12:56.011"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.015" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.015" starttime="20170822 17:12:56.014"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.015" starttime="20170822 17:12:56.013"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.016" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.017" starttime="20170822 17:12:56.016"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.017" starttime="20170822 17:12:56.015"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.018" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.018" starttime="20170822 17:12:56.018"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.018" starttime="20170822 17:12:56.017"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.019" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.019" starttime="20170822 17:12:56.019"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.019" starttime="20170822 17:12:56.018"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.026" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.026" starttime="20170822 17:12:56.021"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.027" starttime="20170822 17:12:56.020"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.028" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.028" starttime="20170822 17:12:56.028"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.028" starttime="20170822 17:12:56.027"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.030" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.030" starttime="20170822 17:12:56.029"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.030" starttime="20170822 17:12:56.029"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.031" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.031" starttime="20170822 17:12:56.031"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.031" starttime="20170822 17:12:56.030"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.035" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.035" starttime="20170822 17:12:56.034"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.035" starttime="20170822 17:12:56.032"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.036" starttime="20170822 17:12:56.035"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.036" starttime="20170822 17:12:56.035"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.037" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.037" starttime="20170822 17:12:56.037"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.038" starttime="20170822 17:12:56.036"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.039" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.039" starttime="20170822 17:12:56.038"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.039" starttime="20170822 17:12:56.038"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170822 17:12:56.062" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:56.062" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:56.062" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170822 17:12:56.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170822 17:12:56.149" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170822 17:12:56.150" level="INFO">${stderr} = </msg>
<msg timestamp="20170822 17:12:56.150" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170822 17:12:56.150" starttime="20170822 17:12:56.040"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.150" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170822 17:12:56.150" starttime="20170822 17:12:56.150"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.151" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170822 17:12:56.151" starttime="20170822 17:12:56.151"></status>
</kw>
<msg timestamp="20170822 17:12:56.151" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170822 17:12:56.151" starttime="20170822 17:12:56.039"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.152" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.153" starttime="20170822 17:12:56.152"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.153" starttime="20170822 17:12:56.151"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.153" starttime="20170822 17:12:56.031"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.154" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.154" starttime="20170822 17:12:56.154"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.155" starttime="20170822 17:12:56.153"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:12:56.155" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170822 17:12:56.155" starttime="20170822 17:12:56.155"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.158" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.158" starttime="20170822 17:12:56.158"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.158" starttime="20170822 17:12:56.156"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.159" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.159" starttime="20170822 17:12:56.159"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.160" starttime="20170822 17:12:56.158"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.160" starttime="20170822 17:12:56.155"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.161" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.161" starttime="20170822 17:12:56.161"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.161" starttime="20170822 17:12:56.160"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.162" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.162" starttime="20170822 17:12:56.162"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.162" starttime="20170822 17:12:56.161"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.162" starttime="20170822 17:12:56.160"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.164" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.164" starttime="20170822 17:12:56.163"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.164" starttime="20170822 17:12:56.163"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.165" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.165" starttime="20170822 17:12:56.165"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.165" starttime="20170822 17:12:56.164"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.165" starttime="20170822 17:12:56.163"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.165" starttime="20170822 17:12:56.155"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.167" starttime="20170822 17:12:56.166"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.167" starttime="20170822 17:12:56.166"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.167" starttime="20170822 17:12:56.010"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:12:56.174" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170822 17:12:56.174" starttime="20170822 17:12:56.174"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170822 17:12:56.175" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170822 17:12:56.175" starttime="20170822 17:12:56.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:56.177" starttime="20170822 17:12:56.176"></status>
</kw>
<msg timestamp="20170822 17:12:56.177" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170822 17:12:56.177" starttime="20170822 17:12:56.176"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:56.179" starttime="20170822 17:12:56.179"></status>
</kw>
<msg timestamp="20170822 17:12:56.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:56.179" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:12:56.179" starttime="20170822 17:12:56.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:56.180" starttime="20170822 17:12:56.180"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:12:56.202" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170822 17:12:56.202" starttime="20170822 17:12:56.201"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:12:56.203" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170822 17:12:56.203" starttime="20170822 17:12:56.203"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.204" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170822 17:12:56.204" starttime="20170822 17:12:56.203"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.208" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.208" starttime="20170822 17:12:56.207"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.208" starttime="20170822 17:12:56.207"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.209" starttime="20170822 17:12:56.209"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.210" starttime="20170822 17:12:56.208"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.211" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.211" starttime="20170822 17:12:56.211"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.211" starttime="20170822 17:12:56.210"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:56.214" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:56.214" starttime="20170822 17:12:56.212"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.214" starttime="20170822 17:12:56.211"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.214" starttime="20170822 17:12:56.206"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:56.214" starttime="20170822 17:12:56.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:56.215" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:56.215" starttime="20170822 17:12:56.215"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:56.280" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:56.280" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:56.281" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170822 17:12:57.650" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:57.650" starttime="20170822 17:12:56.242"></status>
</kw>
<msg timestamp="20170822 17:12:57.650" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:57.650" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170822 17:12:57.650" starttime="20170822 17:12:56.215"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:57.651" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170822 17:12:57.651" starttime="20170822 17:12:57.651"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:57.651" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:57.652" starttime="20170822 17:12:57.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.659" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:57.659"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:57.658"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:57.652"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:56.205"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:56.205"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:56.204"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:56.202"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.660" starttime="20170822 17:12:56.202"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:12:57.661" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170822 17:12:57.661" starttime="20170822 17:12:57.661"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.662" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170822 17:12:57.662" starttime="20170822 17:12:57.662"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.665" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.665" starttime="20170822 17:12:57.665"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.666" starttime="20170822 17:12:57.664"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.667" starttime="20170822 17:12:57.666"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.667" starttime="20170822 17:12:57.666"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.668" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.668" starttime="20170822 17:12:57.668"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.668" starttime="20170822 17:12:57.667"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.670" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.670" starttime="20170822 17:12:57.669"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.670" starttime="20170822 17:12:57.668"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.670" starttime="20170822 17:12:57.664"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.670" starttime="20170822 17:12:57.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:57.671" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:57.671" starttime="20170822 17:12:57.670"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:57.734" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:57.734" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:57.734" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170822 17:12:57.811" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:57.811" starttime="20170822 17:12:57.698"></status>
</kw>
<msg timestamp="20170822 17:12:57.811" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:57.812" level="INFO">${ret_values} = (u'20170822140726', u'', 0)</msg>
<status status="PASS" endtime="20170822 17:12:57.812" starttime="20170822 17:12:57.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:57.812" level="INFO">${stdout} = 20170822140726</msg>
<status status="PASS" endtime="20170822 17:12:57.812" starttime="20170822 17:12:57.812"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:57.813" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:57.813" starttime="20170822 17:12:57.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.821" starttime="20170822 17:12:57.820"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.821" starttime="20170822 17:12:57.819"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.821" starttime="20170822 17:12:57.813"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.821" starttime="20170822 17:12:57.663"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.821" starttime="20170822 17:12:57.662"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.824" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.824" starttime="20170822 17:12:57.824"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.824" starttime="20170822 17:12:57.823"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.826" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.826" starttime="20170822 17:12:57.825"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.826" starttime="20170822 17:12:57.824"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.827" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.827" starttime="20170822 17:12:57.827"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.827" starttime="20170822 17:12:57.826"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.828" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.829" starttime="20170822 17:12:57.828"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.829" starttime="20170822 17:12:57.827"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.829" starttime="20170822 17:12:57.823"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.829" starttime="20170822 17:12:57.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:57.830" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:57.830" starttime="20170822 17:12:57.829"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:57.898" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:57.898" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:57.898" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170822 17:12:57.955" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:57.955" starttime="20170822 17:12:57.861"></status>
</kw>
<msg timestamp="20170822 17:12:57.955" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:57.955" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-14"\nVERSION_ID="v1.99.9-14-g183ac6c"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170822 17:12:57.955" starttime="20170822 17:12:57.830"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:57.956" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-14"
VERSION_ID="v1.99.9-14-g183ac6c"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170822 17:12:57.956" starttime="20170822 17:12:57.956"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:57.957" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:57.957" starttime="20170822 17:12:57.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.965" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.964"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.963"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.957"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.821"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.821"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.662"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.660"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.965" starttime="20170822 17:12:57.660"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:12:57.966" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170822 17:12:57.966" starttime="20170822 17:12:57.966"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.967" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170822 17:12:57.967" starttime="20170822 17:12:57.967"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.971" starttime="20170822 17:12:57.970"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.971" starttime="20170822 17:12:57.969"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.972" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.972" starttime="20170822 17:12:57.972"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.972" starttime="20170822 17:12:57.971"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.973" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.973" starttime="20170822 17:12:57.973"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.973" starttime="20170822 17:12:57.972"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:57.975" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:57.975" starttime="20170822 17:12:57.974"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.975" starttime="20170822 17:12:57.974"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.975" starttime="20170822 17:12:57.969"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:57.975" starttime="20170822 17:12:57.968"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:57.976" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:57.976" starttime="20170822 17:12:57.975"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:58.039" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:58.039" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:58.039" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170822 17:12:58.086" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:58.087" starttime="20170822 17:12:58.005"></status>
</kw>
<msg timestamp="20170822 17:12:58.087" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:58.087" level="INFO">${ret_values} = (u' 15:45:16 up 2 min,  load average: 5.97, 2.98, 1.15', u'', 0)</msg>
<status status="PASS" endtime="20170822 17:12:58.087" starttime="20170822 17:12:57.976"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:58.088" level="INFO">${stdout} =  15:45:16 up 2 min,  load average: 5.97, 2.98, 1.15</msg>
<status status="PASS" endtime="20170822 17:12:58.088" starttime="20170822 17:12:58.088"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:58.089" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:58.089" starttime="20170822 17:12:58.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.100" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.100" starttime="20170822 17:12:58.100"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.100" starttime="20170822 17:12:58.098"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.100" starttime="20170822 17:12:58.089"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.101" starttime="20170822 17:12:57.968"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.101" starttime="20170822 17:12:57.967"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.104" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.104" starttime="20170822 17:12:58.103"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.104" starttime="20170822 17:12:58.103"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.106" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.106" starttime="20170822 17:12:58.105"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.106" starttime="20170822 17:12:58.104"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.107" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.107" starttime="20170822 17:12:58.107"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.107" starttime="20170822 17:12:58.106"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.108" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.108" starttime="20170822 17:12:58.108"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.109" starttime="20170822 17:12:58.107"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.109" starttime="20170822 17:12:58.102"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.109" starttime="20170822 17:12:58.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:58.110" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:58.110" starttime="20170822 17:12:58.109"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:58.173" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:58.173" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:58.173" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170822 17:12:58.271" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:58.271" starttime="20170822 17:12:58.136"></status>
</kw>
<msg timestamp="20170822 17:12:58.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:58.271" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170822 17:12:58.271" starttime="20170822 17:12:58.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:58.272" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status status="PASS" endtime="20170822 17:12:58.272" starttime="20170822 17:12:58.271"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:58.273" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:58.273" starttime="20170822 17:12:58.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.280" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.280" starttime="20170822 17:12:58.280"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.281" starttime="20170822 17:12:58.279"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.281" starttime="20170822 17:12:58.273"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.281" starttime="20170822 17:12:58.101"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.281" starttime="20170822 17:12:58.101"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.284" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.284" starttime="20170822 17:12:58.284"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.284" starttime="20170822 17:12:58.283"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.285" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.286" starttime="20170822 17:12:58.285"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.286" starttime="20170822 17:12:58.284"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.287" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.287" starttime="20170822 17:12:58.286"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.287" starttime="20170822 17:12:58.286"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.288" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.288" starttime="20170822 17:12:58.288"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.288" starttime="20170822 17:12:58.287"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.288" starttime="20170822 17:12:58.282"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.289" starttime="20170822 17:12:58.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:12:58.289" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:12:58.289" starttime="20170822 17:12:58.289"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:12:58.350" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:58.351" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:12:58.351" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170822 17:12:58.428" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:12:58.428" starttime="20170822 17:12:58.315"></status>
</kw>
<msg timestamp="20170822 17:12:58.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:58.428" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Tue Aug 22 14:06:12 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170822 17:12:58.428" starttime="20170822 17:12:58.290"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:12:58.429" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Tue Aug 22 14:06:12 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170822 17:12:58.429" starttime="20170822 17:12:58.429"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:12:58.430" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:12:58.430" starttime="20170822 17:12:58.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.438" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:58.437"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:58.436"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:58.430"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:58.281"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:58.281"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:57.967"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:57.966"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:57.965"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:56.202"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.438" starttime="20170822 17:12:56.201"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.439" starttime="20170822 17:12:56.180"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.439" starttime="20170822 17:12:56.177"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.439" starttime="20170822 17:12:56.177"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:58.441" starttime="20170822 17:12:58.441"></status>
</kw>
<msg timestamp="20170822 17:12:58.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:58.441" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:12:58.441" starttime="20170822 17:12:58.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:58.442" starttime="20170822 17:12:58.441"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:12:58.461" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170822 17:12:58.461" starttime="20170822 17:12:58.461"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:12:58.463" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_xyz_l...</msg>
<status status="PASS" endtime="20170822 17:12:58.463" starttime="20170822 17:12:58.462"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:58.464" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170822 17:12:58.464" starttime="20170822 17:12:58.463"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:58.468" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:58.469" starttime="20170822 17:12:58.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:58.470" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:58.470" starttime="20170822 17:12:58.469"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:58.470" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:58.470" starttime="20170822 17:12:58.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:58.471" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:58.471" starttime="20170822 17:12:58.471"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.691" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:58.691" starttime="20170822 17:12:58.472"></status>
</kw>
<msg timestamp="20170822 17:12:58.691" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:58.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:58.691" starttime="20170822 17:12:58.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.692" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:58.692" starttime="20170822 17:12:58.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:58.693" starttime="20170822 17:12:58.693"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.693" starttime="20170822 17:12:58.467"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.693" starttime="20170822 17:12:58.467"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.693" starttime="20170822 17:12:58.466"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:58.694" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170822 17:12:58.694" starttime="20170822 17:12:58.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:58.695" starttime="20170822 17:12:58.694"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:58.911" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:12:58.911" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:58.911" starttime="20170822 17:12:58.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:58.912" starttime="20170822 17:12:58.911"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:58.912" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:58.912" starttime="20170822 17:12:58.912"></status>
</kw>
<msg timestamp="20170822 17:12:58.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:58.912" starttime="20170822 17:12:58.464"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:58.914" starttime="20170822 17:12:58.913"></status>
</kw>
<msg timestamp="20170822 17:12:58.914" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170822 17:12:58.914" starttime="20170822 17:12:58.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:58.914" starttime="20170822 17:12:58.914"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170822 17:12:58.915" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:12:58.915" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170822 17:12:58.915" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170822 17:12:58.915" starttime="20170822 17:12:58.915"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:58.917" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:58.917" starttime="20170822 17:12:58.916"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.917" starttime="20170822 17:12:58.916"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:58.917" starttime="20170822 17:12:58.463"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:58.918" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170822 17:12:58.918" starttime="20170822 17:12:58.917"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:58.921" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:58.922" starttime="20170822 17:12:58.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:58.923" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:58.923" starttime="20170822 17:12:58.922"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:58.924" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:58.924" starttime="20170822 17:12:58.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:58.925" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:58.925" starttime="20170822 17:12:58.924"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:59.101" starttime="20170822 17:12:58.926"></status>
</kw>
<msg timestamp="20170822 17:12:59.101" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:59.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.101" starttime="20170822 17:12:58.925"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.102" starttime="20170822 17:12:59.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.103" starttime="20170822 17:12:59.103"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.103" starttime="20170822 17:12:58.920"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.103" starttime="20170822 17:12:58.919"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.104" starttime="20170822 17:12:58.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:59.104" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170822 17:12:59.104" starttime="20170822 17:12:59.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:59.106" starttime="20170822 17:12:59.105"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:59.367" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:12:59.367" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.367" starttime="20170822 17:12:59.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:59.368" starttime="20170822 17:12:59.368"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:59.369" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:59.369" starttime="20170822 17:12:59.369"></status>
</kw>
<msg timestamp="20170822 17:12:59.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.369" starttime="20170822 17:12:58.918"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.371" starttime="20170822 17:12:59.370"></status>
</kw>
<msg timestamp="20170822 17:12:59.371" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170822 17:12:59.371" starttime="20170822 17:12:59.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:59.371" starttime="20170822 17:12:59.371"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170822 17:12:59.372" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:12:59.372" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170822 17:12:59.372" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170822 17:12:59.373" starttime="20170822 17:12:59.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.374" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:12:59.374" starttime="20170822 17:12:59.373"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.374" starttime="20170822 17:12:59.373"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.374" starttime="20170822 17:12:58.917"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:59.375" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170822 17:12:59.375" starttime="20170822 17:12:59.375"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:59.378" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:59.379" starttime="20170822 17:12:59.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:59.379" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:59.379" starttime="20170822 17:12:59.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:59.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:59.380" starttime="20170822 17:12:59.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:59.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:59.381" starttime="20170822 17:12:59.380"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.576" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:59.576" starttime="20170822 17:12:59.381"></status>
</kw>
<msg timestamp="20170822 17:12:59.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:59.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.576" starttime="20170822 17:12:59.381"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.577" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.577" starttime="20170822 17:12:59.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.578" starttime="20170822 17:12:59.578"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.578" starttime="20170822 17:12:59.377"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.578" starttime="20170822 17:12:59.376"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.578" starttime="20170822 17:12:59.376"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:59.579" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170822 17:12:59.579" starttime="20170822 17:12:59.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:59.580" starttime="20170822 17:12:59.579"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:12:59.648" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:12:59.648" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.648" starttime="20170822 17:12:59.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:59.648" starttime="20170822 17:12:59.648"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:12:59.649" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:12:59.649" starttime="20170822 17:12:59.649"></status>
</kw>
<msg timestamp="20170822 17:12:59.649" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.649" starttime="20170822 17:12:59.375"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:12:59.651" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:12:59.651" starttime="20170822 17:12:59.650"></status>
</kw>
<msg timestamp="20170822 17:12:59.651" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:12:59.651" starttime="20170822 17:12:59.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170822 17:12:59.652" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170822 17:12:59.652" starttime="20170822 17:12:59.652"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.652" starttime="20170822 17:12:59.651"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.652" starttime="20170822 17:12:59.374"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:12:59.653" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_sensor_xyz_list.txt</msg>
<status status="PASS" endtime="20170822 17:12:59.653" starttime="20170822 17:12:59.652"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:12:59.656" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:12:59.658" starttime="20170822 17:12:59.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:12:59.658" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:12:59.658" starttime="20170822 17:12:59.658"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:12:59.659" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:12:59.659" starttime="20170822 17:12:59.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:12:59.660" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:12:59.660" starttime="20170822 17:12:59.659"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.839" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:12:59.839" starttime="20170822 17:12:59.661"></status>
</kw>
<msg timestamp="20170822 17:12:59.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:12:59.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.839" starttime="20170822 17:12:59.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.840" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.840" starttime="20170822 17:12:59.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:12:59.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:12:59.841" starttime="20170822 17:12:59.840"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.841" starttime="20170822 17:12:59.655"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.841" starttime="20170822 17:12:59.654"></status>
</kw>
<status status="PASS" endtime="20170822 17:12:59.841" starttime="20170822 17:12:59.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:12:59.842" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170822 17:12:59.842" starttime="20170822 17:12:59.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:12:59.842" starttime="20170822 17:12:59.842"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:13:00.424" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:13:00.424" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.424" starttime="20170822 17:12:59.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:00.425" starttime="20170822 17:13:00.425"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:13:00.426" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:13:00.426" starttime="20170822 17:13:00.425"></status>
</kw>
<msg timestamp="20170822 17:13:00.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.426" starttime="20170822 17:12:59.653"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.427" starttime="20170822 17:13:00.427"></status>
</kw>
<msg timestamp="20170822 17:13:00.427" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170822 17:13:00.428" starttime="20170822 17:13:00.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:00.428" starttime="20170822 17:13:00.428"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170822 17:13:00.430" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 10000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31500
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 31
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:13:00.430" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170822 17:13:00.431" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170822 17:13:00.431" starttime="20170822 17:13:00.429"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.432" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_sensor_xyz_list.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:00.432" starttime="20170822 17:13:00.432"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.432" starttime="20170822 17:13:00.431"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.432" starttime="20170822 17:12:59.652"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:00.433" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_led.txt</msg>
<status status="PASS" endtime="20170822 17:13:00.433" starttime="20170822 17:13:00.433"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:13:00.436" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:13:00.437" starttime="20170822 17:13:00.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:13:00.438" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:13:00.438" starttime="20170822 17:13:00.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:13:00.438" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:13:00.438" starttime="20170822 17:13:00.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:13:00.439" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:13:00.439" starttime="20170822 17:13:00.439"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.616" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:13:00.616" starttime="20170822 17:13:00.440"></status>
</kw>
<msg timestamp="20170822 17:13:00.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:00.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.616" starttime="20170822 17:13:00.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.617" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.617" starttime="20170822 17:13:00.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.618" starttime="20170822 17:13:00.617"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.618" starttime="20170822 17:13:00.435"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.618" starttime="20170822 17:13:00.435"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.618" starttime="20170822 17:13:00.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:13:00.619" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170822 17:13:00.619" starttime="20170822 17:13:00.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:00.619" starttime="20170822 17:13:00.619"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:13:00.663" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:13:00.663" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.663" starttime="20170822 17:13:00.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:00.664" starttime="20170822 17:13:00.664"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:13:00.665" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:13:00.665" starttime="20170822 17:13:00.664"></status>
</kw>
<msg timestamp="20170822 17:13:00.665" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.665" starttime="20170822 17:13:00.434"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:13:00.666" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:13:00.666" starttime="20170822 17:13:00.666"></status>
</kw>
<msg timestamp="20170822 17:13:00.666" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:13:00.666" starttime="20170822 17:13:00.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170822 17:13:00.667" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170822 17:13:00.668" starttime="20170822 17:13:00.667"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.668" starttime="20170822 17:13:00.667"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.668" starttime="20170822 17:13:00.433"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:00.668" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_elog.txt</msg>
<status status="PASS" endtime="20170822 17:13:00.668" starttime="20170822 17:13:00.668"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:13:00.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:13:00.672" starttime="20170822 17:13:00.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:13:00.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:13:00.672" starttime="20170822 17:13:00.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:13:00.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:13:00.673" starttime="20170822 17:13:00.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:13:00.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:13:00.674" starttime="20170822 17:13:00.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.853" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:13:00.853" starttime="20170822 17:13:00.675"></status>
</kw>
<msg timestamp="20170822 17:13:00.853" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:00.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.853" starttime="20170822 17:13:00.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.854" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.854" starttime="20170822 17:13:00.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.855" starttime="20170822 17:13:00.854"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.855" starttime="20170822 17:13:00.671"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.855" starttime="20170822 17:13:00.670"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.855" starttime="20170822 17:13:00.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:13:00.856" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170822 17:13:00.856" starttime="20170822 17:13:00.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:00.857" starttime="20170822 17:13:00.856"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:13:00.911" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:13:00.911" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.911" starttime="20170822 17:13:00.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:00.912" starttime="20170822 17:13:00.912"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:13:00.913" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:13:00.913" starttime="20170822 17:13:00.912"></status>
</kw>
<msg timestamp="20170822 17:13:00.913" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:00.913" starttime="20170822 17:13:00.669"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:00.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:13:00.914" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:13:00.914" starttime="20170822 17:13:00.914"></status>
</kw>
<msg timestamp="20170822 17:13:00.914" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:13:00.914" starttime="20170822 17:13:00.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170822 17:13:00.915" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170822 17:13:00.916" starttime="20170822 17:13:00.915"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.916" starttime="20170822 17:13:00.915"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:00.916" starttime="20170822 17:13:00.668"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:00.916" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170822 17:13:00.917" starttime="20170822 17:13:00.916"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:13:00.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:13:00.920" starttime="20170822 17:13:00.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:13:00.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:13:00.920" starttime="20170822 17:13:00.920"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:13:00.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:13:00.921" starttime="20170822 17:13:00.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:13:00.922" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:13:00.922" starttime="20170822 17:13:00.921"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:13:01.119" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:13:01.120" starttime="20170822 17:13:00.923"></status>
</kw>
<msg timestamp="20170822 17:13:01.120" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:01.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:01.120" starttime="20170822 17:13:00.922"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:13:01.121" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:01.121" starttime="20170822 17:13:01.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:01.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:01.121" starttime="20170822 17:13:01.121"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.122" starttime="20170822 17:13:00.918"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.122" starttime="20170822 17:13:00.918"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.122" starttime="20170822 17:13:00.917"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:13:01.122" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170822 17:13:01.122" starttime="20170822 17:13:01.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.123" starttime="20170822 17:13:01.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:13:01.376" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:13:01.376" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:01.376" starttime="20170822 17:13:01.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.377" starttime="20170822 17:13:01.377"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:13:01.378" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:13:01.378" starttime="20170822 17:13:01.377"></status>
</kw>
<msg timestamp="20170822 17:13:01.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:01.378" starttime="20170822 17:13:00.917"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:01.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:01.379" starttime="20170822 17:13:01.379"></status>
</kw>
<msg timestamp="20170822 17:13:01.379" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170822 17:13:01.379" starttime="20170822 17:13:01.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.380" starttime="20170822 17:13:01.379"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170822 17:13:01.381" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170822 17:13:01.381" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170822 17:13:01.381" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170822 17:13:01.381" starttime="20170822 17:13:01.380"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:01.383" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:13:01.382"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:13:01.381"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:13:00.916"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:12:58.463"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:12:58.461"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:12:58.461"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:12:58.461"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:12:58.460"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.383" starttime="20170822 17:12:58.442"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.384" starttime="20170822 17:12:58.439"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.384" starttime="20170822 17:12:58.439"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.386" starttime="20170822 17:13:01.385"></status>
</kw>
<msg timestamp="20170822 17:13:01.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:01.386" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:13:01.386" starttime="20170822 17:13:01.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.386" starttime="20170822 17:13:01.386"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.407" starttime="20170822 17:13:01.405"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170822 17:13:01.409" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170822 17:13:01.409" starttime="20170822 17:13:01.407"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.409" starttime="20170822 17:13:01.404"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.409" starttime="20170822 17:13:01.387"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.409" starttime="20170822 17:13:01.384"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:01.409" starttime="20170822 17:13:01.384"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.411" starttime="20170822 17:13:01.411"></status>
</kw>
<msg timestamp="20170822 17:13:01.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:01.411" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:13:01.411" starttime="20170822 17:13:01.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.412" starttime="20170822 17:13:01.412"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170822 17:13:01.463" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:01.463" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:01.463" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170822 17:13:01.513" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170822 17:13:01.526" level="INFO">${core_files} = None</msg>
<msg timestamp="20170822 17:13:01.526" level="INFO">${stderr} = None</msg>
<msg timestamp="20170822 17:13:01.526" level="INFO">${rc} = None</msg>
<msg timestamp="20170822 17:13:01.527" level="FAIL">#(UTC) 2017/08/22 17:13:01.525490 -    5.376507 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170822 17:13:01.527" starttime="20170822 17:13:01.434"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170822 17:13:01.527" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170822 17:13:01.528" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170822 17:13:01.528" starttime="20170822 17:13:01.527"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:01.541" starttime="20170822 17:13:01.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:02.209" starttime="20170822 17:13:01.542"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.209" starttime="20170822 17:13:01.541"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.209" starttime="20170822 17:13:01.539"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.209" starttime="20170822 17:13:01.528"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170822 17:13:02.209" starttime="20170822 17:13:02.209"></status>
</kw>
<status status="FAIL" endtime="20170822 17:13:02.210" starttime="20170822 17:13:01.433"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.210" starttime="20170822 17:13:01.412"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.210" starttime="20170822 17:13:01.409"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.210" starttime="20170822 17:13:01.409"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:02.212" starttime="20170822 17:13:02.212"></status>
</kw>
<msg timestamp="20170822 17:13:02.212" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:02.212" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:13:02.212" starttime="20170822 17:13:02.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:02.213" starttime="20170822 17:13:02.212"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170822 17:13:02.233" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170822 17:13:02.233" starttime="20170822 17:13:02.232"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170822 17:13:02.234" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170822 17:13:02.234" starttime="20170822 17:13:02.234"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:02.235" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170822 17:13:02.235" starttime="20170822 17:13:02.234"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:02.236" starttime="20170822 17:13:02.236"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:13:02.237" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:13:02.237" starttime="20170822 17:13:02.237"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:13:02.301" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:02.301" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:02.301" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170822 17:13:02.837" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:13:02.837" starttime="20170822 17:13:02.265"></status>
</kw>
<msg timestamp="20170822 17:13:02.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:02.838" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:44 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:44 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170822 17:13:02.838" starttime="20170822 17:13:02.237"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:13:02.839" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:44 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:44 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170822 17:13:02.839" starttime="20170822 17:13:02.839"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:13:02.840" level="INFO">${stderr} = ls: /proc/1294/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170822 17:13:02.840" starttime="20170822 17:13:02.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:02.848" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:02.849" starttime="20170822 17:13:02.848"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.849" starttime="20170822 17:13:02.846"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.849" starttime="20170822 17:13:02.840"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.849" starttime="20170822 17:13:02.235"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.849" starttime="20170822 17:13:02.234"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:02.850" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170822 17:13:02.850" starttime="20170822 17:13:02.849"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:02.851" starttime="20170822 17:13:02.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:13:02.852" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:13:02.852" starttime="20170822 17:13:02.851"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:13:02.913" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:02.913" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:02.914" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170822 17:13:02.984" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:13:02.984" starttime="20170822 17:13:02.877"></status>
</kw>
<msg timestamp="20170822 17:13:02.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:02.984" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170822 17:13:02.984" starttime="20170822 17:13:02.852"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:13:02.985" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170822 17:13:02.985" starttime="20170822 17:13:02.985"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:13:02.986" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:13:02.986" starttime="20170822 17:13:02.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:02.997" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:02.997" starttime="20170822 17:13:02.996"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.997" starttime="20170822 17:13:02.995"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.997" starttime="20170822 17:13:02.987"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.997" starttime="20170822 17:13:02.850"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:02.998" starttime="20170822 17:13:02.849"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:02.998" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170822 17:13:02.998" starttime="20170822 17:13:02.998"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:03.000" starttime="20170822 17:13:02.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:13:03.001" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:13:03.001" starttime="20170822 17:13:03.000"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:13:03.062" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.062" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.063" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170822 17:13:03.111" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:13:03.111" starttime="20170822 17:13:03.027"></status>
</kw>
<msg timestamp="20170822 17:13:03.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:03.111" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          281544 kB\nMemAvailable:     327688 kB\nBuffers:           11284 kB\nCached:            51956 kB\nSwapCached:            0 kB\nActive:            9383...</msg>
<status status="PASS" endtime="20170822 17:13:03.111" starttime="20170822 17:13:03.001"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:13:03.112" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          281544 kB
MemAvailable:     327688 kB
Buffers:           11284 kB
Cached:            51956 kB
SwapCached:            0 kB
Active:            93832 kB
Inac...</msg>
<status status="PASS" endtime="20170822 17:13:03.112" starttime="20170822 17:13:03.112"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:13:03.113" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:13:03.113" starttime="20170822 17:13:03.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:03.120" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:03.120" starttime="20170822 17:13:03.120"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.120" starttime="20170822 17:13:03.119"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.120" starttime="20170822 17:13:03.113"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.121" starttime="20170822 17:13:02.999"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.121" starttime="20170822 17:13:02.998"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:03.121" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170822 17:13:03.121" starttime="20170822 17:13:03.121"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:03.123" starttime="20170822 17:13:03.123"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:13:03.124" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:13:03.124" starttime="20170822 17:13:03.123"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:13:03.183" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.183" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.183" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170822 17:13:03.535" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:13:03.535" starttime="20170822 17:13:03.149"></status>
</kw>
<msg timestamp="20170822 17:13:03.536" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:03.536" level="INFO">${ret_values} = (u'Mem: 150704K used, 281544K free, 14440K shrd, 11284K buff, 51956K cached\nCPU:   7% usr  14% sys   0% nic  78% idle   0% io   0% irq   0% sirq\nLoad average: 5.50 2.94 1.15 1/146 1297\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170822 17:13:03.536" starttime="20170822 17:13:03.124"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:13:03.537" level="INFO">${stdout} = Mem: 150704K used, 281544K free, 14440K shrd, 11284K buff, 51956K cached
CPU:   7% usr  14% sys   0% nic  78% idle   0% io   0% irq   0% sirq
Load average: 5.50 2.94 1.15 1/146 1297
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170822 17:13:03.537" starttime="20170822 17:13:03.536"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:13:03.537" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:13:03.537" starttime="20170822 17:13:03.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:03.545" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:03.545" starttime="20170822 17:13:03.544"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.545" starttime="20170822 17:13:03.544"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.545" starttime="20170822 17:13:03.538"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.545" starttime="20170822 17:13:03.122"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.545" starttime="20170822 17:13:03.121"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:03.546" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170822 17:13:03.546" starttime="20170822 17:13:03.546"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:03.547" starttime="20170822 17:13:03.547"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:13:03.548" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:13:03.548" starttime="20170822 17:13:03.548"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:13:03.609" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.609" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.610" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170822 17:13:03.666" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:13:03.666" starttime="20170822 17:13:03.574"></status>
</kw>
<msg timestamp="20170822 17:13:03.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:03.667" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 22 1...</msg>
<status status="PASS" endtime="20170822 17:13:03.667" starttime="20170822 17:13:03.549"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:13:03.668" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 22 14:06...</msg>
<status status="PASS" endtime="20170822 17:13:03.668" starttime="20170822 17:13:03.667"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:13:03.668" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:13:03.668" starttime="20170822 17:13:03.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:03.676" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:03.676" starttime="20170822 17:13:03.675"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.676" starttime="20170822 17:13:03.675"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.676" starttime="20170822 17:13:03.669"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.676" starttime="20170822 17:13:03.546"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:03.676" starttime="20170822 17:13:03.545"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170822 17:13:03.677" level="INFO">${logpath} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170822 17:13:03.677" starttime="20170822 17:13:03.677"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:03.679" starttime="20170822 17:13:03.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170822 17:13:03.679" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170822 17:13:03.679" starttime="20170822 17:13:03.679"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170822 17:13:03.741" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.741" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170822 17:13:03.742" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170822 17:13:04.962" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170822 17:13:04.962" starttime="20170822 17:13:03.706"></status>
</kw>
<msg timestamp="20170822 17:13:04.962" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:04.964" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:43:00 UTC, end at Thu 2017-08-03 15:45:21 UTC. --\nAug 03 15:43:00 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:43:00 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170822 17:13:04.964" starttime="20170822 17:13:03.680"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170822 17:13:04.965" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:43:00 UTC, end at Thu 2017-08-03 15:45:21 UTC. --
Aug 03 15:43:00 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:43:00 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170822 17:13:04.965" starttime="20170822 17:13:04.964"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170822 17:13:04.966" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170822 17:13:04.966" starttime="20170822 17:13:04.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170822 17:13:04.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/20170822171255971244_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:04.973"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:04.972"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:04.966"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:03.677"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:03.676"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:02.234"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:02.233"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:02.233"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:02.233"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.974" starttime="20170822 17:13:02.232"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.975" starttime="20170822 17:13:02.213"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.975" starttime="20170822 17:13:02.210"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:04.975" starttime="20170822 17:13:02.210"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:04.977" starttime="20170822 17:13:04.976"></status>
</kw>
<msg timestamp="20170822 17:13:04.977" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:04.977" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:13:04.977" starttime="20170822 17:13:04.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:04.977" starttime="20170822 17:13:04.977"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170822 17:13:04.999" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170822 17:13:05.000" starttime="20170822 17:13:04.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170822 17:13:05.001" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170822 17:13:05.001" starttime="20170822 17:13:05.000"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170822 17:13:05.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170822 17:13:05.002" starttime="20170822 17:13:05.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170822 17:13:05.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170822 17:13:05.003" starttime="20170822 17:13:05.002"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170822 17:13:05.241" starttime="20170822 17:13:05.006"></status>
</kw>
<msg timestamp="20170822 17:13:05.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:05.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:05.242" starttime="20170822 17:13:05.003"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.242" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:05.242" starttime="20170822 17:13:05.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170822 17:13:05.243" starttime="20170822 17:13:05.243"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.243" starttime="20170822 17:13:04.998"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.243" starttime="20170822 17:13:04.997"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.243" starttime="20170822 17:13:04.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170822 17:13:05.244" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170822 17:13:05.244" starttime="20170822 17:13:05.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.245" starttime="20170822 17:13:05.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170822 17:13:05.288" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170822 17:13:05.288" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:05.288" starttime="20170822 17:13:05.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.289" starttime="20170822 17:13:05.289"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170822 17:13:05.289" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170822 17:13:05.289" starttime="20170822 17:13:05.289"></status>
</kw>
<msg timestamp="20170822 17:13:05.290" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170822 17:13:05.290" starttime="20170822 17:13:04.996"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170822 17:13:05.291" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170822 17:13:05.291" starttime="20170822 17:13:05.291"></status>
</kw>
<msg timestamp="20170822 17:13:05.291" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170822 17:13:05.291" starttime="20170822 17:13:05.290"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170822 17:13:05.292" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170822 17:13:05.292" starttime="20170822 17:13:05.292"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.292" starttime="20170822 17:13:04.996"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.292" starttime="20170822 17:13:04.978"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.292" starttime="20170822 17:13:04.975"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.292" starttime="20170822 17:13:04.975"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.294" starttime="20170822 17:13:05.294"></status>
</kw>
<msg timestamp="20170822 17:13:05.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170822 17:13:05.294" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170822 17:13:05.294" starttime="20170822 17:13:05.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.295" starttime="20170822 17:13:05.295"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170822 17:13:05.315" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170822 17:13:05.315" starttime="20170822 17:13:05.314"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.315" starttime="20170822 17:13:05.313"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.316" starttime="20170822 17:13:05.295"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.316" starttime="20170822 17:13:05.293"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.316" starttime="20170822 17:13:05.292"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.316" starttime="20170822 17:12:56.177"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.316" starttime="20170822 17:12:56.174"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.316" starttime="20170822 17:12:56.174"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.316" starttime="20170822 17:12:56.174"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170822 17:13:05.326" starttime="20170822 17:13:05.326"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.326" starttime="20170822 17:13:05.316"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.326" starttime="20170822 17:12:56.173"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.327" starttime="20170822 17:12:52.931"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.327" starttime="20170822 17:12:52.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.327" starttime="20170822 17:13:05.327"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170822 17:13:05.330" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170822 17:13:05.330" starttime="20170822 17:13:05.330"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170822 17:13:05.331" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170822171255971244_UpdateBmc/20170822171255971244_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170822 17:13:05.331" starttime="20170822 17:13:05.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.331" starttime="20170822 17:13:05.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.332" starttime="20170822 17:13:05.332"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.333" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170822 17:13:05.333" starttime="20170822 17:13:05.332"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.334" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170822 17:13:05.334" starttime="20170822 17:13:05.334"></status>
</kw>
<msg timestamp="20170822 17:13:05.334" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170822 17:13:05.334" starttime="20170822 17:13:05.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.335" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:05.336" starttime="20170822 17:13:05.335"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.336" starttime="20170822 17:13:05.334"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170822 17:13:05.336" starttime="20170822 17:13:05.336"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170822 17:13:05.337" level="INFO">${cur_time} = 2017-08-22 17:13:05:337191</msg>
<status status="PASS" endtime="20170822 17:13:05.337" starttime="20170822 17:13:05.337"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170822 17:13:05.338" level="INFO">${cur_time} = 20170822171305337191</msg>
<status status="PASS" endtime="20170822 17:13:05.338" starttime="20170822 17:13:05.338"></status>
</kw>
<msg timestamp="20170822 17:13:05.338" level="INFO">${cur_time} = 20170822171305337191</msg>
<status status="PASS" endtime="20170822 17:13:05.338" starttime="20170822 17:13:05.336"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170822 17:13:05.339" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:13:05.339" starttime="20170822 17:13:05.339"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.339" starttime="20170822 17:13:05.328"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.339" starttime="20170822 17:12:52.615"></status>
</kw>
<status status="PASS" endtime="20170822 17:13:05.339" starttime="20170822 17:12:52.606"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170822 17:13:05.340" critical="yes" starttime="20170822 17:03:15.962">#(UTC) 2017/08/22 17:12:52.598288 -    1.578855 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170822 17:13:05.340" starttime="20170822 17:03:14.879"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170822 17:04:14.817" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80385610&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170822 17:04:18.017" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80385750&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170822 17:04:21.217" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80385890&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
</errors>
</robot>
