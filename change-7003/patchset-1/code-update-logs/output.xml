<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170929 04:15:54.167" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:15:55.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:15:55.158" starttime="20170929 04:15:55.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:15:55.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:15:55.160" starttime="20170929 04:15:55.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:15:55.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:15:55.160" starttime="20170929 04:15:55.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:15:55.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:15:55.161" starttime="20170929 04:15:55.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:15:55.383" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:15:55.383" starttime="20170929 04:15:55.162"></status>
</kw>
<msg timestamp="20170929 04:15:55.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:15:55.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:15:55.384" starttime="20170929 04:15:55.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:15:55.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:15:55.384" starttime="20170929 04:15:55.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:15:55.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:15:55.385" starttime="20170929 04:15:55.385"></status>
</kw>
<status status="PASS" endtime="20170929 04:15:55.385" starttime="20170929 04:15:55.154"></status>
</kw>
<status status="PASS" endtime="20170929 04:15:55.385" starttime="20170929 04:15:55.153"></status>
</kw>
<status status="PASS" endtime="20170929 04:15:55.386" starttime="20170929 04:15:55.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:15:55.386" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 04:15:55.386" starttime="20170929 04:15:55.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:15:55.387" starttime="20170929 04:15:55.387"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:15:55.441" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 04:15:55.441" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:15:55.441" starttime="20170929 04:15:55.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:15:55.442" starttime="20170929 04:15:55.442"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:15:55.443" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:15:55.443" starttime="20170929 04:15:55.442"></status>
</kw>
<msg timestamp="20170929 04:15:55.443" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:15:55.443" starttime="20170929 04:15:55.151"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:15:55.444" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:15:55.444" starttime="20170929 04:15:55.443"></status>
</kw>
<status status="PASS" endtime="20170929 04:15:55.444" starttime="20170929 04:15:55.150"></status>
</kw>
<status status="PASS" endtime="20170929 04:15:55.444" starttime="20170929 04:15:55.149"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170929 04:15:55.445" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170929 04:15:55.445" starttime="20170929 04:15:55.445"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170929 04:15:55.506" level="INFO">${image_version} = v1.99.10-68-g2c6bf36</msg>
<status status="PASS" endtime="20170929 04:15:55.506" starttime="20170929 04:15:55.446"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170929 04:15:55.507" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170929 04:16:06.585" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170929 04:16:06.585" starttime="20170929 04:15:55.506"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:06.589" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:06.589" starttime="20170929 04:16:06.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:06.590" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:06.590" starttime="20170929 04:16:06.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:06.590" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:06.590" starttime="20170929 04:16:06.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:06.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:06.591" starttime="20170929 04:16:06.591"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:06.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:06.788" starttime="20170929 04:16:06.592"></status>
</kw>
<msg timestamp="20170929 04:16:06.788" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:06.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:06.788" starttime="20170929 04:16:06.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:06.789" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:06.789" starttime="20170929 04:16:06.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:06.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:06.789" starttime="20170929 04:16:06.789"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:06.790" starttime="20170929 04:16:06.588"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:06.790" starttime="20170929 04:16:06.587"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:06.790" starttime="20170929 04:16:06.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:06.790" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170929 04:16:06.790" starttime="20170929 04:16:06.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:06.791" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170929 04:16:06.791" starttime="20170929 04:16:06.791"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:06.792" starttime="20170929 04:16:06.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:06.792" starttime="20170929 04:16:06.792"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:16.820" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170929 04:16:16.820" starttime="20170929 04:16:06.793"></status>
</kw>
<status status="FAIL" endtime="20170929 04:16:16.821" starttime="20170929 04:16:06.586"></status>
</kw>
<status status="FAIL" endtime="20170929 04:16:16.821" starttime="20170929 04:15:55.444"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170929 04:16:16.835" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170929 04:16:16.835" starttime="20170929 04:16:16.834"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170929 04:16:16.839" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170929 04:16:19.843" level="INFO">${RC} = 0</msg>
<msg timestamp="20170929 04:16:19.843" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.22 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170929 04:16:19.843" starttime="20170929 04:16:16.835"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.847" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.22 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.606 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.597 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.597/0.759/1.221/0.266 ms</msg>
<status status="PASS" endtime="20170929 04:16:19.847" starttime="20170929 04:16:19.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:19.848" starttime="20170929 04:16:19.848"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.848" starttime="20170929 04:16:16.834"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:16:19.861" level="INFO">${cur_time} = 2017-09-29 04:16:19:861316</msg>
<status status="PASS" endtime="20170929 04:16:19.862" starttime="20170929 04:16:19.861"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:16:19.862" level="INFO">${cur_time} = 20170929041619861316</msg>
<status status="PASS" endtime="20170929 04:16:19.862" starttime="20170929 04:16:19.862"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.862" starttime="20170929 04:16:19.860"></status>
</kw>
<msg timestamp="20170929 04:16:19.869" level="INFO">${FFDC_TIME} = 20170929041619861316</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 04:16:19.870" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:16:19.870" starttime="20170929 04:16:19.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 04:16:19.871" level="INFO">${suite_name} = 20170929041619861316_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:16:19.871" starttime="20170929 04:16:19.870"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 04:16:19.871" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:16:19.871" starttime="20170929 04:16:19.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 04:16:19.872" level="INFO">${test_name} = 20170929041619861316_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:16:19.872" starttime="20170929 04:16:19.871"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.872" starttime="20170929 04:16:19.869"></status>
</kw>
<msg timestamp="20170929 04:16:19.878" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170929 04:16:19.883" level="INFO">${FFDC_PREFIX} = 20170929041619861316_</msg>
<msg timestamp="20170929 04:16:19.903" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170929 04:16:19.905" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.905" starttime="20170929 04:16:19.904"></status>
</kw>
<msg timestamp="20170929 04:16:19.910" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.921" starttime="20170929 04:16:19.920"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.921" starttime="20170929 04:16:19.919"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.922" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.922" starttime="20170929 04:16:19.922"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.922" starttime="20170929 04:16:19.921"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.923" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.923" starttime="20170929 04:16:19.923"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.924" starttime="20170929 04:16:19.922"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.925" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.925" starttime="20170929 04:16:19.925"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.925" starttime="20170929 04:16:19.924"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.926" starttime="20170929 04:16:19.926"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.926" starttime="20170929 04:16:19.925"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.928" starttime="20170929 04:16:19.927"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.928" starttime="20170929 04:16:19.927"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.929" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.929" starttime="20170929 04:16:19.929"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.929" starttime="20170929 04:16:19.928"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.931" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.931" starttime="20170929 04:16:19.930"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.931" starttime="20170929 04:16:19.929"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.932" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.932" starttime="20170929 04:16:19.932"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.932" starttime="20170929 04:16:19.931"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.934" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.934" starttime="20170929 04:16:19.933"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.934" starttime="20170929 04:16:19.933"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.935" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.935" starttime="20170929 04:16:19.935"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.935" starttime="20170929 04:16:19.934"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.936" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.937" starttime="20170929 04:16:19.936"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.937" starttime="20170929 04:16:19.935"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:19.938" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:19.938" starttime="20170929 04:16:19.937"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:19.938" starttime="20170929 04:16:19.937"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 04:16:19.956" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:19.957" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170929 04:16:20.750" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170929 04:16:20.751" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170929 04:16:20.838" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170929 04:16:20.847" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170929 04:16:20.847" level="INFO">${stderr} = </msg>
<msg timestamp="20170929 04:16:20.847" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170929 04:16:20.847" starttime="20170929 04:16:19.939"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.848" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170929 04:16:20.848" starttime="20170929 04:16:20.848"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.849" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170929 04:16:20.849" starttime="20170929 04:16:20.848"></status>
</kw>
<msg timestamp="20170929 04:16:20.849" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170929 04:16:20.849" starttime="20170929 04:16:19.938"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.850" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.850" starttime="20170929 04:16:20.850"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.850" starttime="20170929 04:16:20.849"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.851" starttime="20170929 04:16:19.932"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.852" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.852" starttime="20170929 04:16:20.851"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.852" starttime="20170929 04:16:20.851"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:16:20.853" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 04:16:20.853" starttime="20170929 04:16:20.852"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.854" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.854" starttime="20170929 04:16:20.854"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.854" starttime="20170929 04:16:20.853"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.855" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.855" starttime="20170929 04:16:20.855"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.856" starttime="20170929 04:16:20.854"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.856" starttime="20170929 04:16:20.853"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.857" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.857" starttime="20170929 04:16:20.857"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.857" starttime="20170929 04:16:20.856"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.859" starttime="20170929 04:16:20.858"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.859" starttime="20170929 04:16:20.858"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.859" starttime="20170929 04:16:20.856"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.860" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.860" starttime="20170929 04:16:20.860"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.860" starttime="20170929 04:16:20.859"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.861" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.861" starttime="20170929 04:16:20.861"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.861" starttime="20170929 04:16:20.860"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.861" starttime="20170929 04:16:20.859"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.861" starttime="20170929 04:16:20.853"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.863" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.863" starttime="20170929 04:16:20.862"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.863" starttime="20170929 04:16:20.862"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.863" starttime="20170929 04:16:19.919"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:16:20.869" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170929 04:16:20.869" starttime="20170929 04:16:20.868"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170929 04:16:20.870" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170929 04:16:20.870" starttime="20170929 04:16:20.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:20.872" starttime="20170929 04:16:20.871"></status>
</kw>
<msg timestamp="20170929 04:16:20.872" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170929 04:16:20.872" starttime="20170929 04:16:20.871"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:20.874" starttime="20170929 04:16:20.874"></status>
</kw>
<msg timestamp="20170929 04:16:20.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:20.874" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:16:20.874" starttime="20170929 04:16:20.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:20.875" starttime="20170929 04:16:20.875"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:16:20.890" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 04:16:20.890" starttime="20170929 04:16:20.890"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:16:20.892" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170929 04:16:20.892" starttime="20170929 04:16:20.891"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.898" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170929 04:16:20.898" starttime="20170929 04:16:20.892"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.901" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.902" starttime="20170929 04:16:20.901"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.902" starttime="20170929 04:16:20.900"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.903" starttime="20170929 04:16:20.903"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.903" starttime="20170929 04:16:20.902"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.904" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.904" starttime="20170929 04:16:20.904"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.905" starttime="20170929 04:16:20.903"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:20.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:20.906" starttime="20170929 04:16:20.905"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.906" starttime="20170929 04:16:20.905"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.906" starttime="20170929 04:16:20.900"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:20.906" starttime="20170929 04:16:20.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:20.907" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:20.907" starttime="20170929 04:16:20.906"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:20.950" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:20.951" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170929 04:16:22.298" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:22.298" starttime="20170929 04:16:20.927"></status>
</kw>
<msg timestamp="20170929 04:16:22.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:22.298" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170929 04:16:22.298" starttime="20170929 04:16:20.907"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:22.299" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170929 04:16:22.299" starttime="20170929 04:16:22.299"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:22.300" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:22.300" starttime="20170929 04:16:22.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.307" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.307" starttime="20170929 04:16:22.307"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.307" starttime="20170929 04:16:22.306"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.307" starttime="20170929 04:16:22.300"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.308" starttime="20170929 04:16:20.898"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.308" starttime="20170929 04:16:20.898"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.308" starttime="20170929 04:16:20.898"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.308" starttime="20170929 04:16:20.891"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.308" starttime="20170929 04:16:20.891"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:16:22.309" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170929 04:16:22.309" starttime="20170929 04:16:22.309"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.310" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170929 04:16:22.310" starttime="20170929 04:16:22.309"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.313" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.313" starttime="20170929 04:16:22.313"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.313" starttime="20170929 04:16:22.312"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.314" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.315" starttime="20170929 04:16:22.314"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.315" starttime="20170929 04:16:22.313"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.316" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.316" starttime="20170929 04:16:22.315"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.316" starttime="20170929 04:16:22.315"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.317" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.317" starttime="20170929 04:16:22.317"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.318" starttime="20170929 04:16:22.316"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.318" starttime="20170929 04:16:22.312"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.318" starttime="20170929 04:16:22.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:22.319" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:22.319" starttime="20170929 04:16:22.318"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:22.359" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:22.359" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170929 04:16:22.458" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:22.458" starttime="20170929 04:16:22.336"></status>
</kw>
<msg timestamp="20170929 04:16:22.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:22.459" level="INFO">${ret_values} = (u'20170929022641', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:16:22.459" starttime="20170929 04:16:22.319"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:22.459" level="INFO">${stdout} = 20170929022641</msg>
<status status="PASS" endtime="20170929 04:16:22.459" starttime="20170929 04:16:22.459"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:22.460" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:22.460" starttime="20170929 04:16:22.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.468" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.468" starttime="20170929 04:16:22.467"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.468" starttime="20170929 04:16:22.466"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.468" starttime="20170929 04:16:22.460"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.468" starttime="20170929 04:16:22.310"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.468" starttime="20170929 04:16:22.310"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.471" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.471" starttime="20170929 04:16:22.471"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.471" starttime="20170929 04:16:22.470"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.472" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.473" starttime="20170929 04:16:22.472"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.473" starttime="20170929 04:16:22.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.474" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.474" starttime="20170929 04:16:22.473"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.474" starttime="20170929 04:16:22.473"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.475" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.475" starttime="20170929 04:16:22.475"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.475" starttime="20170929 04:16:22.474"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.475" starttime="20170929 04:16:22.470"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.476" starttime="20170929 04:16:22.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:22.476" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:22.476" starttime="20170929 04:16:22.476"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:22.517" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:22.518" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170929 04:16:22.585" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:22.585" starttime="20170929 04:16:22.495"></status>
</kw>
<msg timestamp="20170929 04:16:22.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:22.585" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-68"\nVERSION_ID="v1.99.10-68-gbd83a3d"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170929 04:16:22.585" starttime="20170929 04:16:22.477"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:22.586" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-68"
VERSION_ID="v1.99.10-68-gbd83a3d"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170929 04:16:22.586" starttime="20170929 04:16:22.585"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:22.586" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:22.586" starttime="20170929 04:16:22.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.594" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.593"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.593"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.587"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.468"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.468"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.310"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.308"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.594" starttime="20170929 04:16:22.308"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:16:22.596" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170929 04:16:22.596" starttime="20170929 04:16:22.595"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.596" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170929 04:16:22.596" starttime="20170929 04:16:22.596"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.600" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.600" starttime="20170929 04:16:22.599"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.600" starttime="20170929 04:16:22.599"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.601" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.601" starttime="20170929 04:16:22.601"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.601" starttime="20170929 04:16:22.600"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.603" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.603" starttime="20170929 04:16:22.602"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.603" starttime="20170929 04:16:22.602"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.604" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.604" starttime="20170929 04:16:22.604"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.604" starttime="20170929 04:16:22.603"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.604" starttime="20170929 04:16:22.598"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.604" starttime="20170929 04:16:22.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:22.605" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:22.605" starttime="20170929 04:16:22.605"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:22.646" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:22.646" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170929 04:16:22.713" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:22.713" starttime="20170929 04:16:22.623"></status>
</kw>
<msg timestamp="20170929 04:16:22.713" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:22.713" level="INFO">${ret_values} = (u' 04:16:37 up  1:19,  load average: 0.35, 0.33, 0.29', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:16:22.713" starttime="20170929 04:16:22.605"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:22.714" level="INFO">${stdout} =  04:16:37 up  1:19,  load average: 0.35, 0.33, 0.29</msg>
<status status="PASS" endtime="20170929 04:16:22.714" starttime="20170929 04:16:22.714"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:22.715" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:22.715" starttime="20170929 04:16:22.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.722" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.722" starttime="20170929 04:16:22.722"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.722" starttime="20170929 04:16:22.721"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.722" starttime="20170929 04:16:22.715"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.723" starttime="20170929 04:16:22.597"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.723" starttime="20170929 04:16:22.597"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.726" starttime="20170929 04:16:22.725"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.726" starttime="20170929 04:16:22.725"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.727" starttime="20170929 04:16:22.727"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.727" starttime="20170929 04:16:22.726"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.728" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.729" starttime="20170929 04:16:22.728"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.729" starttime="20170929 04:16:22.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.730" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.730" starttime="20170929 04:16:22.729"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.730" starttime="20170929 04:16:22.729"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.730" starttime="20170929 04:16:22.724"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.730" starttime="20170929 04:16:22.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:22.731" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:22.731" starttime="20170929 04:16:22.730"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:22.772" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:22.772" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170929 04:16:22.839" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:22.839" starttime="20170929 04:16:22.749"></status>
</kw>
<msg timestamp="20170929 04:16:22.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:22.839" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170929 04:16:22.839" starttime="20170929 04:16:22.731"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:22.840" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170929 04:16:22.840" starttime="20170929 04:16:22.840"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:22.841" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:22.841" starttime="20170929 04:16:22.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.848" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.848" starttime="20170929 04:16:22.848"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.848" starttime="20170929 04:16:22.847"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.848" starttime="20170929 04:16:22.841"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.849" starttime="20170929 04:16:22.723"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.849" starttime="20170929 04:16:22.723"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.852" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.852" starttime="20170929 04:16:22.851"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.852" starttime="20170929 04:16:22.851"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.853" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.853" starttime="20170929 04:16:22.853"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.853" starttime="20170929 04:16:22.852"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.854" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.855" starttime="20170929 04:16:22.854"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.855" starttime="20170929 04:16:22.853"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.856" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.856" starttime="20170929 04:16:22.855"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.856" starttime="20170929 04:16:22.855"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.856" starttime="20170929 04:16:22.850"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.856" starttime="20170929 04:16:22.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:22.857" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:22.857" starttime="20170929 04:16:22.856"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:22.898" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:22.900" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170929 04:16:22.946" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:22.947" starttime="20170929 04:16:22.875"></status>
</kw>
<msg timestamp="20170929 04:16:22.947" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:22.947" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:16:22.947" starttime="20170929 04:16:22.857"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:22.948" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170929 04:16:22.948" starttime="20170929 04:16:22.947"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:22.948" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:22.948" starttime="20170929 04:16:22.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:22.956" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:22.956" starttime="20170929 04:16:22.956"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.956" starttime="20170929 04:16:22.955"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.956" starttime="20170929 04:16:22.949"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:22.849"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:22.849"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:22.597"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:22.595"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:22.595"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:20.890"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:20.889"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:20.875"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:20.872"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:22.957" starttime="20170929 04:16:20.872"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:22.959" starttime="20170929 04:16:22.959"></status>
</kw>
<msg timestamp="20170929 04:16:22.959" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:22.959" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:16:22.959" starttime="20170929 04:16:22.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:22.960" starttime="20170929 04:16:22.960"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:16:22.975" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170929 04:16:22.975" starttime="20170929 04:16:22.974"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:16:22.976" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170929 04:16:22.976" starttime="20170929 04:16:22.976"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:22.977" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170929 04:16:22.977" starttime="20170929 04:16:22.977"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:22.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:22.981" starttime="20170929 04:16:22.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:22.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:22.982" starttime="20170929 04:16:22.981"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:22.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:22.982" starttime="20170929 04:16:22.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:22.983" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:22.983" starttime="20170929 04:16:22.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.177" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:23.178" starttime="20170929 04:16:22.984"></status>
</kw>
<msg timestamp="20170929 04:16:23.178" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:23.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.178" starttime="20170929 04:16:22.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.179" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.179" starttime="20170929 04:16:23.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.179" starttime="20170929 04:16:23.179"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.180" starttime="20170929 04:16:22.979"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.180" starttime="20170929 04:16:22.979"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.180" starttime="20170929 04:16:22.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:23.180" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170929 04:16:23.180" starttime="20170929 04:16:23.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:23.181" starttime="20170929 04:16:23.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:23.726" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:23.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.726" starttime="20170929 04:16:23.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:23.727" starttime="20170929 04:16:23.727"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:23.727" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:23.727" starttime="20170929 04:16:23.727"></status>
</kw>
<msg timestamp="20170929 04:16:23.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.728" starttime="20170929 04:16:22.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.729" starttime="20170929 04:16:23.728"></status>
</kw>
<msg timestamp="20170929 04:16:23.729" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:16:23.729" starttime="20170929 04:16:23.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:23.730" starttime="20170929 04:16:23.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:16:23.731" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27380
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 208000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:16:23.731" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:16:23.731" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170929 04:16:23.731" starttime="20170929 04:16:23.730"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.733" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:23.733" starttime="20170929 04:16:23.733"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.733" starttime="20170929 04:16:23.732"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.733" starttime="20170929 04:16:22.976"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:23.734" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_OCC_state.txt</msg>
<status status="PASS" endtime="20170929 04:16:23.734" starttime="20170929 04:16:23.734"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:23.737" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:23.737" starttime="20170929 04:16:23.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:23.738" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:23.738" starttime="20170929 04:16:23.738"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:23.739" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:23.739" starttime="20170929 04:16:23.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:23.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:23.739" starttime="20170929 04:16:23.739"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.918" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:23.919" starttime="20170929 04:16:23.740"></status>
</kw>
<msg timestamp="20170929 04:16:23.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:23.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.919" starttime="20170929 04:16:23.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.920" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.920" starttime="20170929 04:16:23.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:23.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:23.920" starttime="20170929 04:16:23.920"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.921" starttime="20170929 04:16:23.736"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.921" starttime="20170929 04:16:23.736"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:23.921" starttime="20170929 04:16:23.735"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:23.921" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170929 04:16:23.921" starttime="20170929 04:16:23.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:23.922" starttime="20170929 04:16:23.922"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:24.068" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:24.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.068" starttime="20170929 04:16:23.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:24.069" starttime="20170929 04:16:24.068"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:24.069" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:24.069" starttime="20170929 04:16:24.069"></status>
</kw>
<msg timestamp="20170929 04:16:24.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.070" starttime="20170929 04:16:23.734"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.071" starttime="20170929 04:16:24.070"></status>
</kw>
<msg timestamp="20170929 04:16:24.071" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:16:24.071" starttime="20170929 04:16:24.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:24.071" starttime="20170929 04:16:24.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:16:24.072" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:16:24.072" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:16:24.072" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170929 04:16:24.072" starttime="20170929 04:16:24.072"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_OCC_state.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:24.074" starttime="20170929 04:16:24.073"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.074" starttime="20170929 04:16:24.073"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.074" starttime="20170929 04:16:23.733"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:24.075" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170929 04:16:24.075" starttime="20170929 04:16:24.074"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:24.078" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:24.078" starttime="20170929 04:16:24.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:24.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:24.079" starttime="20170929 04:16:24.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:24.079" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:24.080" starttime="20170929 04:16:24.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:24.080" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:24.080" starttime="20170929 04:16:24.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:24.262" starttime="20170929 04:16:24.081"></status>
</kw>
<msg timestamp="20170929 04:16:24.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:24.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.262" starttime="20170929 04:16:24.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.263" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.263" starttime="20170929 04:16:24.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.264" starttime="20170929 04:16:24.263"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.264" starttime="20170929 04:16:24.077"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.264" starttime="20170929 04:16:24.076"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.264" starttime="20170929 04:16:24.076"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:24.265" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170929 04:16:24.265" starttime="20170929 04:16:24.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:24.265" starttime="20170929 04:16:24.265"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:24.537" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:24.537" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.537" starttime="20170929 04:16:24.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:24.538" starttime="20170929 04:16:24.538"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:24.539" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:24.539" starttime="20170929 04:16:24.539"></status>
</kw>
<msg timestamp="20170929 04:16:24.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.539" starttime="20170929 04:16:24.075"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.540" starttime="20170929 04:16:24.540"></status>
</kw>
<msg timestamp="20170929 04:16:24.540" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:16:24.540" starttime="20170929 04:16:24.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:24.541" starttime="20170929 04:16:24.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:16:24.542" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:16:24.542" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:16:24.542" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170929 04:16:24.542" starttime="20170929 04:16:24.541"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:24.544" starttime="20170929 04:16:24.543"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.544" starttime="20170929 04:16:24.542"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.544" starttime="20170929 04:16:24.074"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:24.545" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_led.txt</msg>
<status status="PASS" endtime="20170929 04:16:24.545" starttime="20170929 04:16:24.544"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:24.548" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:24.548" starttime="20170929 04:16:24.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:24.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:24.549" starttime="20170929 04:16:24.549"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:24.550" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:24.550" starttime="20170929 04:16:24.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:24.551" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:24.551" starttime="20170929 04:16:24.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:24.798" starttime="20170929 04:16:24.553"></status>
</kw>
<msg timestamp="20170929 04:16:24.798" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:24.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.798" starttime="20170929 04:16:24.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.799" starttime="20170929 04:16:24.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:24.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:24.800" starttime="20170929 04:16:24.799"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.800" starttime="20170929 04:16:24.547"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.800" starttime="20170929 04:16:24.546"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:24.800" starttime="20170929 04:16:24.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:24.801" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170929 04:16:24.801" starttime="20170929 04:16:24.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:24.801" starttime="20170929 04:16:24.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:26.403" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:26.404" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:26.404" starttime="20170929 04:16:24.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:26.405" starttime="20170929 04:16:26.404"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:26.405" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:26.405" starttime="20170929 04:16:26.405"></status>
</kw>
<msg timestamp="20170929 04:16:26.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:26.405" starttime="20170929 04:16:24.545"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:26.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:26.407" starttime="20170929 04:16:26.406"></status>
</kw>
<msg timestamp="20170929 04:16:26.407" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:16:26.407" starttime="20170929 04:16:26.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:26.407" starttime="20170929 04:16:26.407"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:16:26.410" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:16:26.410" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:16:26.410" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170929 04:16:26.410" starttime="20170929 04:16:26.408"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:26.412" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_led.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:26.412" starttime="20170929 04:16:26.411"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:26.412" starttime="20170929 04:16:26.410"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:26.412" starttime="20170929 04:16:24.544"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:26.413" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170929 04:16:26.413" starttime="20170929 04:16:26.412"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:26.416" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:26.416" starttime="20170929 04:16:26.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:26.417" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:26.417" starttime="20170929 04:16:26.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:26.418" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:26.418" starttime="20170929 04:16:26.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:26.418" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:26.418" starttime="20170929 04:16:26.418"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:26.610" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:26.610" starttime="20170929 04:16:26.419"></status>
</kw>
<msg timestamp="20170929 04:16:26.610" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:26.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:26.610" starttime="20170929 04:16:26.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:26.611" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:26.611" starttime="20170929 04:16:26.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:26.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:26.612" starttime="20170929 04:16:26.611"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:26.612" starttime="20170929 04:16:26.415"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:26.612" starttime="20170929 04:16:26.414"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:26.612" starttime="20170929 04:16:26.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:26.613" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170929 04:16:26.613" starttime="20170929 04:16:26.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:26.614" starttime="20170929 04:16:26.613"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:27.001" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:27.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.001" starttime="20170929 04:16:26.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:27.002" starttime="20170929 04:16:27.002"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:27.003" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:27.003" starttime="20170929 04:16:27.002"></status>
</kw>
<msg timestamp="20170929 04:16:27.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.003" starttime="20170929 04:16:26.413"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.004" starttime="20170929 04:16:27.004"></status>
</kw>
<msg timestamp="20170929 04:16:27.004" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:16:27.004" starttime="20170929 04:16:27.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:27.005" starttime="20170929 04:16:27.005"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:16:27.006" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/1b14e18e": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-68-g57af142", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/1b14e18e/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/1b14e18e/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-68-gbd83a3d", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/1b14e18e", 
        "/xyz/openbmc_project/software/3330203c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/3330203c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:16:27.006" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:16:27.006" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/1b14e18e": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20170929 04:16:27.006" starttime="20170929 04:16:27.005"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.008" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:27.008" starttime="20170929 04:16:27.007"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.008" starttime="20170929 04:16:27.007"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.008" starttime="20170929 04:16:26.412"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:27.009" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_elog.txt</msg>
<status status="PASS" endtime="20170929 04:16:27.009" starttime="20170929 04:16:27.009"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:27.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:27.013" starttime="20170929 04:16:27.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:27.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:27.013" starttime="20170929 04:16:27.013"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:27.014" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:27.014" starttime="20170929 04:16:27.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:27.015" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:27.015" starttime="20170929 04:16:27.014"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.237" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:27.237" starttime="20170929 04:16:27.016"></status>
</kw>
<msg timestamp="20170929 04:16:27.238" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:27.238" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.238" starttime="20170929 04:16:27.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.238" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.238" starttime="20170929 04:16:27.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.239" starttime="20170929 04:16:27.239"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.239" starttime="20170929 04:16:27.011"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.239" starttime="20170929 04:16:27.011"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.239" starttime="20170929 04:16:27.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:27.240" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170929 04:16:27.240" starttime="20170929 04:16:27.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:27.241" starttime="20170929 04:16:27.240"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:27.293" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:27.293" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.294" starttime="20170929 04:16:27.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:27.294" starttime="20170929 04:16:27.294"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:27.295" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:27.295" starttime="20170929 04:16:27.295"></status>
</kw>
<msg timestamp="20170929 04:16:27.295" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.295" starttime="20170929 04:16:27.009"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 04:16:27.296" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 04:16:27.297" starttime="20170929 04:16:27.296"></status>
</kw>
<msg timestamp="20170929 04:16:27.297" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 04:16:27.297" starttime="20170929 04:16:27.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170929 04:16:27.298" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170929 04:16:27.298" starttime="20170929 04:16:27.298"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.298" starttime="20170929 04:16:27.297"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.298" starttime="20170929 04:16:27.008"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:27.299" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170929 04:16:27.299" starttime="20170929 04:16:27.298"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:27.302" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:27.304" starttime="20170929 04:16:27.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:27.305" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:27.305" starttime="20170929 04:16:27.305"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:27.306" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:27.306" starttime="20170929 04:16:27.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:27.307" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:27.307" starttime="20170929 04:16:27.306"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:27.509" starttime="20170929 04:16:27.308"></status>
</kw>
<msg timestamp="20170929 04:16:27.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:27.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.509" starttime="20170929 04:16:27.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.510" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.510" starttime="20170929 04:16:27.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:27.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:27.511" starttime="20170929 04:16:27.510"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.511" starttime="20170929 04:16:27.301"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.511" starttime="20170929 04:16:27.301"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:27.511" starttime="20170929 04:16:27.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:27.511" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170929 04:16:27.512" starttime="20170929 04:16:27.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:27.512" starttime="20170929 04:16:27.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:29.755" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:29.755" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:29.755" starttime="20170929 04:16:27.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.756" starttime="20170929 04:16:29.756"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:29.756" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:29.757" starttime="20170929 04:16:29.756"></status>
</kw>
<msg timestamp="20170929 04:16:29.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:29.757" starttime="20170929 04:16:27.299"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:29.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:29.758" starttime="20170929 04:16:29.758"></status>
</kw>
<msg timestamp="20170929 04:16:29.758" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:16:29.758" starttime="20170929 04:16:29.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.759" starttime="20170929 04:16:29.759"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:16:29.764" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/1b14e18e", 
        "/xyz/openbmc_project/software/3330203c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:16:29.764" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:16:29.765" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170929 04:16:29.765" starttime="20170929 04:16:29.759"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:29.766" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:29.766" starttime="20170929 04:16:29.766"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.766" starttime="20170929 04:16:29.765"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:27.298"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.976"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.975"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.975"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.975"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.974"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.960"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.958"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.767" starttime="20170929 04:16:22.957"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.769" starttime="20170929 04:16:29.769"></status>
</kw>
<msg timestamp="20170929 04:16:29.769" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:29.769" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:16:29.769" starttime="20170929 04:16:29.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.770" starttime="20170929 04:16:29.770"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.787" starttime="20170929 04:16:29.784"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170929 04:16:29.789" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170929 04:16:29.789" starttime="20170929 04:16:29.787"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.789" starttime="20170929 04:16:29.783"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.789" starttime="20170929 04:16:29.770"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.789" starttime="20170929 04:16:29.767"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:29.789" starttime="20170929 04:16:29.767"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.791" starttime="20170929 04:16:29.791"></status>
</kw>
<msg timestamp="20170929 04:16:29.791" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:29.791" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:16:29.791" starttime="20170929 04:16:29.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.792" starttime="20170929 04:16:29.792"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 04:16:29.831" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:29.832" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170929 04:16:29.879" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170929 04:16:29.889" level="INFO">${core_files} = None</msg>
<msg timestamp="20170929 04:16:29.889" level="INFO">${stderr} = None</msg>
<msg timestamp="20170929 04:16:29.889" level="INFO">${rc} = None</msg>
<msg timestamp="20170929 04:16:29.890" level="FAIL">#(UTC) 2017/09/29 04:16:29.888619 -    0.057432 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170929 04:16:29.890" starttime="20170929 04:16:29.812"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170929 04:16:29.890" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170929 04:16:29.891" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170929 04:16:29.891" starttime="20170929 04:16:29.890"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:29.905" starttime="20170929 04:16:29.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:30.572" starttime="20170929 04:16:29.907"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.573" starttime="20170929 04:16:29.906"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.573" starttime="20170929 04:16:29.898"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.573" starttime="20170929 04:16:29.891"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170929 04:16:30.573" starttime="20170929 04:16:30.573"></status>
</kw>
<status status="FAIL" endtime="20170929 04:16:30.573" starttime="20170929 04:16:29.806"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.573" starttime="20170929 04:16:29.792"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.574" starttime="20170929 04:16:29.790"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.574" starttime="20170929 04:16:29.789"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:30.576" starttime="20170929 04:16:30.576"></status>
</kw>
<msg timestamp="20170929 04:16:30.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:30.576" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:16:30.576" starttime="20170929 04:16:30.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:30.577" starttime="20170929 04:16:30.577"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:16:30.591" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170929 04:16:30.591" starttime="20170929 04:16:30.591"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:16:30.593" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170929 04:16:30.593" starttime="20170929 04:16:30.592"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:30.594" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170929 04:16:30.594" starttime="20170929 04:16:30.593"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:30.595" starttime="20170929 04:16:30.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:30.596" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:30.596" starttime="20170929 04:16:30.595"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:30.636" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:30.636" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170929 04:16:30.683" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:30.683" starttime="20170929 04:16:30.613"></status>
</kw>
<msg timestamp="20170929 04:16:30.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:30.683" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170929 04:16:30.683" starttime="20170929 04:16:30.596"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:30.684" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170929 04:16:30.684" starttime="20170929 04:16:30.684"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:30.685" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:30.685" starttime="20170929 04:16:30.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:30.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:30.692" starttime="20170929 04:16:30.692"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.693" starttime="20170929 04:16:30.691"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.693" starttime="20170929 04:16:30.685"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.693" starttime="20170929 04:16:30.594"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:30.693" starttime="20170929 04:16:30.593"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:30.694" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170929 04:16:30.694" starttime="20170929 04:16:30.693"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:30.695" starttime="20170929 04:16:30.695"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:30.696" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:30.696" starttime="20170929 04:16:30.695"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:30.737" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:30.738" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170929 04:16:31.329" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:31.329" starttime="20170929 04:16:30.714"></status>
</kw>
<msg timestamp="20170929 04:16:31.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:31.330" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 29 04:16 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 29 04:16 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170929 04:16:31.330" starttime="20170929 04:16:30.696"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:31.331" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 29 04:16 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 29 04:16 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170929 04:16:31.332" starttime="20170929 04:16:31.331"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:31.332" level="INFO">${stderr} = ls: /proc/2544/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170929 04:16:31.332" starttime="20170929 04:16:31.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:31.340" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:31.340" starttime="20170929 04:16:31.340"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:31.341" starttime="20170929 04:16:31.339"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:31.341" starttime="20170929 04:16:31.333"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:31.341" starttime="20170929 04:16:30.694"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:31.341" starttime="20170929 04:16:30.693"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:31.342" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170929 04:16:31.342" starttime="20170929 04:16:31.341"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:31.343" starttime="20170929 04:16:31.343"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:31.344" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:31.344" starttime="20170929 04:16:31.343"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:31.385" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:31.385" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170929 04:16:33.875" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:33.876" starttime="20170929 04:16:31.362"></status>
</kw>
<msg timestamp="20170929 04:16:33.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:33.880" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-09-29 02:57:15 UTC, end at Fri 2017-09-29 04:16:45 UTC. --\nSep 29 02:57:15 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 29 02:57:15 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170929 04:16:33.880" starttime="20170929 04:16:31.344"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:33.882" level="INFO">${stdout} = -- Logs begin at Fri 2017-09-29 02:57:15 UTC, end at Fri 2017-09-29 04:16:45 UTC. --
Sep 29 02:57:15 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 29 02:57:15 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170929 04:16:33.882" starttime="20170929 04:16:33.881"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:33.882" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:33.883" starttime="20170929 04:16:33.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:33.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:33.892" starttime="20170929 04:16:33.891"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:33.892" starttime="20170929 04:16:33.889"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:33.892" starttime="20170929 04:16:33.883"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:33.892" starttime="20170929 04:16:31.342"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:33.892" starttime="20170929 04:16:31.341"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:33.893" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170929 04:16:33.893" starttime="20170929 04:16:33.893"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:33.895" starttime="20170929 04:16:33.894"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:33.895" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:33.896" starttime="20170929 04:16:33.895"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:33.937" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:33.938" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170929 04:16:42.070" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:42.080" starttime="20170929 04:16:33.914"></status>
</kw>
<msg timestamp="20170929 04:16:42.080" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:42.125" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=d2c64ceeab0e430c98e859a3354d4903;i=1;b=c02272132b2942b9afe6a319be6ac9b0;m=146264b;t=55a4b2eacd66e;x=a24c44e68fdb7bf3",\n\t"__REALTIME_TIMESTAMP" : "1506653835679342",\n\t"__MON...</msg>
<status status="PASS" endtime="20170929 04:16:42.126" starttime="20170929 04:16:33.896"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:42.136" level="INFO">${stdout} = {
	"__CURSOR" : "s=d2c64ceeab0e430c98e859a3354d4903;i=1;b=c02272132b2942b9afe6a319be6ac9b0;m=146264b;t=55a4b2eacd66e;x=a24c44e68fdb7bf3",
	"__REALTIME_TIMESTAMP" : "1506653835679342",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170929 04:16:42.136" starttime="20170929 04:16:42.126"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:42.137" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:42.137" starttime="20170929 04:16:42.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:42.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:42.166" starttime="20170929 04:16:42.159"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.166" starttime="20170929 04:16:42.147"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.166" starttime="20170929 04:16:42.138"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.166" starttime="20170929 04:16:33.894"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.166" starttime="20170929 04:16:33.892"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:42.167" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170929 04:16:42.167" starttime="20170929 04:16:42.167"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:42.169" starttime="20170929 04:16:42.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:42.170" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:42.170" starttime="20170929 04:16:42.169"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:42.210" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:42.211" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170929 04:16:42.258" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:42.258" starttime="20170929 04:16:42.188"></status>
</kw>
<msg timestamp="20170929 04:16:42.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:42.258" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          221732 kB\nMemAvailable:     323808 kB\nBuffers:           31696 kB\nCached:            81032 kB\nSwapCached:            0 kB\nActive:           15798...</msg>
<status status="PASS" endtime="20170929 04:16:42.259" starttime="20170929 04:16:42.170"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:42.260" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          221732 kB
MemAvailable:     323808 kB
Buffers:           31696 kB
Cached:            81032 kB
SwapCached:            0 kB
Active:           157980 kB
Inac...</msg>
<status status="PASS" endtime="20170929 04:16:42.260" starttime="20170929 04:16:42.259"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:42.260" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:42.261" starttime="20170929 04:16:42.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:42.272" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:42.272" starttime="20170929 04:16:42.271"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.272" starttime="20170929 04:16:42.270"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.272" starttime="20170929 04:16:42.261"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.272" starttime="20170929 04:16:42.168"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.272" starttime="20170929 04:16:42.167"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:42.273" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170929 04:16:42.273" starttime="20170929 04:16:42.273"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:42.274" starttime="20170929 04:16:42.274"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:42.275" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:42.275" starttime="20170929 04:16:42.275"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:42.316" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:42.317" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170929 04:16:42.635" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:42.636" starttime="20170929 04:16:42.293"></status>
</kw>
<msg timestamp="20170929 04:16:42.636" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:42.636" level="INFO">${ret_values} = (u'Mem: 210636K used, 221608K free, 8944K shrd, 31696K buff, 81036K cached\nCPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.61 0.39 0.31 1/154 2548\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170929 04:16:42.636" starttime="20170929 04:16:42.276"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:42.637" level="INFO">${stdout} = Mem: 210636K used, 221608K free, 8944K shrd, 31696K buff, 81036K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.61 0.39 0.31 1/154 2548
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170929 04:16:42.637" starttime="20170929 04:16:42.637"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:42.638" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:42.638" starttime="20170929 04:16:42.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:42.645" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:42.645" starttime="20170929 04:16:42.645"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.645" starttime="20170929 04:16:42.644"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.646" starttime="20170929 04:16:42.638"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.646" starttime="20170929 04:16:42.273"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.646" starttime="20170929 04:16:42.272"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:16:42.647" level="INFO">${logpath} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170929 04:16:42.647" starttime="20170929 04:16:42.646"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:42.648" starttime="20170929 04:16:42.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:16:42.649" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:16:42.649" starttime="20170929 04:16:42.648"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:16:42.690" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:16:42.690" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170929 04:16:42.759" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:16:42.760" starttime="20170929 04:16:42.667"></status>
</kw>
<msg timestamp="20170929 04:16:42.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:42.760" level="INFO">${ret_values} = (u'[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status status="PASS" endtime="20170929 04:16:42.760" starttime="20170929 04:16:42.649"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:16:42.761" level="INFO">${stdout} = [    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status status="PASS" endtime="20170929 04:16:42.761" starttime="20170929 04:16:42.760"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:16:42.761" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:16:42.761" starttime="20170929 04:16:42.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:16:42.769" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/20170929041619861316_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:42.769" starttime="20170929 04:16:42.769"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.769" starttime="20170929 04:16:42.768"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.769" starttime="20170929 04:16:42.762"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:42.647"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:42.646"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.593"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.592"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.592"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.591"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.590"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.577"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.574"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.770" starttime="20170929 04:16:30.574"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:42.772" starttime="20170929 04:16:42.772"></status>
</kw>
<msg timestamp="20170929 04:16:42.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:42.772" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:16:42.772" starttime="20170929 04:16:42.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:42.773" starttime="20170929 04:16:42.773"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:42.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:42.791" starttime="20170929 04:16:42.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:42.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:42.792" starttime="20170929 04:16:42.792"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:42.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:42.793" starttime="20170929 04:16:42.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:42.793" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:42.794" starttime="20170929 04:16:42.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:42.983" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:42.983" starttime="20170929 04:16:42.794"></status>
</kw>
<msg timestamp="20170929 04:16:42.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:42.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:42.984" starttime="20170929 04:16:42.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:42.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:42.985" starttime="20170929 04:16:42.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:42.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:42.985" starttime="20170929 04:16:42.985"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.986" starttime="20170929 04:16:42.790"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.986" starttime="20170929 04:16:42.789"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:42.986" starttime="20170929 04:16:42.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:42.986" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170929 04:16:42.986" starttime="20170929 04:16:42.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:42.987" starttime="20170929 04:16:42.987"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:43.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:16:43.031" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.031" starttime="20170929 04:16:42.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.032" starttime="20170929 04:16:43.032"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:43.032" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:43.033" starttime="20170929 04:16:43.032"></status>
</kw>
<msg timestamp="20170929 04:16:43.033" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.033" starttime="20170929 04:16:42.788"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 04:16:43.034" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 04:16:43.034" starttime="20170929 04:16:43.034"></status>
</kw>
<msg timestamp="20170929 04:16:43.035" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 04:16:43.035" starttime="20170929 04:16:43.033"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170929 04:16:43.035" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:16:43.035" starttime="20170929 04:16:43.035"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.035" starttime="20170929 04:16:42.787"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.036" starttime="20170929 04:16:42.773"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.036" starttime="20170929 04:16:42.770"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.036" starttime="20170929 04:16:42.770"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.038" starttime="20170929 04:16:43.037"></status>
</kw>
<msg timestamp="20170929 04:16:43.038" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:43.038" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:16:43.038" starttime="20170929 04:16:43.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.038" starttime="20170929 04:16:43.038"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170929 04:16:43.055" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:16:43.055" starttime="20170929 04:16:43.054"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.055" starttime="20170929 04:16:43.052"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.055" starttime="20170929 04:16:43.039"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.055" starttime="20170929 04:16:43.036"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.055" starttime="20170929 04:16:43.036"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.055" starttime="20170929 04:16:20.872"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.056" starttime="20170929 04:16:20.869"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.056" starttime="20170929 04:16:20.869"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.056" starttime="20170929 04:16:20.869"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170929 04:16:43.063" starttime="20170929 04:16:43.062"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.063" starttime="20170929 04:16:43.056"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.063" starttime="20170929 04:16:20.868"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.063" starttime="20170929 04:16:16.823"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.063" starttime="20170929 04:16:16.823"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170929 04:16:43.065" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170929 04:16:43.065" starttime="20170929 04:16:43.064"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170929 04:16:43.065" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929041619861316_BmcCodeUpdate/20170929041619861316_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170929 04:16:43.065" starttime="20170929 04:16:43.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.066" starttime="20170929 04:16:43.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.067" starttime="20170929 04:16:43.066"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.067" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170929 04:16:43.067" starttime="20170929 04:16:43.067"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.069" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170929 04:16:43.069" starttime="20170929 04:16:43.068"></status>
</kw>
<msg timestamp="20170929 04:16:43.069" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170929 04:16:43.069" starttime="20170929 04:16:43.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.070" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:43.070" starttime="20170929 04:16:43.070"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.070" starttime="20170929 04:16:43.069"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.071" starttime="20170929 04:16:43.071"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:16:43.072" level="INFO">${cur_time} = 2017-09-29 04:16:43:072074</msg>
<status status="PASS" endtime="20170929 04:16:43.072" starttime="20170929 04:16:43.072"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:16:43.073" level="INFO">${cur_time} = 20170929041643072074</msg>
<status status="PASS" endtime="20170929 04:16:43.073" starttime="20170929 04:16:43.073"></status>
</kw>
<msg timestamp="20170929 04:16:43.074" level="INFO">${cur_time} = 20170929041643072074</msg>
<status status="PASS" endtime="20170929 04:16:43.074" starttime="20170929 04:16:43.071"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.075" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:16:43.075" starttime="20170929 04:16:43.074"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.075" starttime="20170929 04:16:43.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:43.080" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:43.080" starttime="20170929 04:16:43.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:43.081" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:43.081" starttime="20170929 04:16:43.081"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:43.082" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:43.082" starttime="20170929 04:16:43.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:43.082" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:43.082" starttime="20170929 04:16:43.082"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.281" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:43.282" starttime="20170929 04:16:43.083"></status>
</kw>
<msg timestamp="20170929 04:16:43.282" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:43.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.282" starttime="20170929 04:16:43.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.283" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.283" starttime="20170929 04:16:43.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.284" starttime="20170929 04:16:43.283"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.284" starttime="20170929 04:16:43.079"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.284" starttime="20170929 04:16:43.078"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.284" starttime="20170929 04:16:43.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:43.285" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170929 04:16:43.285" starttime="20170929 04:16:43.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.285" starttime="20170929 04:16:43.285"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:43.331" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170929 04:16:43.331" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.331" starttime="20170929 04:16:43.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.332" starttime="20170929 04:16:43.331"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:43.332" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:43.332" starttime="20170929 04:16:43.332"></status>
</kw>
<msg timestamp="20170929 04:16:43.332" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.332" starttime="20170929 04:16:43.077"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.333" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:16:43.333" starttime="20170929 04:16:43.333"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.333" starttime="20170929 04:16:43.076"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:16:43.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:16:43.337" starttime="20170929 04:16:43.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:16:43.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:16:43.338" starttime="20170929 04:16:43.337"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:16:43.338" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:16:43.338" starttime="20170929 04:16:43.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:16:43.339" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:16:43.339" starttime="20170929 04:16:43.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.519" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:16:43.519" starttime="20170929 04:16:43.340"></status>
</kw>
<msg timestamp="20170929 04:16:43.519" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:16:43.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.519" starttime="20170929 04:16:43.339"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.520" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.520" starttime="20170929 04:16:43.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.521" starttime="20170929 04:16:43.520"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.521" starttime="20170929 04:16:43.336"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.521" starttime="20170929 04:16:43.335"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.521" starttime="20170929 04:16:43.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:16:43.522" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 04:16:43.522" starttime="20170929 04:16:43.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.522" starttime="20170929 04:16:43.522"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:16:43.567" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 04:16:43.567" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.567" starttime="20170929 04:16:43.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.568" starttime="20170929 04:16:43.568"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:16:43.569" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:16:43.569" starttime="20170929 04:16:43.568"></status>
</kw>
<msg timestamp="20170929 04:16:43.569" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:16:43.569" starttime="20170929 04:16:43.334"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:16:43.570" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:16:43.570" starttime="20170929 04:16:43.569"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.570" starttime="20170929 04:16:43.334"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.570" starttime="20170929 04:16:43.076"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.570" starttime="20170929 04:16:43.075"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.570" starttime="20170929 04:16:16.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170929 04:16:43.571" starttime="20170929 04:16:43.570"></status>
</kw>
<status status="PASS" endtime="20170929 04:16:43.571" starttime="20170929 04:16:16.821"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170929 04:16:43.571" critical="yes" starttime="20170929 04:15:55.149">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170929 04:16:43.572" starttime="20170929 04:15:54.169"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
